<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Avalon</title>
    <description>抱朴 守拙
</description>
    <link>https://techctu.github.io//</link>
    <atom:link href="https://techctu.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 24 Feb 2017 17:19:31 +0800</pubDate>
    <lastBuildDate>Fri, 24 Feb 2017 17:19:31 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>webpack 2 和 react-router 实现按需加载</title>
        <description>&lt;p&gt;产品上线了一段时日，偷偷摸摸把 webpack 升级到了 2.x ，出现了很多优化需求，意味着很多新的库、新的代码，以及，更大的 bundle 。怎么办呢？ Code Splitting 呗！按需加载、懒加载┏ (゜ω゜)=☞。&lt;/p&gt;

&lt;h1 id=&quot;code-splitting-&quot;&gt;Code Splitting 的方式&lt;/h1&gt;
&lt;p&gt;前端代码一般需要进行拆分的地方有：
- 公共代码拆分，如所有代码共用的三方库，某些业务模块或页面用的三方库。
- 特定业务场景加速，如首页，或者多页面入口时的入口页面加速。比如现在老板要你做个地理位置的AR，总不能直接把这个包和常规业务代码丢一块加载吧。&lt;/p&gt;

&lt;h1 id=&quot;babel--webpack-&quot;&gt;babel 、 webpack 依赖配置&lt;/h1&gt;
&lt;p&gt;很多人都说 ES6 、 ES7 会毁了 JavaScript ，但各大语言语法趋向一致不是大趋势吗？难道之前的人开发写了一堆 polyfill 来解决各种诡异的问题后纷纷走向高级岗位，还要像吹牛逼说自己拿记事本写上万行代码一样，要求后来者也会写这堆 polyfill 吗？使用成熟的工具，是团队成功的必要条件之一吧。新的版本的曙光已经到来，不必抱残守缺。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;基础配置&lt;/h2&gt;
&lt;p&gt;这里使用的 webpack 为 2.2.1 。按照 &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;webpack 官网文档&lt;/a&gt;，需要先安装 babel 相关插件。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;es2015&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后在 &lt;code&gt;.babelrc&lt;/code&gt; 里，或是在 &lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;&quot;babel&quot;&lt;/code&gt; 里，亦或在 &lt;code&gt;webpack.config&lt;/code&gt; 的 &lt;code&gt;module -&amp;gt; rules -&amp;gt; use -&amp;gt; loader: &#39;babel-loader&#39;&lt;/code&gt; 的同级下配置。这里我是在 &lt;code&gt;package.json&lt;/code&gt; 里配置。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;babel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;presets&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;es2015&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;plugins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;syntax-dynamic-import&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样就可以这样写代码。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;determineDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;LLLL&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Failed to load moment&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;determineDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;目前这样已经可以使用 webpack 和 babel 来进行代码拆分了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;尝鲜配置&lt;/h2&gt;
&lt;p&gt;目前 ES7 的 async/await 语法都要出来了，只配置这些怎么够？所以我这样配置。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;es2015&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;es2016&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decorators&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decorators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;legacy&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spread&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;babel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;presets&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;es2015&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;es2016&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;es2017&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stage-0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;plugins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;syntax-dynamic-import&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;transform-decorators-legacy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;transform-object-rest-spread&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后就可以用各种新特性，比如箭头函数、async/await、装饰器等。&lt;/p&gt;

&lt;h1 id=&quot;react-router-&quot;&gt;基于 react-router 的代码拆分&lt;/h1&gt;
&lt;p&gt;在 &lt;a href=&quot;https://github.com/ReactTraining/react-router/tree/master/examples/huge-apps&quot;&gt;react-router的示例代码 huge-apps&lt;/a&gt; 里有非常经典的基于路由的代码拆分方案。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么基于路由拆分？一般一个路由对应一个逻辑上的业务页面，而一般多个业务页面在一个子路由下构成了业务流程，其代码依赖也比较相近，适合做代码拆分。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;基础路由配置&lt;/h2&gt;
&lt;p&gt;不拆分的路由长 &lt;a href=&quot;https://github.com/ReactTraining/react-router/blob/master/docs/guides/RouteConfiguration.md&quot;&gt;这样&lt;/a&gt; 。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Router&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{App}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;Route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;about&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{About}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;Route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;inbox&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{Inbox}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;messages/:id&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{Message}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Route&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Route&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Router&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;或者 &lt;a href=&quot;https://github.com/ReactTraining/react-router/blob/master/docs/guides/RouteConfiguration.md&quot;&gt;这样&lt;/a&gt; 。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;indexRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dashboard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;childRoutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;about&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;About&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;inbox&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Inbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;childRoutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;messages/:id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onEnter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Inbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;childRoutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;messages/:id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Message&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后，构建时 webpack 就会把所以依赖静态分析后打到指定的 bundle 里。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;路由拆分配置&lt;/h2&gt;
&lt;p&gt;react-router 利用 webpack 支持的 &lt;code&gt;require.ensure&lt;/code&gt; 来实现延迟加载。基本思路是将需要拆分的路由注册到路由配置里，将依赖的 react 组件通过 require.ensure 来加载，听过 getChildRoutes 和 getComponents 这样的黑科技。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 组件和其路由&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Announcement/Announcement.js &lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Announcement&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;courseId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;announcementId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;COURSES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;courseId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;announcements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;announcementId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/h4&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Announcement&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 对应路由封装和暴露&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Announcement/index.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:announcementId&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ensure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./components/Announcement&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 路由配置 &lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;childRoutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./components/App&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;childRoutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./routes/Announcement&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;简单来说，就是&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;childRoutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./components/App&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;childRoutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:announcementId&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ensure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./components/Announcement&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;webpack-2x-&quot;&gt;webpack 2.x 下的加载方式&lt;/h2&gt;
&lt;p&gt;上面是 webpack 1.x 的配置方式，而在 2.x 下，需要进行一些修改，主要是用 &lt;code&gt;import&lt;/code&gt; 替换 &lt;code&gt;require.ensure&lt;/code&gt; 。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Announcement/index.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:announcementId&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./components/Announcement&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// require.ensure([], (require) =&amp;gt; {&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   cb(null, require(&amp;#39;./components/Announcement&amp;#39;))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// })&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;todos&quot;&gt;TODOs&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;懒加载划分和加载异常处理。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 24 Feb 2017 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2017/02/24/webpack-2-%E5%92%8C-react-router-%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2017/02/24/webpack-2-%E5%92%8C-react-router-%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.html</guid>
        
        <category>webpack</category>
        
        <category>webpack2</category>
        
        <category>react-router</category>
        
        <category>延迟加载</category>
        
        <category>按需加载</category>
        
        <category>babel</category>
        
        
      </item>
    
      <item>
        <title>在 html 中使用 react 和 jsx —— 不使用 nodejs</title>
        <description>&lt;p&gt;今天有人跟我提了一个非常奇怪的需求：想使用 reactjs 来组件化，重写以前封装的组件。但他们的 leader 又觉得 node 、 npm 、 webpack 那一套很麻烦，太复杂了，只想要 react 封装组件。所以他想要的可能是这样：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;组件封装在 js 里，使用 react 封装。&lt;/li&gt;
  &lt;li&gt;访问某个页面时，返回对应的 html 文件，文件中引入 js ，非 SPA 。&lt;/li&gt;
  &lt;li&gt;绝对不使用 node 、 npm 、 webpack 。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;html--react&quot;&gt;在 html 中使用 react&lt;/h1&gt;
&lt;p&gt;可以参考 &lt;a href=&quot;https://www.sitepoint.com/getting-started-react-jsx/&quot;&gt;Getting Started with React&lt;/a&gt;  （&lt;em&gt;不能访问请翻墙&lt;/em&gt;）。&lt;/p&gt;

&lt;h2 id=&quot;react&quot;&gt;开始使用 react&lt;/h2&gt;
&lt;p&gt;去国内 CDN 去找到 react 、 react-dom 、 browser 三个库，如 &lt;a href=&quot;http://www.bootcdn.cn/&quot;&gt;BootCDN&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;参考一下官网的 &lt;a href=&quot;https://facebook.github.io/react/docs/hello-world.html&quot;&gt;hello-world&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;找个地方创建目录，写一个 &lt;code&gt;index.html&lt;/code&gt; 。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;zh-cmn-Hans&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My First React Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;greeting-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://cdn.bootcss.com/react/15.4.2/react.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://cdn.bootcss.com/react/15.4.2/react-dom.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://cdn.bootcss.com/babel-core/6.1.19/browser.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/babel&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Universe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/p&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;greeting-div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这段代码创建了一个名为 &lt;code&gt;Greeting&lt;/code&gt; 的 &lt;code&gt;react&lt;/code&gt; 组件，然后在 &lt;code&gt;greeting-div&lt;/code&gt; 这个 &lt;code&gt;div&lt;/code&gt; 下使用 &lt;code&gt;react-dom&lt;/code&gt; 的 &lt;code&gt;render&lt;/code&gt; 方法来渲染成如下代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;greeting-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, Universe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;原文其他部分不再翻译，毕竟这篇文章不是为了翻译，只是记录一下怎么在浏览器中使用 react 。语法部分的问题参考其他文章即可&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;webpack-&quot;&gt;与使用 webpack 等的区别&lt;/h2&gt;
&lt;p&gt;在一般的开发过程中，使用的是 node + npm + webpack + babel + react + react-dom ， 可能还要使用 redux 系列的库来开发，项目多为 SPA 。从开发到浏览器访问的处理过程一般为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;react 组件/页面（ es6 语法）--（ webpack 、 babel ）--&amp;gt; es5 语法的 js chunk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不使用这些，辣么就得在浏览器中通过 &lt;code&gt;browser.js&lt;/code&gt; 来将 es6 的语法转换成 es5 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这样做很有可能会降低页面渲染速度。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;对最终目录结构的猜想&lt;/h2&gt;
&lt;p&gt;可能是类似这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/
|__view
|   |__home
|   |   |__index.html // 页面入口html
|   |   |__index.js  // 页面入口js
|   |   |__ComA.js  // 页面使用的组件
|__common
|__|__header
|__|__footer // 在这里的 html 模板片段中引入 react 、 react-dom 和 browser
|__css // 可能 css 就是一个文件
|__image
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sat, 18 Feb 2017 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2017/02/18/%E5%9C%A8-html-%E4%B8%AD%E4%BD%BF%E7%94%A8-react-%E5%92%8C-jsx-%E4%B8%8D%E4%BD%BF%E7%94%A8-nodejs.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2017/02/18/%E5%9C%A8-html-%E4%B8%AD%E4%BD%BF%E7%94%A8-react-%E5%92%8C-jsx-%E4%B8%8D%E4%BD%BF%E7%94%A8-nodejs.html</guid>
        
        <category>react</category>
        
        
      </item>
    
      <item>
        <title>使用 nodejs zip / tar 目录 / 文件夹</title>
        <description>&lt;p&gt;有某个大佬想要搞自动发布，问我能不能搞一个 zip 静态资源目录的脚本。我瞅了瞅他，看在 windows 环境的面子上，就没有要求他自己写 shell 脚本了。&lt;/p&gt;

&lt;h1 id=&quot;npm-&quot;&gt;去 npm 找一个库&lt;/h1&gt;
&lt;p&gt;万能的 npm 上有个 &lt;a href=&quot;https://www.npmjs.com/package/archiver&quot;&gt;archiver&lt;/a&gt; ，正好可以打包目录，和那些只能 appendFile 的妖艳贱货都不一样呢。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;写打包脚本&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;你会写nodejs吗？
我也不知道什么算会写啊，写个这个脚本打包个目录算不算？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;直接上代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;archiver&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;archiver&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 使用 nodejs 封装的接口检查是否存在输出目录&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkOutputDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;archiver/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// nodejs版本更新后将fs.R_OK挪到了fs.constants.R_OK&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;R_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;R_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;W_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;W_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;W_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;W_OK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;try to create archiver directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fail: create archiver directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 压缩资源&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetEnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;asset/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;archiver/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;projName&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkOutputDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;YYYYMMDD-HHmmss&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prepare&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zipped&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;archive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;archiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;zip&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}});&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWriteStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; total bytes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;archiver finalized&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);});&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;finalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;todos&quot;&gt;TODOs&lt;/h1&gt;
&lt;p&gt;干脆用command整个命令得了。&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Feb 2017 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2017/02/18/%E4%BD%BF%E7%94%A8-nodejs-zip-tar-%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6%E5%A4%B9.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2017/02/18/%E4%BD%BF%E7%94%A8-nodejs-zip-tar-%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6%E5%A4%B9.html</guid>
        
        <category>nodejs</category>
        
        
      </item>
    
      <item>
        <title>从 webpack 1.x 迁移到 webpack 2.x</title>
        <description>&lt;p&gt;项目搭建使用的 webpack 1.3.1 来作为打包工具，webpack 2.2 已经发布。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;升级项目依赖&lt;/h1&gt;
&lt;p&gt;备份，在 &lt;code&gt;package.json&lt;/code&gt; 中移除 &lt;code&gt;webpack&lt;/code&gt; 依赖。使用了 &lt;code&gt;extract-text-webpack-plugin&lt;/code&gt; 的话这个插件也需要更新。&lt;/p&gt;

&lt;h1 id=&quot;webpackconfig-&quot;&gt;修改 webpack.config （开发）&lt;/h1&gt;

&lt;h2 id=&quot;debug&quot;&gt;debug&lt;/h2&gt;

&lt;p&gt;1.x 中使用了 &lt;code&gt;debug:true&lt;/code&gt; 的配置，在 2.x 中改为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LoaderOptionsPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;resolve&quot;&gt;resolve&lt;/h2&gt;
&lt;p&gt;resolve.extensions 不再需要传入空字符串，&lt;code&gt;extensions: [&#39;&#39;, &#39;js&#39;]&lt;/code&gt; -&amp;gt; &lt;code&gt;extensions: [&#39;js&#39;]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;增加 modules 配置来加速加载 &lt;code&gt;modules: [path.resolve(__dirname, &#39;./scripts&#39;), &#39;node_modules&#39;]&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&quot;proxy&quot;&gt;proxy&lt;/h2&gt;
&lt;p&gt;因为动静分离，1.x 中使用了 &lt;code&gt;proxy:{&#39;/uri/*&#39;:{target:&#39;https://host&#39;}}&lt;/code&gt; 来进行代理。在 2.x 中将这部分配置挪到了启动 webpack-dev-server 的脚本中：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebpackDevServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bundler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;/yh-web/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;c1&quot;&gt;//target: &amp;#39;http://localhost:9080&amp;#39; &lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://10.230.146.19:9080&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;/yx-web/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost:9090&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;noerrorsplugin&quot;&gt;NoErrorsPlugin&lt;/h2&gt;
&lt;p&gt;废弃，使用 &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&quot;module&quot;&gt;module&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;module.loaders&lt;/code&gt; 修改为 &lt;code&gt;module.rules&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;Loaders 需要添加 &lt;code&gt;-loader&lt;/code&gt;，如 &lt;code&gt;babel&lt;/code&gt; -&amp;gt; &lt;code&gt;babel-loader&lt;/code&gt; 。&lt;/p&gt;

&lt;h1 id=&quot;webpackconfigproductionjs&quot;&gt;修改生产配置 webpack.config.production.js&lt;/h1&gt;
&lt;p&gt;除了上述修改，目前主要为 extract-text-webpack-plugin 的配置修改。&lt;/p&gt;

&lt;h2 id=&quot;extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Plugin 中的参数 &lt;code&gt;new ExtractTextPlugin(&#39;css/[name].[chunkhash].css&#39;, {allChunks: true})&lt;/code&gt; 修改为 &lt;code&gt;new ExtractTextPlugin({filename: &#39;css/[name].[chunkhash].css&#39;, allChunks: true}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;rules 中 css 抽取修改为 &lt;code&gt;use: ExtractTextPlugin.extract({fallback: &#39;style-loader&#39;, use: &#39;css-loader?modules&amp;amp;minimize&amp;amp;importLoaders=1&amp;amp;localIdentName=[hash:base64:5]&#39;})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;occurenceorderplugin--dedupeplugin&quot;&gt;OccurenceOrderPlugin 和 DedupePlugin&lt;/h2&gt;
&lt;p&gt;废弃，webpack 2.x 自带，不再使用。&lt;/p&gt;

&lt;h2 id=&quot;uglifyjsplugin&quot;&gt;UglifyJsPlugin&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/guides/migrating/#uglifyjsplugin-sourcemap&quot;&gt;官方默认配置&lt;/a&gt;已修改，这里配置改为&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;optimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UglifyJsPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;compress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;souceMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;section-1&quot;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/guides/migrating/&quot;&gt;Migrating from v1 to v2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zcfy.cc/article/migrating-from-v1-to-v2-2378.html&quot;&gt;从 webpack v1 迁移到 webpack v2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://imweb.io/topic/5868e1abb3ce6d8e3f9f99bb&quot;&gt;webpack 2终极优化&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Feb 2017 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2017/02/18/%E4%BB%8E-webpack-1x-%E8%BF%81%E7%A7%BB%E5%88%B0-webpack-2x.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2017/02/18/%E4%BB%8E-webpack-1x-%E8%BF%81%E7%A7%BB%E5%88%B0-webpack-2x.html</guid>
        
        <category>webpack</category>
        
        
      </item>
    
      <item>
        <title>停止更新，使用issues来记录</title>
        <description>&lt;p&gt;最后一篇，以后使用 &lt;a href=&quot;https://github.com/techctu/techctu.github.io/issues&quot;&gt;issues&lt;/a&gt; 来记录。&lt;/p&gt;

&lt;p&gt;有空了再挑挑文章来迁移。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Feb 2017 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2017/02/04/%E5%81%9C%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8issues%E6%9D%A5%E8%AE%B0%E5%BD%95.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2017/02/04/%E5%81%9C%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8issues%E6%9D%A5%E8%AE%B0%E5%BD%95.html</guid>
        
        
      </item>
    
      <item>
        <title>使用GSAP简单实现react列表中的下拉刷新和上拉加载更多</title>
        <description>&lt;p&gt;项目上线后看着列表不能下拉刷新不能上拉加载非常不爽，就做了个简单的实现。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;为什么自己造轮子？用react不想添加jQuery，同时GitHub上的大部分代码都不能同时支持上拉和下拉。&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;准备&lt;/h1&gt;
&lt;p&gt;找个现成的项目新建一个页面，写个timeout模拟异步请求。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;refresh() {
  setTimeout(()=&amp;gt;{this.setState({
    items: [1,2,3,4,5]
  })}, 1000);
}

loadMore() {
  setTimeout(()=&amp;gt;{this.setState({
    items: this.state.items.concat([1,2,3,4,5])
  })}, 1000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再整个生成列表。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function renderList(list) {
  return (list.map((v, i) =&amp;gt; (
    &amp;lt;li key={i} onClick={function() {browserHistory.push(&#39;/MerchantDetail/&#39; + v.id + &#39;/&#39; + v.distance);}}&amp;gt;
      &amp;lt;div styleName=&quot;m-shop-right&quot;&amp;gt;
        &amp;lt;h1&amp;gt;
          {i}
        &amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/li&amp;gt;)
    )
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后开始搞事情。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;实现下拉和上拉&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;设计&lt;/h2&gt;
&lt;p&gt;现在的上拉和下拉大部分是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;监听ontouchstart, ontouchmove, ontouchend三个事件。&lt;/li&gt;
  &lt;li&gt;判断上拉下拉边界，进行对应的CSS transform和transition。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// sample，监听list的事件，修改list-header
&amp;lt;div id=&quot;list&quot;&amp;gt;
    &amp;lt;div id=&quot;list-header&quot; /&amp;gt;
    &amp;lt;div id=&quot;list-items&quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-3&quot;&gt;实现&lt;/h2&gt;
&lt;p&gt;最开始想用 &lt;code&gt;react-css-transition-group&lt;/code&gt; 或 &lt;code&gt;react-transition-group&lt;/code&gt; 来实现上拉和下拉效果，像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;reactcsstransitiongroup ref={(el) =&amp;gt; this._ref = el}&amp;gt;
    &amp;lt;div id=&quot;list-header&quot; /&amp;gt;
    &amp;lt;div id=&quot;list-items&quot; /&amp;gt;
&amp;lt;/reactcsstransitiongroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而仔细阅读了之后，发现只能在 &lt;code&gt;mount&lt;/code&gt; 和 &lt;code&gt;unmount&lt;/code&gt; 这两个关键点触发动画，在 &lt;code&gt;update&lt;/code&gt; 的时候无法触发。&lt;/p&gt;

&lt;p&gt;我非常不希望通过 &lt;code&gt;&amp;lt;div style=/&amp;gt;&lt;/code&gt; 的方式，每次滑动的时候就render一次。于是去找GitHub提了issue，和大佬对话的&lt;a href=&quot;https://github.com/reactjs/react-transition-group/issues/8&quot;&gt;传送门&lt;/a&gt;，大意就是说现在没法直接获得list-header的ref，得 &lt;code&gt;findDOMNode(this._ref).children[0]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这个就非常微妙了，既然如此，我为何一定要用 &lt;code&gt;react-css-transition-group&lt;/code&gt; 或 &lt;code&gt;react-transition-group&lt;/code&gt; 呢？简单点不好么？直接把这部分动画操作放在直接的DOM操作里绕开react，然后在ontouchend里回调，也是一种不错的思路。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;div id=&quot;g-wrap&quot; onTouchStart={(e) =&amp;gt; this.handleTouchStart(e)} 
  onTouchMove={(e) =&amp;gt; this.handleTouchMove(e)} 
  onTouchEnd={(e) =&amp;gt; this.handleTouchEnd(e)}&amp;gt; 
    // ...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;handleTouchStart(e) {
  this._touchStartPosY = e.touches[0].pageY;//记录触摸开始位置
  this._gmainDefaultPaddingTopRem = &#39;1.8rem&#39;;//记录初始列表头部位置，可改成接收参数
  this._gmainDefaultPaddingTop = parseInt(
    this._gmainDefaultPaddingTopRem.substr(0, this._gmainDefaultPaddingTopRem.length - 3));
  this._gmainDefaultPaddingBottom = 0;//底部
  this._lastScrollY = -1;//用于记录上一次滚动位置
  this._equalScroll = false;//用于标记上拉到了底部
}

handleTouchMove(e) {
  this._touchEndPosY = e.touches[0].pageY;

  // 下拉到顶
  if (window.scrollY &amp;lt;= 0) {
    this._lastScrollY = window.scrollY;
    // 拉且限制拉的距离
    if (this._touchEndPosY - this._touchStartPosY &amp;gt; 0 &amp;amp;&amp;amp; this._touchEndPosY - this._touchStartPosY &amp;lt; 100) {
      let gmain = findDOMNode(this._gmain);
      // 偷懒使用TweenMax来生成动画
      TweenMax.to(gmain, 0, 
        {paddingTop: this._gmainDefaultPaddingTop + 
            (this._touchEndPosY - this._touchStartPosY)/20 + &#39;rem&#39;, 
            ease: Power0.easeInOut});
    }
  } else {
    // 上拉到底
    if (window.scrollY == this._lastScrollY) {
      if (!this._equalScroll) {
        this._equalScroll = true;
        this._equalScrollY = window.scrollY;
        this._equalClientY = e.touches[0].clientY;
      } 
      let gmain = findDOMNode(this._gmain);
      e.preventDefault();
      // 限制上拉距离生成动画
      let offsetY = this._touchEndPosY&amp;gt;100?100:this._touchEndPosY;
      TweenMax.to(gmain, 0, 
        {paddingBottom: this._gmainDefaultPaddingBottom + offsetY/20&amp;gt; + &#39;rem&#39;, 
        ease: Power0.easeInOut});
      
    } else {
      this._lastScrollY = window.scrollY;
    }
  }
}

handleTouchEnd(e) {
  if (window.scrollY &amp;lt;= 0) {
    if (this._touchEndPosY - this._touchStartPosY &amp;gt; 0) {
      let gmain = findDOMNode(this._gmain);
      // 弹回
      TweenMax.to(gmain, 1, 
        {paddingTop: this._gmainDefaultPaddingTopRem, 
            ease: Back.easeInOut});
      this.refresh();
    }
  } else {
    if (this._equalScroll) {
      let gmain = findDOMNode(this._gmain);
      // 弹回
      TweenMax.to(gmain, 1, 
        {paddingBottom: this._gmainDefaultPaddingBottom, 
            ease: Power3.easeInOut});
      this.loadMore();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-4&quot;&gt;总结&lt;/h1&gt;
&lt;p&gt;整个思路就是：通过起始 &lt;code&gt;pageY&lt;/code&gt; 和结束 &lt;code&gt;pageY&lt;/code&gt; 判断用户垂直滑动方向，在根据 &lt;code&gt;window.scrollY&lt;/code&gt; 和保存的上一次滑动位置来判断是否到顶（或者到底），到顶（或者到底）后执行 tansform，touchEnd的时候进行回调。&lt;/p&gt;

&lt;p&gt;当然这只是个简单实践，还需要进一步优化，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持传入回调函数。&lt;/li&gt;
  &lt;li&gt;支持定义限制的上拉下拉高度。&lt;/li&gt;
  &lt;li&gt;支持上拉下拉时载入自定义的静态资源，如活动动画或是刷新效果等。&lt;/li&gt;
  &lt;li&gt;设置默认参数。&lt;/li&gt;
  &lt;li&gt;将TweenMax改为原生方法实现减少大小。&lt;/li&gt;
  &lt;li&gt;抽取为high-order-component。&lt;/li&gt;
  &lt;li&gt;最近这种纯前端的东西做的有点多，是时候拿 nodejs 和 express/koa 搞事情了。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 11 Jan 2017 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2017/01/11/%E4%BD%BF%E7%94%A8gsap%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0react%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2017/01/11/%E4%BD%BF%E7%94%A8gsap%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0react%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A.html</guid>
        
        <category>gsap</category>
        
        <category>react</category>
        
        <category>pull to refresh</category>
        
        <category>push to load more</category>
        
        
      </item>
    
      <item>
        <title>在Babel6中使用ES7 Decorator</title>
        <description>&lt;p&gt;在做下拉的时候搜寻到的&lt;a href=&quot;http://technologyadvice.github.io/es7-decorators-babel6/&quot;&gt;资料&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;decorator&quot;&gt;增加decorator支持&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;假设你已经安装过 &lt;code&gt;babel-preset-2015&lt;/code&gt; 和 &lt;code&gt;babel-preset-react&lt;/code&gt; 等，并配置完毕。&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev babel-plugin-transform-decorators-legacy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在 &lt;code&gt;.babelrc&lt;/code&gt; 中添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者在webpack配置文件中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module: {
  loaders: [
    {
      test: /\.js$/,
      exclude: /node_modules\/(?!(stardust))/,
      loader: &#39;babel&#39;,
      query: {
        plugins: [
          &#39;transform-decorators-legacy&#39;,
        ]
      },
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section&quot;&gt;使用方式&lt;/h1&gt;
&lt;p&gt;在我项目代码中使用了&lt;a href=&quot;https://github.com/gajus/react-css-modules&quot;&gt;react-css-modules&lt;/a&gt;。原来是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import CSSModules from &#39;react-css-modules&#39;;
import styles from &#39;app.css&#39;;
import {Component} from &#39;react&#39;

class A extends Component {

}

export default CSSModules(A, styles, {allowMultiple: true});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用之后是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import CSSModules from &#39;react-css-modules&#39;;
import styles from &#39;app.css&#39;;
import {Component} from &#39;react&#39;

@CSSModules(styles, {allowMultiple: true})
class A extends Component {

}

export default A;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-1&quot;&gt;总结&lt;/h1&gt;
&lt;p&gt;为什么要用decorator？在实现下拉的时候，我就在想，如果能在实现一个动画效果后，能应用到任意组件上就好了，所以才找到了decorator。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://jamesknelson.com/structuring-react-applications-higher-order-components/&quot;&gt;Structuring React Applications: Higher-Order Components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://medium.com/@cheapsteak/reusing-reacttransitiongroup-animations-with-higher-order-components-1e7043451f91#.61d51t159&quot;&gt;Reusing ReactTransitionGroup animations with Higher-order Components&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jan 2017 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2017/01/10/%E5%9C%A8babel6%E4%B8%AD%E4%BD%BF%E7%94%A8es7-decorator.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2017/01/10/%E5%9C%A8babel6%E4%B8%AD%E4%BD%BF%E7%94%A8es7-decorator.html</guid>
        
        <category>babel</category>
        
        <category>decorator</category>
        
        
      </item>
    
      <item>
        <title>2016年年终总结</title>
        <description>&lt;p&gt;一年一度的年终总结又开始了，前几年的年终总结要么拖着拖着就没写了，要么就是写了忘了放哪了。今年把之前的博客从国外的托管主机上的WordPress博客放到了github上，然后用七牛去做了一下镜像缓存，码字和发布的体验提升了不少，也就有了那么一点写年终总结的兴致。&lt;/p&gt;

&lt;p&gt;今年整个部门最重要的工作就是三大平台的建设，年初我参与了部分WLAN建设工作，之后的主要工作是负责其中一个子中心的前端建设工作。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;前端建设&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;我是我行一块砖，哪有需要往哪搬。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;履历背景&lt;/h2&gt;
&lt;p&gt;最开始的时候，其实我是做后端的。这里的后端是我们部门成立的时候用Spring、Zookeeper、Dubbo、Quartz等搭建的架构。2013年那时候P2P特别火，我负责的是P2P投资流程的设计和开发。那时候的感触就是，数据库设计中一定的冗余是必要的，范式不一定合适；外系统的东西一定要在接口层隔离；日志要清晰，生产环境不允许debug。&lt;/p&gt;

&lt;p&gt;14年的时候部门重构了系统，对各个子项目进行了拆分，这个时候就体现出了设计模式原则的重要性。之前我们就要求尽可能隔离外部系统、外部接口对内部的影响，所以重构的时候基本没有对现有项目产生大的影响。&lt;/p&gt;

&lt;p&gt;后来就去做了几个新业务的APP开发，接触了一个非常魔幻的开发框架，是&lt;a href=&quot;http://www.rytong.com/?p=1063&quot;&gt;这个公司&lt;/a&gt;提供的。该框架是在Objective-C和Java上包了一个lua解释器，使用lua来进行开发。那阵子主要负责跟业务谈需求，然后再用Axure画UE，再盯开发实现和UE、UI有什么差距。&lt;/p&gt;

&lt;p&gt;2015年的时候主要是做APP，使用那个魔幻框架，深切感受到了开发工具的重要性。没有高亮、没有自动格式化、没有错误提示、没有自动补全，这样的开发体验非常不友好，极大降低了开发效率，一些设计上的原则和规范也很难顺利执行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q:为什么使用这个框架？A:（假装没听见这个问题）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;年底研究了支付宝、微信支付等接口，在这个魔幻框架上实现了第三方APP和浏览器调起客户端支付的功能。&lt;/p&gt;

&lt;p&gt;2016年初主要是参与一个WLAN建设的项目，毕竟我行网点众多，像这种在一般小饭馆提供WiFi服务的项目，规模上去了，就会出现很多问题。&lt;/p&gt;

&lt;p&gt;之后，就是建设子中心前端了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;第一版前端&lt;/h2&gt;
&lt;p&gt;第一版前端如果从立项开始计算，经历了7个月。从成果上看，是一个APP的四个主页面中的一个页面及其后续流程。对于互联网公司来说，太慢了；但对于我行来说，这是一个了不起的成就了。毕竟，12月开始讨论需求，讨论到了3月底，还要改UE原型。原计划是5月上线，最后推到了6月。&lt;/p&gt;

&lt;p&gt;第一版碰到了许多坑，可能有很多我都忘了，得好好想想。这是我接触前端技术的开始，也是接触工程化开始思维侧重点向工程化偏移的开始。&lt;/p&gt;

&lt;p&gt;刚开始的时候，大佬说用react吧，Facebook的react很火啊很火啊，我们一堆萌新狂点头好呀好呀你是大佬你说什么都是对的，然后就上了react。DEMO，或者说流行的叫法为starter-kit，迅速搭建了起来，一切看起来很美好。&lt;/p&gt;

&lt;h3 id=&quot;amazeui&quot;&gt;舍弃AmazeUI&lt;/h3&gt;
&lt;p&gt;大佬们说，工期紧啊，用react框架吧！然后找了一个画风看起来小清新的&lt;a href=&quot;http://amazeui.org/&quot;&gt;啊妹子UI&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;当时的AmazeUI，组件难用，耦合高，使用起来感觉很重，代码质量也不高，而且不方便根据我们的需求进行定制。当然当时react还年轻，各个框架也不成熟，包括阿里的Ant-Design。不是说不好，但这些框架比较适合的还是作为中后台的管理系统前端框架，不适合我们进行定制开发。而且页面可以服用的部分不多，不需要过度追求组件化。&lt;/p&gt;

&lt;p&gt;于是乎，我们就把啊妹子UI舍弃了。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;后期啊妹子UI好像招到了一个比较牛的人，整个画风都不一样了。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;https&quot;&gt;全站HTTPS&lt;/h3&gt;
&lt;p&gt;放公网测试的时候，发生了一件非常尴尬的事情。运营商真是非常牛逼的，一言不合就往你的页面塞广告。这我能怎么办呢？没办法，全站HTTPS吧。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;地理位置定位&lt;/h3&gt;
&lt;p&gt;一般浏览器中使用的为IP定位和window.navigator.geolocation来获取经纬度定位。IP定位不准，geolocation定位受限于浏览器（webview）内核，如果用户刷机，甚至可能无法连接定位服务（被墙你懂的）。&lt;/p&gt;

&lt;p&gt;那么，使用百度地图JS API吧！然后换全站HTTPS之后，百度地图JS API出现各种问题。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;高德没有试过，有机会可以试试。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;还好有万能的第三方APP提供他们的定位接口，才能解决这个定位问题。&lt;/p&gt;

&lt;h3 id=&quot;app&quot;&gt;第三方APP内的路由&lt;/h3&gt;
&lt;p&gt;这又是个神奇的问题。在第三方APP里，你是要调用APP提供的接口来登录和支付的。调用登录和支付，会切换webview，导致原生的history返回出错。同时，第三方给的入口页面有第三方自己的header和footer，进入二级页面也会切换webview。&lt;/p&gt;

&lt;p&gt;只能自己记录一个栈，实现自己的返回方法了。简单来说就是在本地记录一个访问栈，每次访问新页面的时候把地址压入栈，返回的时候出栈。第一版使用的是Cookie，在react-router的onEnter方法中注入，避免路由影响页面部分的开发。&lt;/p&gt;

&lt;p&gt;这个方法存在一定的问题，难以记录当前页面状态，如多个页面的表单填写，需要保存当前表单的填写字段时，或是一个列表做了筛选操作时，需要做一定的特殊处理；需要清理Cookie；Cookie在会带入请求增加请求大小等。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;开发部署流程改进&lt;/h3&gt;
&lt;p&gt;初始的starter-kit中，虽然在webpack的配置文件里配置了css-loader、style-loader、url-loader来处理样式、图片等资源，但在实际使用过程中，只在入口html文件里引入了样式文件 &lt;code&gt;&amp;lt;link src=&quot;app.css&quot;&amp;gt;&lt;/code&gt; ，并没有考虑css、图片的压缩、优化等处理。为了将css、图片等资源纳入管理，使用了inline css方式，将css、图片也像js一样引入进来，并使用loader来处理，编写了示例代码，修改了文件输出方式增加了哈希值。&lt;/p&gt;

&lt;p&gt;因为我厂采用的是采购外部厂商设计UI实现静态页面，我们利用静态页面来开发的合作方式，引入了react-css-modules来处理样式，避免编写内联样式，优化开发体验。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;小结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;产品上线使用，初步搭建了前端开发部署框架和规范化的流程。&lt;/li&gt;
  &lt;li&gt;存在一些优化方面的问题。&lt;/li&gt;
  &lt;li&gt;路由全部由前端控制，使用的hashHistory，没有后端渲染。没有自动化测试。&lt;/li&gt;
  &lt;li&gt;没有执行Eslint。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;第二版前端&lt;/h2&gt;
&lt;p&gt;第二版前端主要在第一版基础上进行了一些改造。&lt;/p&gt;

&lt;h3 id=&quot;browserhistory&quot;&gt;替换为browserHistory&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;#后面应该是锚点，url应该就是/，为什么路由要用#？2016年了还#，你这是搞事情！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;代码洁癖：保持和最广泛的规范一致，不要搞事情。&lt;/p&gt;

&lt;p&gt;修改点：
- 前后端的uri前缀配置。
- 页面跳转方式使用browserHistory.push。
- 修改打包时各种静态资源的相对路径注入方式。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;修改跨页面变量存储方式&lt;/h3&gt;
&lt;p&gt;封装了Cookie和localStorage，自动判断本地是否支持localStorage，优先使用localStorage；如果强制要求使用Cookie则使用Cookie。&lt;/p&gt;

&lt;h3 id=&quot;app-1&quot;&gt;抽取第三方APP相关的接口代码&lt;/h3&gt;
&lt;p&gt;将路由、登录、支付代码从页面代码和内部公共代码部分抽离，以备后期代码复用时配置化管理。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;部署配置纳入管理&lt;/h3&gt;
&lt;p&gt;最近投产发生了替换静态资源后大面积出现404的问题，原因是之前应该投产的配置文件修改由于种种原因没有投产，导致出错。现将配置文件纳入管理。&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;团队建设&lt;/h1&gt;
&lt;p&gt;严格来说，技术团队的建设谈不上特别复杂，相对来说比较单纯——你技术强大家就会听你的。只不过在我们的开发中技术团队的构成比较复杂一点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;成员构成为我、入职新人、厂商的驻场开发人员。&lt;/li&gt;
  &lt;li&gt;前端开发由另外的厂商提供静态页面，再由上述三类开发人员开发。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照“看山”的分法，大部分的开发人员停留在“看山是山”的程度，并不了解隐藏在背后的思量。作为前端建设的负责人，我不可能也不应该完成前端的大部分编码，而是要挑选适合的人选进行培养，然后在保证质量的前提上，提高团队工作的效率，减少bug率，提高整个团队的水准。&lt;/p&gt;

&lt;p&gt;实际上，我并没有特地对人员进行培养，只是提供了不少参考文档和示例代码，布置了一些开发任务，然后期待他们的主观能动性。如何培养人才？这方面一直是我欠缺的，希望来年在这方面多下功夫。&lt;/p&gt;

</description>
        <pubDate>Sat, 17 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2016/12/17/2016%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2016/12/17/2016%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html</guid>
        
        <category>年终总结</category>
        
        <category>其他</category>
        
        
      </item>
    
      <item>
        <title>x-www-form-urlencoded、json和@RequestParam、@RequestBody</title>
        <description>&lt;p&gt;临近下班碰到新人有个bug找不到原因，症状是发送了ajax请求后后台收不到数据。经过跟踪，发现请求头为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Accept:*/*
Accept-Encoding:gzip, deflate, br
Accept-Language:zh-CN,zh;q=0.8,ja;q=0.6,en-US;q=0.4,en;q=0.2,zh-TW;q=0.2
Connection:keep-alive
Content-Length:112
Content-Type:application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而后台使用Spring-MVC。Controller中的获取报文方式为@RequestParam。这是导致无法接受到参数的原因。&lt;/p&gt;

&lt;h1 id=&quot;requestparamrequestbody&quot;&gt;@RequestParam和@RequestBody&lt;/h1&gt;
&lt;p&gt;@RequestParam为Spring提供的注解，对应处理String类型的body参数，如 &lt;code&gt;a=1&amp;amp;b=2&lt;/code&gt; 这类。&lt;/p&gt;

&lt;p&gt;@RequestBody同为Spring提供的注解，对应处理非String类型的body参数，如json。&lt;/p&gt;

&lt;p&gt;以上需要在Spring里进行配置。&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2016/12/07/x-www-form-urlencoded%E5%92%8Cjson.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2016/12/07/x-www-form-urlencoded%E5%92%8Cjson.html</guid>
        
        <category>Context-Type</category>
        
        <category>HTTP</category>
        
        <category>Java</category>
        
        <category>Spring</category>
        
        
      </item>
    
      <item>
        <title>在iOS APP内部使用JS访问webview时uri的查询参数需要encode两次</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;最近在使用开发运行于第三方APP内的SPA时，需要打开浏览器访问百度地图。APP提供了一个 &lt;code&gt;[prefix-to-open-browser]/[url-to-visit]&lt;/code&gt; 的格式，可以在webview内使用 &lt;code&gt;window.location.href = &#39;[prefix-to-open-browser]/[url-to-visit]&#39;&lt;/code&gt; 的方法来打开浏览器。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;问题&lt;/h1&gt;
&lt;p&gt;使用 &lt;code&gt;[prefix-to-open-browser]/https://www.baidu.com&lt;/code&gt; 时没有问题，但uri中包含中文参数时，使用 &lt;code&gt;encodeURI([uri])&lt;/code&gt; 无法打开浏览器。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;跟踪&lt;/h1&gt;
&lt;p&gt;在浏览器中进行测试，&lt;code&gt;encodeURI&lt;/code&gt; 确实能将uri中的字符串进行编码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;encodeURI之前：https://www.baidu.com/s?wd=编码

encodeURI之后：https://www.baidu.com/s?wd=%E7%BC%96%E7%A0%81
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而在APP内部获取到的却是 &lt;code&gt;https://www.baidu.com/s?wd=编码&lt;/code&gt;，导致APP无法打开浏览器。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;解决&lt;/h1&gt;
&lt;p&gt;最后在浏览器中发现，&lt;strong&gt;encodeURI之后，在浏览器中访问时，会自动decodeURI一次&lt;/strong&gt;。在使用两次encodeURI之后，就解决了这个问题。&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://techctu.github.io//2016/11/08/%E5%9C%A8ios-app%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8js%E8%AE%BF%E9%97%AEwebview%E6%97%B6uri%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81encode%E4%B8%A4%E6%AC%A1.html</link>
        <guid isPermaLink="true">https://techctu.github.io//2016/11/08/%E5%9C%A8ios-app%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8js%E8%AE%BF%E9%97%AEwebview%E6%97%B6uri%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81encode%E4%B8%A4%E6%AC%A1.html</guid>
        
        <category>iOS</category>
        
        <category>webview</category>
        
        <category>javascript</category>
        
        <category>js</category>
        
        <category>uri</category>
        
        <category>encode</category>
        
        <category>encodeURI</category>
        
        
      </item>
    
  </channel>
</rss>
