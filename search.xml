<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Maven使用记录（一）——maven的安装和基础配置</title>
    <url>/2015/12/06/Maven%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94maven%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Maven是一款非常好用的项目管理软件，主要用于项目构建，依赖管理等，简介出门右转参见<a href="http://baike.baidu.com/link?url=Y3LqFKxw2f3uLhfNeAfLscCNtqwhFxjzSKpu9_FCx1YKh2FhzyFSvn-0vT5XCIQf9AJX_R9cL9ztDlPgr0RnXK">百度百科</a>，亦或去<a href="http://maven.apache.org/">官方网站</a>。</p>
<h1 id="使用和配置"><a href="#使用和配置" class="headerlink" title="使用和配置"></a>使用和配置</h1><p>这里主要介绍windows下maven的使用和配置。</p>
<ol>
<li>要使用maven，首先确保安装了JDK，然后再去官方网站下载maven。根据情况——一般是操作系统和解压工具——选择zip或者tar.gz下载，然后解压到自己选择的目录或是文件夹下，即为maven的根目录。比如，我解压出来的目录结构是D:\LittleThings\apache-maven-3.2.5，包含bin、conf、lib、README.txt等目录和文件。所以，D:\LittleThings\apache-maven-3.2.5即我的maven根目录。​<br>配置环境变量，以Windows为例。新增环境变量M2_HOME，我这里值为D:\LittleThings\apache-maven-3.2.5，修改为自己的根目录。在环境变量Path后增加;%M2_HOME%\bin;。这样，就完成了配置。在命令行窗口输入mvn -version，能看到maven的基本信息，如maven home、java version等。​​</li>
</ol>
<span id="more"></span>

<p><img src="http://7xogz7.com1.z0.glb.clouddn.com/mavenconfig.png" alt="maven配置"></p>
<ol start="2">
<li>修改settings.xml。settings.xml位于根目录&#x2F;conf下。一般settings需要修改的有两处：本地仓库的位置和中央仓库的镜像。<br>本地仓库一般默认安装在系统盘下，这样，新增的jar包都会下载安装到系统盘。为了避免这个，找到settings.xml中localRepository的注释，添加</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>xml</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;D:/LittleThings/mvnrepo&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>

<p>这里改成自己的本地仓库目录即可。<br>一般由于众所周知的原因，很难从maven中央仓库下载下来jar包，因此，一般会添加镜像。</p>
<figure class="highlight plaintext"><figcaption><span>xml</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">	&lt;mirror&gt;&lt;id&gt;CN&lt;/id&gt; &lt;name&gt;OSChina Central&lt;/name&gt;  &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;</span><br><span class="line">	&lt;mirror&gt; &lt;id&gt;ibiblio.org&lt;/id&gt; &lt;name&gt;ibiblio Mirror of http://repo1.maven.org/maven2/&lt;/name&gt; &lt;url&gt;http://mirrors.ibiblio.org/pub/mirrors/maven2&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;!-- United States, North Carolina --&gt;  &lt;/mirror&gt;</span><br><span class="line">	&lt;mirror&gt;  &lt;id&gt;cica.es&lt;/id&gt;  &lt;url&gt;http://ftp.cica.es/mirrors/maven2&lt;/url&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;!-- Spain, Sevilla --&gt;  &lt;/mirror&gt;</span><br><span class="line">	&lt;mirror&gt;  &lt;id&gt;maven.org&lt;/id&gt;  &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;/mirror&gt;</span><br><span class="line">	&lt;mirror&gt;  &lt;id&gt;jboss.com&lt;/id&gt;  &lt;url&gt;http://repository.jboss.com/maven2/&lt;/url&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;/mirror&gt;</span><br><span class="line">	&lt;mirror&gt;  &lt;id&gt;sonatype.org&lt;/id&gt;  &lt;url&gt;http://repository.sonatype.org/content/groups/public/&lt;/url&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;/mirror&gt;  &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; --&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>

<p>至此，maven就初步安装完成可以使用了。</p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven使用记录（二）——在Eclipse中使用Maven来进行项目管理</title>
    <url>/2015/12/06/Maven%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%9C%A8Eclipse%E4%B8%AD%E4%BD%BF%E7%94%A8Maven%E6%9D%A5%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>在<a href="!--swig%EF%BF%BC0--">maven使用记录（一）-maven的安装和基础配置中下载和安装好maven</a>后，使用Eclipse来对项目进行管理。默认使用了J2EE插件。如图。</p>
<p><img src="http://7xogz7.com1.z0.glb.clouddn.com/%E6%B7%BB%E5%8A%A0maven%E8%AE%BE%E7%BD%AE-300x244.png" alt="配置1"></p>
<p><img src="http://7xogz7.com1.z0.glb.clouddn.com/%E6%B7%BB%E5%8A%A0maven-300x247.png" alt="配置2"></p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的AMD和CMD规范之我的看法</title>
    <url>/2015/12/06/javascript%E7%9A%84amd%E5%92%8Ccmd%E8%A7%84%E8%8C%83%E4%B9%8B%E6%88%91%E7%9A%84%E7%9C%8B%E6%B3%95/</url>
    <content><![CDATA[<p>首先列出相关文献：</p>
<p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)">AMD规范</a></p>
<p><a href="https://github.com/seajs/seajs/issues/242">CMD规范</a></p>
<p><a href="http://requirejs.org/">AMD实现之RequireJS</a></p>
<p><a href="http://seajs.org/docs/">CMD实现之SeaJS</a></p>
<p><a href="https://github.com/seajs/seajs/issues/277">与RequireJS的异同</a></p>
<p><a href="http://www.douban.com/note/283566440/" title="注意评论">SeaJS与RequireJS最大的区别</a></p>
<p><a href="https://imququ.com/post/amd-simplified-commonjs-wrapping.html">AMD 的 CommonJS wrapping</a></p>
<p>时值双十一之后，贵宝又在忽悠NodeJS多么多么好，准备研究一下，便避不开这俩规范之争。</p>
<span id="more"></span>

<p>这俩规范的区别是对于这段代码（感谢<a href="https://imququ.com/post/amd-simplified-commonjs-wrapping.html">Jerry Qu的代码</a>）</p>
<figure class="highlight plaintext"><figcaption><span>javascript</span></figcaption><table><tr><td class="code"><pre><span class="line">//mod1.js</span><br><span class="line">define(function() &#123;</span><br><span class="line">	console.log(&#x27;require module: mod1&#x27;);</span><br><span class="line">	return &#123;</span><br><span class="line">		hello: function() &#123;</span><br><span class="line">			console.log(&quot;hello mod1&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//mod2.js</span><br><span class="line">define(function() &#123;</span><br><span class="line">	console.log(&#x27;require module: mod2&#x27;);</span><br><span class="line">	return &#123;</span><br><span class="line">		hello: function() &#123;</span><br><span class="line">			console.log(&quot;hello mod2&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//main.js</span><br><span class="line">define([&#x27;mod1&#x27;, &#x27;mod2&#x27;], function(mod1, mod2) &#123;</span><br><span class="line">	//运行至此，mod1.js 和 mod2.js 已经下载完成；</span><br><span class="line">	//mod1、mod2 两个模块已经执行完，直接可用；</span><br><span class="line">console.log(&#x27;require module: main&#x27;);</span><br><span class="line">mod1.hello();</span><br><span class="line">mod2.hello();</span><br><span class="line">return &#123; hello: function() &#123; console.log(&#x27;hello main&#x27;); &#125; &#125;; &#125;);</span><br><span class="line"></span><br><span class="line">&lt;!--index.html--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	require([&#x27;main&#x27;], function(main) &#123; main.hello(); &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>行为不一样。</p>
<p>在AMD规范下会先加载mod1、mod2、main（加载完成的时间顺序可能不一致），然后依次hello。</p>
<p>require module: mod1 require module: mod2 require module: main hello mod1 hello mod2 hello main<br>在CMD规范下必须是谁要hello就加载对应和依赖的module。</p>
<p>require module: main  require module: mod1  hello mod1  require module: mod2  hello mod2  hello main<br>在各自的文中，都对问题说得很严重。在我看来，事实上，这个分歧主要还是一个着眼于服务器端，一个着眼于客户端（PC浏览器、移动浏览器、WebView等）。</p>
<p>在服务器端，最重要的事情之一是运维。在CMD这个框架下，代码的行为和作者的目的保持高度一致，同时还具备模块化的特性，自然是用CMD比较好。</p>
<p>在客户端，最重要的事情就是不要让用户等待。遵循AMD规范，将加载行为提前，可以保证客户端能更好地响应用户。</p>
<p>这两个环境下本来需求的优先级就不一致，为何非要某个规范一统前后台JavaScript开发？</p>
<p>让上帝的归上帝，撒旦的归撒旦。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AMD</tag>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>PureJSOnePageScroll——JavaScript单页滚动插件</title>
    <url>/2015/12/06/purejsonepagescrolljavascript%E5%8D%95%E9%A1%B5%E6%BB%9A%E5%8A%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="啰嗦的背景"><a href="#啰嗦的背景" class="headerlink" title="啰嗦的背景"></a>啰嗦的背景</h1><p>最近有人问我像<a href="https://coding.net/">Coding.net</a>啊这样的首页效果是不是很难。当然你让我从零开始弄一个确实很麻烦咯，不过这种肯定是有人做过了。于是找了找，便翻到了<a href="https://github.com/peachananr/onepage-scroll">OnePageScroll</a>。</p>
<p>最开始搜到的这个是基于JQuery的版本，在<a href="https://github.com/peachananr">作者</a>的仓库里还翻到了<a href="https://github.com/peachananr/zepto-onepage-scroll">基于zepto的版本</a>。不过我更喜欢不使用JQuery、Zepto等的更纯净的库，这就是本文介绍的<a href="https://github.com/peachananr/purejs-onepage-scroll">PureJSOnePageScroll</a>。<a href="http://www.thepetedesign.com/demos/purejs_onepage_scroll_demo.html">点击查看特效</a></p>
<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><span id="more"></span>

<h2 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h2><figure class="highlight plaintext"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;onepagescroll.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link href=&#x27;onepage-scroll.css&#x27; rel=&#x27;stylesheet&#x27; type=&#x27;text/css&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>当然你也可以通过require等来插入，贵客都会require了自然也不需要看这部分。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight plaintext"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;body&gt; ...</span><br><span class="line">	&lt;!-- main只是作为选择器用，语法是HTML5的document.querySelector，不会请百度 --&gt;</span><br><span class="line">	&lt;div class=&quot;main&quot;&gt;</span><br><span class="line">		&lt;!-- section标签可以自定义 --&gt;</span><br><span class="line">		&lt;section&gt;...&lt;/section&gt;</span><br><span class="line">		&lt;section&gt;...&lt;/section&gt;</span><br><span class="line">		 ...</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	 ...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	onePageScroll(&quot;.main&quot;, &#123;</span><br><span class="line">		sectionContainer: &quot;section&quot;,</span><br><span class="line">		loop: true,</span><br><span class="line">		responsiveFallback: false</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><figure class="highlight plaintext"><figcaption><span>javascript</span></figcaption><table><tr><td class="code"><pre><span class="line">// 选择器，可以用class、id等</span><br><span class="line">onePageScroll(&quot;.main&quot;, &#123;</span><br><span class="line">// 标签名字，随意起，确保是页面容器，不与其它同名即可</span><br><span class="line">sectionContainer: &quot;section&quot;,</span><br><span class="line">// CSS3动画效果，&quot;ease&quot;, &quot;linear&quot;, &quot;ease-in&quot;, &quot;ease-out&quot;, &quot;ease-in-out&quot;,</span><br><span class="line">// 或者&quot;cubic-bezier(0.175, 0.885, 0.420, 1.310)&quot;</span><br><span class="line">easing: &quot;ease&quot;,</span><br><span class="line">animationTime: 1000, // 动画时间</span><br><span class="line">pagination: true, // true显示分页，false隐藏分页</span><br><span class="line">updateURL: false, // 是否更新页面url锚</span><br><span class="line">beforeMove: function(index, next_el) &#123;&#125;, // 页面滚动前调用函数，编号从1开始，移动向第n页则index为n</span><br><span class="line">afterMove: function(index, next_el) &#123;&#125;, // 页面滚动后调用函数，移动到第n页index为n</span><br><span class="line">loop: false, // 是否可以从底部下移到顶部 keyboard: true, // 是否用键盘控制</span><br><span class="line">responsiveFallback: false // 滚动页面宽度小于定值时，宽度外使用浏览器自带滚动条 &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h2><p>moveUp(“.main”); moveDown(“.main”); moveTo(“.main”, 3); &#x2F;&#x2F; 这些没啥好解释的，上移、下移和移动到某页</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>PureJSOnePageScroll</tag>
      </tags>
  </entry>
  <entry>
    <title>一些好用的小玩意</title>
    <url>/2015/12/06/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/</url>
    <content><![CDATA[<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a><a href="http://www.voidtools.com/">Everything</a></h2><p>整理目录确实是个好习惯，但人总有犯懒的时候。也有时候大概有那么个名字的文件，找不到放哪了。<a href="http://www.voidtools.com/">Everything</a>通过索引纪录文件位置，支持模糊搜索，支持正则表达式。担心索引坏磁盘就当我没说。</p>
<h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><h2 id="SCROLL-REVERSER"><a href="#SCROLL-REVERSER" class="headerlink" title="SCROLL REVERSER"></a><a href="http://pilotmoon.com/scrollreverser/">SCROLL REVERSER</a></h2><p>非常好用的鼠标滚轮反转软件。有多少人像我一样触摸板喜欢上推页面看下一页但鼠标滚轮往下滑看下一页的？用<a href="http://pilotmoon.com/scrollreverser/">SCROLL REVERSER</a>，完美解决这个问题。</p>
<h2 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a><a href="https://www.alfredapp.com/">Alfred</a></h2><p>功能和<a href="#everything">Everything</a>类似，增加了网络搜索功能。</p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1>]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>使用数据库自带的锁机制来处理竞争</title>
    <url>/2015/12/06/%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%B8%A6%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6%E6%9D%A5%E5%A4%84%E7%90%86%E7%AB%9E%E4%BA%89/</url>
    <content><![CDATA[<p>2013年刚入职的时候，做的p2p项目，有这么个需求。</p>
<p>众所周知，p2p需要去投标，投标就会有竞争。比如阿猫和阿狗都看到一个项目只剩1份了，两个人同时投标。这时候系统就会判断阿猫买一份，余额刚好一份，可以买；在系统确定了这次购买订单，更新余额前，阿狗的请求也到了，系统还没更新余额，这时系统也让阿狗买了一份。这就导致实际上一份卖出了两份，这样并不好，会出现一系列问题，具体什么问题，出门右转找运营。</p>
<p>那么怎么办呢？就是经典的并发情况下锁机制的设计了。</p>
<p>当时负责我们p2p组的组长决定利用数据库的锁机制来处理，具体就是在数据库中增加一个字段key，通过对a的值的比对来保证投标的顺利进行。</p>
<span id="more"></span>

<figure class="highlight plaintext"><figcaption><span>java</span></figcaption><table><tr><td class="code"><pre><span class="line">oldKey = getKey(); // 获取锁值</span><br><span class="line">processing(); // 处理</span><br><span class="line">if (checkKey()) &#123; // 检查锁没有变更则更新锁，否则回滚操作</span><br><span class="line">	updateKey();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样其实会有个问题，即在chenkKey()和updateKey()之间，会有可能有人也投标成功了。</p>
<p>怎么修改呢？其实很简单。我把chenkKey()和updateKey()合作一个方法checkAndUpdateKey()，直接在数据库中</p>
<figure class="highlight plaintext"><figcaption><span>sql</span></figcaption><table><tr><td class="code"><pre><span class="line">update a set key = newKey where key = oldKey</span><br></pre></td></tr></table></figure>

<p>这样代码逻辑就变成了</p>
<figure class="highlight plaintext"><figcaption><span>java</span></figcaption><table><tr><td class="code"><pre><span class="line">oldKey = getKey(); // 获取锁值</span><br><span class="line">processing(); // 处理</span><br><span class="line">if (!checkAndUpdateKey()) &#123; // 检查锁值变化并更新锁，失败则回滚操作</span><br><span class="line">	rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搞定。</p>
<p>P.S.当然这样有个很大的问题，竞争多的时候很容易就投不中标。最好还是类似12306先把请求排队进入一个队列，然后再依次处理——比如一个先进先出队列。</p>
]]></content>
  </entry>
  <entry>
    <title>在Mac上配置使用git</title>
    <url>/2015/12/06/%E5%9C%A8mac%E4%B8%8A%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8git/</url>
    <content><![CDATA[<p>在 <a href="http://git-scm.com/download" title="点击穿越">git</a>下载Mac安装程序。</p>
<p>傻瓜安装git。</p>
<p>打开Terminal，输入git –version来检查。</p>
<p>下载 <a href="https://www.sourcetreeapp.com/" title="点击穿越">SourceTree</a>。</p>
<p>傻瓜安装SourceTree并配置本地库和远程库。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建简单jekyll小记</title>
    <url>/2015/12/06/%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95jekyll%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>简单来说，就是<a href="https://pages.github.com/">GitHub Pages</a> + <a href="http://jekyll.bootcss.com/">Jekyll</a> + <a href="http://www.sublimetext.com/3">Sublime Text 3</a>。</p>
<p>碰到的主要问题有</p>
<h1 id="用Sublime-Text-3来写Jekyll博客"><a href="#用Sublime-Text-3来写Jekyll博客" class="headerlink" title="用Sublime Text 3来写Jekyll博客"></a>用Sublime Text 3来写Jekyll博客</h1><p>安装插件参考<a href="!--swig%EF%BF%BC0--">在mac上配置使用sublime-text-3来进行javascript开发</a>。</p>
<p>然后安装Jekyll插件来使Sublime Text 3认识Jekyll。</p>
<h1 id="文件名中文"><a href="#文件名中文" class="headerlink" title="文件名中文"></a>文件名中文</h1><p>安装了插件后，可以参考<a href="http://jekyll.bootcss.com/docs/templates/#post_url">这里</a>来引入中文。<br>示例如下：</p>
<figure class="highlight plaintext"><figcaption><span>liquid</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123; % post_url 2015-12-06-在mac上配置使用sublime-text-3来进行javascript开发 %&#125;</span><br></pre></td></tr></table></figure>
<p>这里Jekyll使用的pygments不支持liquid，通过{和%之间加空格来显示代码。解决方法可参考<a href="https://alexpearce.me/2012/04/escaping-liquid-tags-in-jekyll/">这里</a>。</p>
]]></content>
      <categories>
        <category>Jekyll</category>
      </categories>
      <tags>
        <tag>Jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>热情、欣赏、诚实——头脑风暴成果演讲反思</title>
    <url>/2015/12/06/%E7%83%AD%E6%83%85%E6%AC%A3%E8%B5%8F%E8%AF%9A%E5%AE%9E%E5%A4%B4%E8%84%91%E9%A3%8E%E6%9A%B4%E6%88%90%E6%9E%9C%E6%BC%94%E8%AE%B2%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<p>最近，Team Leader一直在搞头脑风暴，想要摩擦出火花，采集闪光的瞬间，集齐七个……嗯，就是想解放思想、实事求是。遂，每逢周三，组内汇聚一堂，坐而论道。</p>
<p>大头目：“TL，你们搞出啥子幺蛾子了吗？”</p>
<p>TL：“我们展示一下呗！”</p>
<p>大头目：“好好好！搞搞搞！”</p>
<p>然后，这个锅我背了。小组分拨，我被分到了天灾。最后deadline到了，居然让我这个五号位划水辅助当carry。最后不负众望，嗝屁了。不过看到近卫的carry台风，很是欣赏，觉得需要学习一下，知耻而后勇嘛。</p>
<span id="more"></span>

<h1 id="悲剧的开始"><a href="#悲剧的开始" class="headerlink" title="悲剧的开始"></a>悲剧的开始</h1><p>作为一个高贵冷艳的程序员，在头脑风暴的时候就是各种划水，只因觉得这种会议太过务虚了。做出一个“惊艳”的产品？什么鬼，简直无法直视。也许是我太挑剔了，也许是我老了，我很少觉得什么东西我会用惊艳这个词去形容。大部分的时候，看到美女会欣赏，看到工具会判断是不是想要的，很少有那种非洲农业不发达看到金坷垃的感觉。而且，也使我想起了每天写文档写了N年还喜欢搞传销的某人。</p>
<p>大概就是这么反感了，失去了热情，最后自己都不信自己演讲时说的东西了。没有了热情，不相信自己写的东西，演说的时候就会无精打采，这也是演说失败的原因之一。</p>
<p>其实这样很不好，毕竟在team中，不管这个target对不对，得尽自己一份力。既然过于务虚，那就把它务实，这才是应有之义。</p>
<h1 id="仓促的准备"><a href="#仓促的准备" class="headerlink" title="仓促的准备"></a>仓促的准备</h1><p>头脑风暴小组就这么分成了气宗和剑宗。气宗每天都在进行头脑风暴，还掏出了神器Mac Pro，使出了Keynote大法，还不停刺探我宗情报，并进行了一系列反间谍工作。然而我宗认为领导在对面，本身这个事情又是务虚，所有人都没有放在心上，组员都没有积极参与，无法进行有效的组织。最后，我只能临危受命，将组员最近在研究的一项技术进行介绍。毕竟这项技术和我们演讲的主题有着一定的关联。</p>
<p>此时，我们手里的材料只有这个未完成待验证的项目；我们知道的是气宗要使用酷炫的Keynote；气宗已经做了一周，而我们的准备时间是从现在起到明天下午开始演讲为止。WTF！没办法，只能想办法吹了。</p>
<p>正所谓知己知彼，百战不殆。敌方情报工作那么到位，想要与之一战，就只能从了解己方着手了。</p>
<p>跑了跑那个项目，果然是个未完成品，唯一拿得出手的只有概念——自动化测试了。此时的我已经开始质疑这个项目的重要性——我自己都不能说服自己，拿什么去说服别人呢？只能取巧，依靠一些技法了。</p>
<p>为了让展示不逊于Keynote，便求助于<a href="http://impressjs.devpost.com/">impress.js</a>，使效果更加酷炫；同时开始计划讲稿，让听众忘记询问项目的不足和完成情况，专注于项目代表的意义。除此之外，最重要的是要我能相信这个项目。然而，我做不到，我不欣赏这个项目。</p>
<h1 id="悲剧的演讲"><a href="#悲剧的演讲" class="headerlink" title="悲剧的演讲"></a>悲剧的演讲</h1><p>上台演讲时，确实成功地让听众惊艳于<a href="http://impressjs.devpost.com/">impress.js</a>的效果，专注于项目的意义，从某种意义上来说，是成功的。然而由于我能明显感到和对手台风的巨大差距，这对我来说并不是一个成功的演讲。我并没有说服我自己去欣赏这个项目，所以演讲的时候我无法感动我自己，也无法感染听众。</p>
<p>痛定思痛，入手了《像TED一样演讲》。</p>
<p>于2015年8月阅毕。</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>演讲</tag>
      </tags>
  </entry>
  <entry>
    <title>Java系Dubbo、Zookeeper系统服务拆分记录</title>
    <url>/2015/12/11/java%E7%B3%BBdubbozookeeper%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>事情发展情况总是偏离人的预想，尤其是业务发展和系统架构设计。一段时间后，一个新业务功能的上线往往伴随着几个相关功能的开发小组加班。同时甲组功能A可能依赖乙组功能B，乙组由于某个需求要更改功能B，而甲组开发新功能需要继续依赖功能B，且分配的开发时间并不一致。这样，协调起来会非常麻烦，效率也十分低下。于是，服务拆分的呼声越来越烈。经过几个月的研究、拆分、测试、上线，终于初步解决了服务间相互依赖的问题，便记录一下。</p>
<span id="more"></span>

<h1 id="理想并不丰满"><a href="#理想并不丰满" class="headerlink" title="理想并不丰满"></a>理想并不丰满</h1><p>任何业务系统的架构都是和业务紧密关联的，当时拟定有几个业务产品，一个后台管理，自己建立用户体系和账户体系，对接外系统接口，底层提供一系列日志、事务等平台服务。这个时候，分层逻辑是这样的：</p>
<ul>
<li>页面展现层：web、Controller。</li>
<li>业务逻辑层：services。</li>
<li>平台服务层：Utils。</li>
<li>基础设施层：Database、Logs。</li>
</ul>
<p>项目结构是这样的：</p>
<ul>
<li>Utils：提供统一异常管理、日志服务、事务处理、服务注册和发布、日期转换等工具类。</li>
<li>Apis：映射数据库表的domain类＋各个业务逻辑的Interfaces。</li>
<li>Services：各个产品服务实现类。</li>
<li>Web：MVC层，访问服务并展示页面。</li>
</ul>
<p>并且规定了Service相关的编码规范，如：</p>
<ul>
<li>不同产品Service之间需要通过Interface调用，不能直接调用实现。</li>
<li>所有产品业务类Service不能直接调用Dao，需要在上面封装一层基础Service。</li>
<li>Service调用不能形成循环依赖。</li>
<li>业务逻辑必须放在Service中，不能放在Controller里。</li>
<li>分层结构中不允许逆向调用，即下层不允许调用上层的代码。</li>
</ul>
<p>看起来不错，然而domain呢？产品直接调用这些参数类型怎么办？各个产品Service相互调用，产品内部是否需要封装别的产品的Interface？后来才知道，这些都是坑。</p>
<h1 id="现实很骨感"><a href="#现实很骨感" class="headerlink" title="现实很骨感"></a>现实很骨感</h1><p>当时工期很紧，团队新组建，还要和别的团队一起开发，技术人员素质参差不齐，到后来规定执行不力，但勉勉强强没出大问题。</p>
<p>后来，只有三个产品上线，其中两个是用户体系和账户体系，也就是说真正业务部分只有产品A，其它产品都没有什么活力。这时候倒也没有什么问题。可产品是会增加的。产品增加，就会出现如下情况：</p>
<p><img src="http://7xogz7.com1.z0.glb.clouddn.com/ServiceRef.png?imageMogr2/thumbnail/770x" alt="Service变更"></p>
<p>而且，出于项目迭代、运维管理的需要，会有上线窗口，这就导致了Service B 2.0部分代码提交，但还没有上线，Service A却需要上线的情况。更有可能有多个Service依赖不同版本的同一个Service的情况出现。这时候面临的就是一个功能的修改，都可能有好几个小组加班。</p>
<p>经过几个新产品的开发和外部接口变换导致的内部代码的调整，可以预见，随着产品的增加，整个系统内部的耦合性会急剧增加，新功能、新产品的开发会越来越困难，一个功能点可能会涉及多个产品的更改，并且存在由于种种原因不使用Interface直接使用Service的情况，典型如图所示：</p>
<p><img src="http://7xogz7.com1.z0.glb.clouddn.com/domainandserviceinfection.png?imageMogr2/thumbnail/770x" alt="Domain传递和Service依赖"></p>
<p>ABCD可能属于不同的产品，ACD可能需要不同版本的B的method1的实现，Class B也有可能需要修改，且各自的deadline并不相同。这就存在了B从version 1到version 2的修改过程中，其它产品夹带代码的问题。为了解决这个问题，服务拆分小组对现有代码进行了分析，发现现有代码存在几个问题：</p>
<ul>
<li>Domain使用了Spring的ApplicationContext.getContext方式来获取Service实例。</li>
<li>Service没有使用Interface，直接使用了实现类。</li>
<li>产品A直接使用了产品B的domain来传递数据。</li>
</ul>
<p>为了解决这些问题，服务拆分小组重新设计了服务开发的规范：</p>
<ul>
<li>Domain不允许使用Service，保持Domain的纯洁。</li>
<li>对外提供服务的返回值采用基本数据类型或者定义VO类。</li>
<li>对外提供的服务必须在实际调用的服务上再封装一层。</li>
<li>调用其他产品的服务必须时必须封装一层，并实现自己的VO，避免对象污染。</li>
</ul>
<p>如图：</p>
<p><img src="http://7xogz7.com1.z0.glb.clouddn.com/improved.png?imageMogr2/thumbnail/770x" alt="什么鬼"></p>
<p>这样解决了上面的问题，唯一的问题是结构更加复杂了。</p>
<h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>分布式事务，老大难问题了。</p>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>组件化web开发和UI设计落地的思考</title>
    <url>/2015/12/20/%E7%BB%84%E4%BB%B6%E5%8C%96web%E5%BC%80%E5%8F%91%E5%92%8Cui%E8%AE%BE%E8%AE%A1%E8%90%BD%E5%9C%B0%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="此文废弃，ReactJS和inline-style，css-module就是我想要的"><a href="#此文废弃，ReactJS和inline-style，css-module就是我想要的" class="headerlink" title="此文废弃，ReactJS和inline style，css module就是我想要的"></a>此文废弃，ReactJS和inline style，css module就是我想要的</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近项目UED小组开了一次会，目的是想了解各个开发小组对前端的需求和目前现有项目的设计规范、技术要点。平台技术大牛在会议中透露了想要进行组件化web开发的想法，然后我就有了点想法。设计和开发之间，总是有那么点沟通或是理解上的差异，加上各自的知识面和约束都不尽相同，这就导致设计出来的UE、UI与开发成果有一定的出入。组件化能不能帮助解决这个问题？边写这篇小文边试验一下也是个不错的方法。</p>
<span id="more"></span>

<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>首先要明确自己想要的组件是什么样的。</p>
<p>目前，我们大概有这么几种需要进行web开发的地方</p>
<ul>
<li>PC web</li>
<li>Mobile phone web（触屏）</li>
<li>App webview</li>
<li>Pad web</li>
</ul>
<h2 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h2><p>在大部分情况下，设计出来的UI或多或少会有一定的规则：</p>
<ul>
<li>按照一般思路，UE倾向于将常用的组件行为统一，最典型的就是确认弹出框的确定居右，颜色绿色，取消按钮灰色等设置。</li>
<li>按钮不同状态的形状、颜色等，状态转换时的形状、声音、动画等，如悬浮时颜色的变化，悬浮时菜单的动画。</li>
<li>打开新页面和返回的动画方向相反，激活的标签图标字体更大更显眼等。</li>
</ul>
<h2 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h2><p>类似这样的设计，一方面可以指导用户体验一致性的实现，不至于出现同是弹出警告一个标题背景红色一个绿色的情况；另一方面也可以便于前端工程师将同类组件封装，供其他人调用。</p>
<ul>
<li>组件有自己的样式，不和其他未知的样式冲突。</li>
<li>组件有自己的相关逻辑代码，不和其他未知的逻辑代码冲突。</li>
<li>不需要占位符，使用者可以自己将组件赋值给变量，用自定的id或者别的选择器来告知组件库识别，并进行初始化。</li>
</ul>
<h2 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h3 id="非Web"><a href="#非Web" class="headerlink" title="非Web"></a>非Web</h3><h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>曾经有几个移动项目，我参与了其中UE设计、UI审核、监督UE和UI落地的工作。更久以前，我还进行过一个大型项目的前端web开发。</p>
<h2 id="远古记忆中参与的PC-web前端开发"><a href="#远古记忆中参与的PC-web前端开发" class="headerlink" title="远古记忆中参与的PC web前端开发"></a>远古记忆中参与的PC web前端开发</h2><p>称这个项目为项目pancake好了，简化为项目p，不要问我为什么。项目p的前端为PC web，研发遵循用Axure制作低保真原型并和相关方确认需求的方式，经过多次重构，确定一个版本再进行增量设计的方式。在UI方面，由专门的小组按照UE设计UI，并实现了静态web页面，包括css的编写和基本的页面HTML，确保静态页面和UI设计一致。开发人员则根据静态页面来开发，编写业务逻辑。现在看来，在实施过程中，有这么几个方面的问题。</p>
<h3 id="远古UE"><a href="#远古UE" class="headerlink" title="远古UE"></a>远古UE</h3><p>刚开始用Axure，都是赶鸭子上架，啥都不会瞎搞，连个公共库都没有。这时还分了好几个项目组，每个小组设计各自的UE，结果就是一个按钮，有方的，有圆的，有圆角矩形的，有拟物风格的，有扁平风格的，整个就是个大杂烩。不久在一个碰头会上，我们立刻发现了这个问题，UE组遍立刻把实现一个基础的带有导航条、模态框、按钮、分割线等的共享库提高到了最高优先级。</p>
<h3 id="从UI到开发"><a href="#从UI到开发" class="headerlink" title="从UI到开发"></a>从UI到开发</h3><p>当时我只涉及了UE设计和前端开发，UI设计和静态页面都是别的团队做的，对UE到UI和UI到静态页面不甚了解。大体情况就是有一个到两个UI设计人员，然后有几个前端工程师将UI设计转化为静态页面。</p>
<p>这个时候，开发的方式还比较古老，代码里都是这样的：</p>
<figure class="highlight plaintext"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;a.css&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;n.css&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;div id=&quot;xxx&quot; class=&quot;class-a class-b ... class n&quot;&gt;&lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;a.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">...</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;n.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在开发过程中，碰到了这么几个问题：</p>
<ol>
<li>静态页面按照UE页面分配给不同的人去实现，只有页眉和页脚采用了公共样式，其他部分只有口头约定，并没有设计公共样式，存在大量拷贝复制的css样式。</li>
<li>css命名不规范，存在大量以人名命名的css样式，后期维护困难。</li>
<li>前端公共库函数开发时遇到css样式冲突和前端业务开发遇到命名冲突的问题。</li>
<li>一个控件的css调整涉及多个页面。</li>
</ol>
<h2 id="基于古怪的移动端跨平台框架的app项目"><a href="#基于古怪的移动端跨平台框架的app项目" class="headerlink" title="基于古怪的移动端跨平台框架的app项目"></a>基于古怪的移动端跨平台框架的app项目</h2><p>在这几个项目中，UI的实现流程基本上是这样：</p>
<ol>
<li>技术比较好的开发人员实现一个典型页面。</li>
<li>其他人拿着UI的标注，对照UE和典型页面，实现自己的页面。</li>
</ol>
<p>这种模式下，大部分都是copy-paste，而且很多开发人员并没有写过css，也很少做过直接从UI设计稿实现一个页面的工作，对UE、UI的设计目的的理解不是很到位。同时UI也缺乏一个可参考的规范，标注出某个类型的按钮用在什么场景，有什么样的样式，对应哪种状态。<strong>这就导致页面开发出来和设计稿相去太远。</strong>很多开发者都需要经过一个项目，才知道如何解读UI设计。当时就想，如果能提供一个组件，开发者只需要引用，可以自己进行赋值，不会造成命名冲突，不需要关注样式，这样能更方便开发出如设计一样的界面吧。</p>
<hr>
<p>吐个槽：这个宣称跨平台一次便携到处编译的框架，基本原理就是写了两个解析器来解析xhtml页面文件，一个对应iOS，一个对应Android，解析成java和objc。效率什么的暂且还是可以的，优化什么的是个谜，代码风格非常hybird，动效想想就好。在这两个项目里，UE和UI的设计由于框架的原因，受到了极大限制，稍微复杂一点的多选项关联修改都很难实现，对关联数据的校验也陷入了泥潭。更可怕的是，到处是不规范的全局变量名，css、lua函数都是每个人各写各的，充满了copy-paste风格的写法，加上类似php+js+html的混杂写法和缺乏有效的语法高亮支持，整个就是个噩梦。</p>
<hr>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>从 Jekyll 到 Hexo，GitHub 到 VSTS，自动构建博客发布</title>
    <url>/2018/06/01/%E4%BB%8E-Jekyll-%E5%88%B0-Hexo/</url>
    <content><![CDATA[<blockquote>
<p>手贱又买了个域名，还用的自己姓名拼音，儿童节快乐。</p>
</blockquote>
<h1 id="再次搭建博客的缘由"><a href="#再次搭建博客的缘由" class="headerlink" title="再次搭建博客的缘由"></a>再次搭建博客的缘由</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/techctu">知乎专栏</a>太杂，一点都不 geek，我想写 markdown。</li>
<li><a href="https://www.jianshu.com/u/20e5dee72047">简书</a>传播性不好，也很杂。</li>
<li>GitHub 太小气了，私有仓库要付钱，我要把源文件私有，把生成的博客发布，还是不用 Jekyll 直接在公共仓库放 Markdown 了。</li>
<li>Jekyll highlight 语法再见！</li>
<li>VSTS 大法好，私有仓库免费，微软黑转粉。</li>
<li>强迫症，博客原文一定要私有，提交完就自动构建并发布到 GitHub Pages，虽然 hexo deploy 很方便，但我不想用。</li>
</ul>
<p>编写 -&gt; 本地预览 -&gt; 上传 VSTS -&gt; 自动构建 -&gt; 发布到 GitHub Pages 。</p>
<span id="more"></span>

<h1 id="VSTS-构建，GitHub-发布"><a href="#VSTS-构建，GitHub-发布" class="headerlink" title="VSTS 构建，GitHub 发布"></a>VSTS 构建，GitHub 发布</h1><p>首先，需要一个 <a href="https://www.visualstudio.com/zh-hans/team-services/">VSTS</a> 账号，免费申请。</p>
<p>然后，用 VSTS 作为自己博客的仓库，创建构建任务，参考<a href="https://www.cnblogs.com/zjoch/p/6088935.html">使用VSTS&#x2F;TFS搭建iOS持续集成环境</a>。</p>
<p>在构建任务里，在 hexo 生成好的文件夹（默认 public）内，push 到 GitHub。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">git init</span><br><span class="line">git config --global user.name $(github_name)</span><br><span class="line">git config --global user.email $(github_email)</span><br><span class="line">git pull https://$(github_token)@github.com/***/***.github.io.git master</span><br><span class="line">hexo generate</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;$(build.buildNumber)&quot;</span><br><span class="line">git push -f https://$(github_token)@github.com/***/***.github.io.git head:master</span><br></pre></td></tr></table></figure>

<p>push 到 VSTS 后，立刻自动构建发布，完美。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://blog.csdn.net/yanzhenjie1003/article/details/51703370">在 GitHub Pages 搭建个人博客</a></li>
<li><a href="http://www.51pin.cn/archives/309/">在 Godaddy 购买域名</a><!-- more --></li>
<li><a href="https://blog.csdn.net/u011244202/article/details/57106544">用 CloudFlare 给自己的 GitHub Pages 博客挂上 https</a></li>
<li><a href="https://hexo.io/zh-cn/docs/index.html">Hexo</a></li>
<li><a href="https://jekyllrb.com/">Jekyll</a></li>
<li><a href="https://blog.csdn.net/u011475210/article/details/79023429">从 Jekyll 到 Hexo</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html">使用 Next</a></li>
<li><a href="https://www.cnblogs.com/ups216/p/5475389.html">GitHub 和 VSTS 双向同步源代码</a></li>
<li><a href="https://www.cnblogs.com/zjoch/p/6088935.html">使用VSTS&#x2F;TFS搭建iOS持续集成环境</a></li>
</ul>
]]></content>
      <tags>
        <tag>Jekyll,Hexo,Godaddy,GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>10分钟搞定 react 二维码、条码生成组件</title>
    <url>/2018/06/03/10%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A-react-%E4%BA%8C%E7%BB%B4%E7%A0%81%E3%80%81%E6%9D%A1%E7%A0%81%E7%94%9F%E6%88%90%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="条码生成"><a href="#条码生成" class="headerlink" title="条码生成"></a>条码生成</h1><p>首先去万能的 npm 上找到一个库安装。</p>
<p><code>npm install jsbarcode --save</code></p>
<p>然后写一个简单的 react 组件。需要转换成条码的原始字符串来源可能有很多，我们在这里就弄个输入框好了。</p>
<p><code>输入 =&gt; 转换 =&gt; SVG条形码</code></p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">JsBarcode</span> <span class="keyword">from</span> <span class="string">&#x27;jsbarcode&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CodePainterExample</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入原始字符串&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">            //  在 this._barcodeSVG 下使用输入的数值来生成条码</span></span><br><span class="line"><span class="language-xml">            JsBarcode(this._barcodeSVG, e.target.value,</span></span><br><span class="line"><span class="language-xml">              &#123;</span></span><br><span class="line"><span class="language-xml">                displayValue: false,  //  不显示原始值</span></span><br><span class="line"><span class="language-xml">                background: &#x27;#4b8b7f&#x27;,  //  背景色</span></span><br><span class="line"><span class="language-xml">                lineColor: &#x27;rgba(255,255,255,0.5)&#x27;, // 线条颜色</span></span><br><span class="line"><span class="language-xml">                width: 1  // 线条宽度</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>条码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">ref</span>=<span class="string">&#123;(ref)</span>=&gt;</span>this._barcodeSVG = ref&#125;&gt;<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CodePainterExample</span>;</span><br></pre></td></tr></table></figure>

<h1 id="二维码生成"><a href="#二维码生成" class="headerlink" title="二维码生成"></a>二维码生成</h1><p>一样在 npm 找到库 <a href="http://qr-image/">qr-image</a> 安装。<br><code>npm install --save qr-image</code></p>
<p>同样，在上面的例子里加一个新的 <code>svg</code> 标签，来放我们的二维码。由于这个库主要是用在 nodejs 中，我们使用其中提供的 <code>svgObject.path</code> 来绘制二维码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> svgpath <span class="keyword">from</span> <span class="string">&#x27;svgpath&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> qr <span class="keyword">from</span> <span class="string">&#x27;qr-image&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CodePainterExample</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="literal">null</span> <span class="comment">// 保存二维码SVG的path</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">            const originPath = qr.svgObject(e.target.value).path; //  获得二维码的绘制路径</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123;path: originPath&#125;);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>二维码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;(ref)</span>=&gt;</span>this._qrcodeSVG = ref&#125; transform=&quot;scale(2)&quot;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&#123;this.state.path?this.state.path:null&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样生成的二维码图形意外的小，还得找个库来放大一下我们的二维码。<br><code>npm install --save svgpath</code><br>然后，试着放大一下我们的二维码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scaledPath = <span class="title function_">svgpath</span>(originPath).<span class="title function_">scale</span>(<span class="number">5</span>, <span class="number">5</span>).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">path</span>: scaledPath&#125;);</span><br></pre></td></tr></table></figure>

<p>完美。<br>​</p>
]]></content>
      <tags>
        <tag>react,qrcode,barcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Java web application 使用 ziplet 来开启gzip压缩</title>
    <url>/2018/06/03/Java-web-application-%E4%BD%BF%E7%94%A8-ziplet-%E6%9D%A5%E5%BC%80%E5%90%AFgzip%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>目前除了 Spring 4 的 boot 和 Spring 5 里提供了相关应用层面的 <a href="https://spring.io/search?q=gzip">Gzip 压缩</a>，其他大部分时候都是通过容器（Tomcat、WAS、Jetty等）来开启 Gzip 压缩，剩下的都是 out of date 的自己写一个 filter 来实现这个功能。这里介绍一个开源的第三方库来实现这个功能。</p>
<h1 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h1><p>使用 maven 导入依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.ziplet/ziplet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ziplet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ziplet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>其他方式可以在 <a href="https://mvnrepository.com/artifact/com.github.ziplet/ziplet/2.1.2">mvnrepository</a> 找到。</p>
<h1 id="增加-filter-配置"><a href="#增加-filter-配置" class="headerlink" title="增加 filter 配置"></a>增加 filter 配置</h1><p>在 web.xml 中增加配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CompressingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.github.ziplet.filter.compression.CompressingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CompressingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h1><p>示例。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CompressingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.github.ziplet.filter.compression.CompressingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>debug</strong> (optional): 是否输出 debug 信息，默认 false 。</p>
<p><strong>compressionThreshold</strong> (optional): 设置开启压缩的最小 response 大小，单位 byte 。设置为 0 时永远开启压缩。默认 1024 。</p>
<p><strong>statsEnabled</strong> (optional): 是否统计，详情见 CompressingFilterStats 。</p>
<p><strong>includeContentTypes</strong> (optional): 设置针对某种 content type 开启压缩，如 text&#x2F;html 。在 response 设置了 content type 之后调用。</p>
<p><strong>excludeContentTypes</strong> (optional): include 和 exclude 是反义词，所以是设置排除某些 content type 的压缩。</p>
<p><strong>includePathPatterns</strong> (optional): 类似 includeContentTypes ，不过是针对的 uri 。支持正则表达式，如 ‘.static.’ 。</p>
<p><strong>excludePathPatterns</strong> (optional): 排除特定 uri 的压缩。</p>
<p><strong>includeUserAgentPatterns</strong> (optional): 针对特定 UA 的压缩。</p>
<p><strong>excludeUserAgentPatterns</strong> (optional): 排除特定 UA 的压缩。</p>
<p><strong>noVaryHeaderPatterns</strong> (optional): 类似 includeUserAgentPatterns 。请求中符合配置的 UA 的响应不会包含 vary header 。</p>
<p><a href="https://github.com/ziplet/ziplet/blob/master/README.md">&#x3D;&gt; github.com&#x2F;ziplet</a></p>
]]></content>
      <tags>
        <tag>Java,gzip</tag>
      </tags>
  </entry>
  <entry>
    <title>React ES6+ 入门指引</title>
    <url>/2018/06/03/React-ES6-%E5%85%A5%E9%97%A8%E6%8C%87%E5%BC%95/</url>
    <content><![CDATA[<p>codepen 上的代码请 <strong>fork</strong> 后再修改。</p>
<h1 id="环境基础"><a href="#环境基础" class="headerlink" title="环境基础"></a>环境基础</h1><ul>
<li>Chrome、FireFox等主流浏览器陆续支持 ES6+ 语法。</li>
<li>QQ、360、搜狗等浏览器已支持 ES6+ 语法。</li>
<li>微软全面转移到 Edge。</li>
<li>淘宝不再支持 IE 8 。</li>
<li>项目已使用 webpack、babel 等来提供转义支持。</li>
</ul>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES<br>一个用于搭建用户界面的js库</p>
</blockquote>
<p><strong>核心思路</strong>：假定按照人机交互活动的不同状态来设计UI，根据状态的迁移来自动渲染页面。同时，react 通过组件化来分治状态。</p>
<span id="more"></span>

<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 js 类库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 HelloWorld 组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// return 中是 JSX 语法</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Hello, world!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到 HTML 中的 id=&quot;root&quot; 的标签，将 Hello 作为子元素插入</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/techctu/pen/MpbzLG">codepen</a></p>
<h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h2><p>在客户端将 react 组件渲染成 HTML 的方法，在一般的 web app 中只在入口 js 文件中写一处。</p>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>一种在 js 中书写 HTML 的简单方式，可以在其中通过 <code>&#123;&#125;</code> 来使用 js 表达式、变量、函数等。需要注意的是，由于 class 是 js 的关键字&#x2F;保留字，所以 HTML 中的 <code>class</code> 需要写成 <code>className</code> 。简单语法如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">generateJSX</span> = (<span class="params">arg</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;arg&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">val</span>: &#123;<span class="attr">key</span>: <span class="string">&#x27;JSX中使用对象的值&#x27;</span>&#125;,</span><br><span class="line">      <span class="attr">ifelse</span>: <span class="string">&#x27;与其写那些匿名函数箭头函数，不如提出来写更好维护。&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.val.key&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;true?&#x27;JSX中不能直接使用if-else，可以使用三元表达式&#x27;:null&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;(function() &#123;</span></span><br><span class="line"><span class="language-xml">          if (true) &#123;</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">h3</span>&gt;</span>在JSX中使用立即执行的匿名函数来写if-else<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;)()&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;true &amp;&amp; <span class="tag">&lt;<span class="name">h3</span>&gt;</span>单if的时候可以用表达式&amp;&amp;jsx的方式来写<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          if (true)</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">h3</span>&gt;</span>在JSX中使用立即执行的箭头函数来写if-else<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;)()&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;generateJSX(this.state.ifelse)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/techctu/pen/evBbyo">codepen</a></p>
<p>需要注意的是，顶层只能有一对标签。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="为什么要使用-JSX"><a href="#为什么要使用-JSX" class="headerlink" title="为什么要使用 JSX"></a>为什么要使用 JSX</h3><p>使用 JSX 时。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">shadowSize</span>=<span class="string">&#123;2&#125;</span>&gt;</span></span><br><span class="line">  Click Me</span><br><span class="line"><span class="tag">&lt;/<span class="name">MyButton</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不使用 JSX 时。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="title class_">MyButton</span>,</span><br><span class="line">  &#123;<span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="attr">shadowSize</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Click Me&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>就一般的 web 开发来说，显然第一种比较直观；对于不一般的 web 开发者来说，也还是第一种比较直观。</p>
<h1 id="React-组件（Component）"><a href="#React-组件（Component）" class="headerlink" title="React 组件（Component）"></a>React 组件（Component）</h1><p>React 支持自定义组件，而组件化，是工程化的基础之一。React 支持自定义组件和传参（props）。将自定义组件类比 HTML 标签，参数就类似标签属性，能在 HTML 中怎么使用标签，就能在 JSX 中怎么使用组件。</p>
<h2 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h2><p>一般由两种方式：函数和 es 6 class 。</p>
<p>函数方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">genComA</span>(<span class="params">props=&#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">genComB</span> = (<span class="params">props=&#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>class：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>前面已经有过很多示例。</p>
<p>在 React 中，可以传递给组件的参数类型和 js 一致，包括 number、string、boolean、object、function 等。在组件中通过 <code> this.props</code> 获取接收到的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HiName</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hi, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">HiName</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;<span class="attr">sweetie</span>&#x27;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 hi, sweetie</span></span><br></pre></td></tr></table></figure>
<p>以函数形式创建的组件，则没有 <code>this</code> ，也就没有 <code>this.props</code> ，是通过封装成对象的形式传递，直接用 js 函数传参的方式获取即可。<strong>注</strong>：必须首字母大写，否则失效。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bye</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.name&#125;, goodbye.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Bye</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;<span class="attr">sweetie</span>&#x27;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h3><p>React 中有个保留的参数，叫 <code>this.props.children</code> ，主要用于封装和动态加载子组件。常见的用法有单页面 web app 中 header 和 footer 固定，内部内容动态变化等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.props.children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h3><p>React 支持参数校验，包括 js 的数据类型、自定义类型、非空、枚举等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeting</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Greeting</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">string</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>具体参考<a href="https://facebook.github.io/react/docs/typechecking-with-proptypes.html">官网</a>。</p>
<h2 id="状态（state）"><a href="#状态（state）" class="headerlink" title="状态（state）"></a>状态（state）</h2><p>React 组件基于自身的 state 变化来触发 render ，并进行相应的计算，达到渲染的效果。所以 state 的使用，是 React 中最重要的部分。</p>
<ul>
<li>React 组件的生命周期节点为 <code>mount -&gt; (update) -&gt; unmount</code> 。</li>
<li>其中 <code>mount</code> 和 <code>unmount</code> 在生命周期中只执行一次，<code>update</code> 执行 0 到多次。</li>
<li><code>mount</code> 和 <code>update</code> 都会触发 <code>render</code> 。</li>
<li>对于 <code>mount</code> 和 <code>update</code> 都有 <code>will</code> 和 <code>did</code> 两种处理函数，对于 <code>unmount</code> 只有 <code>componentWillUnmount</code>。</li>
<li>提供 <code>shouldComponentUpdate</code> 来处理比较复杂的情况下组件 state 变化是否渲染，以提升性能。<a href="https://github.com/facebook/react/issues/5677#issuecomment-165451439"><strong>紧急逃生，慎用</strong></a>。</li>
<li>提供 <code>componentWillReceiveProps</code> 用于组件 <code>mount</code> 之后接收参数再次更新 state 。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PropsCount</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;PropsCount will mount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;PropsCount did mount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;PropsCount will update&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, provState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;PropsCount did update&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;PropsCount render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>count update by props: &#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateCount</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>: props.<span class="property">count</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;StateCount will mount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;StateCount did mount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;StateCount will update&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, provState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;StateCount did update&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillReceiveProps</span>(<span class="params">nextProps</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: nextProps.<span class="property">count</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;StateCount render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>count update by state: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Init</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>: props.<span class="property">count</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Init will mount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Init did mount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Init will update&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, provState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Init did update&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Init render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>init: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  addOne = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HelloWorld will mount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HelloWorld did mount&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HelloWorld will update&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, provState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HelloWorld did update&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HelloWorld render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Init</span> <span class="attr">count</span>=<span class="string">&#123;this.state.count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">value</span>=<span class="string">&quot;addOne&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addOne&#125;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">PropsCount</span> <span class="attr">count</span>=<span class="string">&#123;this.state.count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">StateCount</span> <span class="attr">count</span>=<span class="string">&#123;this.state.count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/techctu/pen/jBVgxv?editors=1111">codepen</a></p>
<p><strong>注意</strong>：在 <code>componentWillMount componentWillUpdate</code> 中不要使用 <code>setState</code>。初始化的异步请求最好放在 <code>componentDidMount</code> 里，其他初始化的同步操作放在 <code>constructor</code> 里。</p>
<h2 id="处理事件和获取值"><a href="#处理事件和获取值" class="headerlink" title="处理事件和获取值"></a>处理事件和获取值</h2><p><a href="https://facebook.github.io/react/docs/handling-events.html">官网参考</a>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (props) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>=&#123;<span class="attr">name</span>:<span class="literal">null</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">name</span>: e.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;this.state.name &amp;&amp; <span class="tag">&lt;<span class="name">label</span>&gt;</span>hi, &#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/techctu/pen/PpWYbd">codepen</a></p>
]]></content>
      <tags>
        <tag>ReactJs,react</tag>
      </tags>
  </entry>
  <entry>
    <title>非潮流前端项目架构-Java和ReactJS </title>
    <url>/2018/06/03/%E9%9D%9E%E6%BD%AE%E6%B5%81%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84-Java%E5%92%8CReactJS/</url>
    <content><![CDATA[<h1 id="项目特征"><a href="#项目特征" class="headerlink" title="项目特征"></a>项目特征</h1><ul>
<li>运行于第三方 APP 内，需要以 H5 等相关后台技术为基础。</li>
<li>UE 、 UI 、静态页面由合作公司开发，然后再套用到前端项目中。</li>
<li>页面较少，但需要在第三方 APP 内进行多次 webview 切换，路由需要自己负责，第三方 APP 不提供支持。</li>
<li>动静分离。</li>
<li>前端前端技术采用 React 、Webpack 、 Babel 等，开发时热更新。</li>
<li>没有 redux ，没有 RxJS ，没有 SEO 。</li>
<li>Web api 采用 Spring ，部署于 WAS 。</li>
<li>后端较重，使用 Dubbo 等。</li>
</ul>
<span id="more"></span>

<h1 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h1><p>前端的工作流程如图。<br><img src="http://upload-images.jianshu.io/upload_images/1299225-b2f32985906edcd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端工作流.png"><br><strong>面临的问题主要有</strong>：</p>
<ul>
<li>UE 设计缺乏设计规范和支撑实施设计规范的组件库，经常会出现分支流程缺失的情况。比如某个流程失败，某几个展示要素缺失等。</li>
<li>UE 设计的缺失导致 UI 没有对此进行设计，因此静态页面也缺少相关实现。比如一个物品最多可以展示 5 个标签，只实现了展示 5 个标签和不展示标签。</li>
<li>反馈流程过长，许多上述问题在开发阶段和测试阶段才暴露出来。</li>
<li>组件化受限于静态页面开发质量，影响组件化的实施。</li>
</ul>
<h2 id="模板套用"><a href="#模板套用" class="headerlink" title="模板套用"></a>模板套用</h2><p>因为项目组内缺乏对 css 、 less 、 scss 、 postcss 等熟悉的工程师，所以从 UI 到静态页面是从外部公司采购的。我们拿到的静态页面是这样的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- app</span><br><span class="line">|-- css</span><br><span class="line">| | |-- app.css</span><br><span class="line">|-- image</span><br><span class="line">|-- html</span><br><span class="line">| | |-- pageA.html</span><br><span class="line">| | |-- pageB.html</span><br></pre></td></tr></table></figure>
<p>拿到之后，将静态资源复制到对应的目录下，然后将 html 的内容改写成 jsx 。很多页面展示内容和业务强相关，可以共用的组件基本就是 header ， modal ， toastr ，存储和路由等。</p>
<h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>前端代码采用动静分离，分为两个部分：页面代码和 web api 。</p>
<h3 id="页面代码组织"><a href="#页面代码组织" class="headerlink" title="页面代码组织"></a>页面代码组织</h3><p>Java 项目的工程化是非常成熟的，页面代码参考 Java 项目，该分层的分层，该配置管理的配置管理。</p>
<ul>
<li>按照页面划分路由，每个页面保存自己的 state ，全局变量使用 localStorage 来传递。</li>
<li>由于存在 webview 切换的问题，没有使用 redux 等，当然也可以考虑切换前利用 localStorage 持久化，切换后用其初始化。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- app</span><br><span class="line">|-- asset // 构建输出目录</span><br><span class="line">|-- css // 样式源文件目录</span><br><span class="line">|-- image // 图片源文件目录</span><br><span class="line">|-- node_modules // npm 仓库</span><br><span class="line">|-- scripts // js源文件目录</span><br><span class="line">| | |-- pages // 相当于一般 react 项目中的 container</span><br><span class="line">| | | | |-- [Page] // 页面目录</span><br><span class="line">| | | | | | |-- index.js // 入口文件</span><br><span class="line">| | | | | | |-- [Component].js // 页面组件文件，0 到多个</span><br><span class="line">| | |-- routes // 封装页面为 react-router lazy-load 组件</span><br><span class="line">| | | | |-- [Page] // 对应页面目录</span><br><span class="line">| | | | | | |-- index.js // 页面 route 配置文件</span><br><span class="line">| | |-- utils // 公共库</span><br><span class="line">| | | | |-- polyfill // 适配第三方 APP 的代码</span><br><span class="line">| | | | |-- [CommonComponet] // 公共 react 组件目录，如 Toastr</span><br><span class="line">| | | | |-- Example // 示例代码目录</span><br><span class="line">| | | | |-- global.js // 基础公共函数库</span><br><span class="line">| | | | |-- browserHistory.js // history.js + react-router</span><br><span class="line">| | | | |-- clientStorage.js // 使用 cookie / storage 本地存储</span><br><span class="line">| | |-- app.js // 客户端 js 入口</span><br><span class="line">| | |-- index.ejs // 生成入口 html 的模板文件</span><br><span class="line">|-- tools // 构建相关源文件目录</span><br><span class="line">| | |-- clean.js // 清理历史构建文件</span><br><span class="line">| | |-- zip.js // 构建输出打包</span><br><span class="line">| | |-- copy.js // 管理外资源拷贝，如 favicon.js</span><br><span class="line">| | |-- start.js // 开发用 web server，基于 webpack-dev-server</span><br><span class="line">| | |-- verify.js // 验证构建结果的 web-server</span><br><span class="line">| | |-- ...</span><br><span class="line">|-- .babelrc // 目前配置在 package.json 里</span><br><span class="line">|-- .eslint // 代码规范校验</span><br><span class="line">|-- .eslintIgnore // 忽略代码规范校验</span><br><span class="line">|-- package.json // npm 描述文件</span><br><span class="line">|-- webpack.config.[target].js // 对应各个环境的 webpack 配置。</span><br></pre></td></tr></table></figure>

<h3 id="页面构建"><a href="#页面构建" class="headerlink" title="页面构建"></a>页面构建</h3><p>项目主要通过 webpack 构建静态资源。webpack 的构建以配置文件中的 entry 为起点，对依赖的资源进行静态分析，然后通过 loaders 和 plugins 进行处理，输出到 output。<br><img src="http://upload-images.jianshu.io/upload_images/1299225-ab36355944e571e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="webpack 工作流.png"></p>
<p><strong>构建时的性能优化</strong>：</p>
<ul>
<li>通过 <code>CommonsChunkPlugin</code> 抽取公共函数库，打包成单独的 js chunk 。</li>
<li>通过 <code>UglifyJsPlugin</code> 压缩 js 。</li>
<li>通过 <code>css-loader</code> 压缩 css 。</li>
<li>通过 <code>url-loader</code> 将小图片转为 base64 ，减少小文件请求。</li>
<li>通过 webpack 提供的 <code>import</code> 和 <code>react-router</code> 配合使用，实现延迟加载的功能，进一步提升首屏加载速度，保证各个页面的加载速度。</li>
</ul>
<p><strong>Additional</strong>：</p>
<ul>
<li>在 pre-build 阶段，提供清理之前构建，复制依赖之外的资源等功能的脚本。</li>
<li>在 post-build 阶段，提供输出目录压缩，启动模拟目标部署环境 web server 验证等功能的脚本。</li>
</ul>
<h3 id="web-api-代码组织"><a href="#web-api-代码组织" class="headerlink" title="web api 代码组织"></a>web api 代码组织</h3><p>web api 是典型的 maven web project 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- project</span><br><span class="line">|-- src</span><br><span class="line">| | |-- main</span><br><span class="line">| | | | |-- java // java 源文件</span><br><span class="line">| | | | |-- portable // 构建时的部署环境配置</span><br><span class="line">| | | | |-- resources // 各种依赖配置，如 spring，dubbo ， redis ， shiro ， logback ， shiro 等。</span><br><span class="line">| | | | |-- webapp</span><br><span class="line">| | | | | | |-- web.xml // 主要是 web.xml 的配置。</span><br><span class="line">| | |-- <span class="built_in">test</span> // 对应同级 java 目录的单元测试文件</span><br><span class="line">|-- pom.xml // maven 描述文件，项目对象模型</span><br></pre></td></tr></table></figure>
<p>Java 里充当 express&#x2F;koajs 等角色的实际上是 web 容器，Spring 对应的是 express&#x2F;koajs 生态圈的一揽子方案，包括了 route 、 template 、load 等等。</p>
<h3 id="web-api-构建"><a href="#web-api-构建" class="headerlink" title="web api 构建"></a>web api 构建</h3><p>所有的项目构建其实内容都差不多：预处理 -&gt; 处理 -&gt; 后处理 -&gt; 输出。maven 就等于是 Java web 的 npm + webpack 。<br><code>npm install, webpack</code> -&gt; <code>maven install</code> 。</p>
<h2 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h2><p>此时前台访问一个页面的过程大致上如图。<br><img src="http://upload-images.jianshu.io/upload_images/1299225-79493782be465230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端架构运行时.png"></p>
<p>静态资源服务器使用 nginx ，没有做同构直出。为了正确渲染页面，任意请求返回的都是同一个 index.html （<code>try_files</code>），该 index.html 含有 app.css ，外壳 + 路由配置的 app.js 。app.js 加载完成后，则会进一步 lazy-load 对应 uri 所需的 js 文件。</p>
<p>因此，初次访问或者缓存过期的情况下，一个页面的访问有：</p>
<ol>
<li>请求 index.html 。</li>
<li>请求 app.css 。</li>
<li>请求 app.js 。</li>
<li>请求 vendor.js 。</li>
<li>请求 [route].js 。</li>
<li>请求其他静态资源，如静态图片资源。</li>
<li>其他动态请求。</li>
</ol>
<p>而 app.css 、 app.js 、vendor.js 在缓存后如果是 304 ，并不会再次请求。</p>
<h1 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h1><ul>
<li>less&#x2F;scss&#x2F;postcss 。</li>
<li>后端渲染。</li>
<li>RN 。</li>
<li>koa&amp;pm2 。</li>
</ul>
]]></content>
      <tags>
        <tag>react,ReactJs,Java,Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>H5 改造成 Native 开发记录</title>
    <url>/2018/06/11/H5-%E6%94%B9%E9%80%A0%E6%88%90-Native-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>近日因为要参加某媒体公司举办的金融行业 APP 评比，领导要求提升 APP 整体性能，猜测指标包括 APP 启动速度、兼容性、首屏加载速度等。因为我们职能组在 5 个一级页签中占据了一个入口，但采用 H5 编写，存在首次加载时请求后台的白屏问题，要求改造成 Native。</p>
<p>既然是改造成 Native，则需要针对 iOS 和 Android 分别进行改造。</p>
<h1 id="需求和现状"><a href="#需求和现状" class="headerlink" title="需求和现状"></a>需求和现状</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>接收 LBS 信息。</li>
<li>改造成 Native。</li>
<li>H5 和 web api 兼容新旧两版掌银。</li>
<li>首页配置化。</li>
</ul>
<span id="more"></span>

<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><ul>
<li>因为职能组划分，已经存在部分功能（如 js 回调）缺乏支持，H5页面针对路由编写了路由栈。</li>
<li>H5 是单个渠道入口，此次评比同时首页入口改版，需要支持多个渠道入口。</li>
<li>页面跳转存在<code>需要登录</code>和<code>无需登录</code>两种跳转方式，两种方式对 URL 传参的支持方式和支持程度（能不能用查询字符串？能不能 POST 传参？）不一样。</li>
</ul>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ul>
<li>又是因为职能组划分，存在代码库权限、分支合并、构建发布等方面的问题，采用的是单目录权限本地开发页面（UIView）测试，APP 主要职能组（M 组）合并代码打包再进行集成测试的方式，流程较长，问题跟踪和解决较慢，时常需要到 M 组就地跟踪解决问题。</li>
<li>未开发过 iOS，需要对相关技能进行学习，如存储、网络、线程、常用设计模式、常用工具库等的最佳实践。虽然从后端和 H5 的开发经验上来说，只要能抽象出问题点，都能找到对应的解决办法，但需要时间。</li>
<li>首页配置化，参考了<a href="https://www.jianshu.com/p/a728ae289d0d">iOS一种动态栅格布局方案</a>做了一个劣化的方案。</li>
<li>页面路由增加参数对不同渠道进行标识。</li>
<li>缺少依赖库管理，没有使用 CocoaPods 等工作，多个团队引入依赖库时因为版本不一导致冲突难以处理。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>听说 CocoaPods 支持本地依赖打包来解决版本冲突问题，如 A_v1.h 和 A_v2.h，把 A_v1.h 以某种方式魔改打进源码再进行合并，尚未研究。</li>
<li>Native 不适用于需要频繁修改功能和布局的组织。</li>
<li>iOS Objective-C 开发用 <code>dispatch_async</code> 来更新 UI。</li>
<li>AZEncodeURIComponent、SDWebImage、iCarousel 几个库不错。</li>
<li><code>DLog(fmt, ...) NSLog((@&quot;\n[File:%s]\n&quot; &quot;[Function:%s]\n&quot; &quot;[Line:%d] \n&quot; fmt), __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__);</code>。</li>
<li>使用协议和委托。</li>
<li>使用 <code>IBAction</code> 一类或者 <code>UITapGestureRecognizer</code> 处理事件，<code>[btn addTarget:self action:@selector(btnTapped:) forControlEvents:UIControlEventTouchUpInside];</code>或者<code>UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(staticZoneBtnTapped:)];[btn addGestureRecognizer:tapGesture];</code>。</li>
</ul>
]]></content>
      <tags>
        <tag>iOS, Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>从select到epoll到现在</title>
    <url>/2024/06/20/%E4%BB%8Eselect%E5%88%B0epoll%E5%88%B0%E7%8E%B0%E5%9C%A8/</url>
    <content><![CDATA[<p>最近翻阅Redis等常用技术组件相关文章，比如看这篇<a href="https://juejin.cn/post/7378046072952504354">Redis 全家桶</a>和<a href="https://www.cnblogs.com/jackson0714/p/redisson.html">分布式锁中的王者方案-Redisson</a>，感觉很多东西其实一直没有变。</p>
<p>比如现在，大家都说Redis快，最关键的是大厂在用，大厂觉得快。而大厂，一般指的是百度、阿里、腾讯等等偏电商的大厂，也就是互联网电商场景下，大规模用户访问浏览，那当然就看着快了。像<a href="https://juejin.cn/post/7378046072952504354">Redis 全家桶</a>中提到的场景，也都是这类场景。这类场景说穿了，就是因为Redis是内存运行的，采用IO多路复用，所以快。其他的特性，比如选举、哨兵、集群，那都是分布式系统的一般性质。</p>
<p>提到IO多路复用，那就得说起Linux的select、poll、epoll了。现在的一切，都是从epoll开始的。</p>
<p>记得2010年前后，还没有那么多高并发的问题，讨论的最多的，其实还是<a href="http://kegel.com/c10k.html">C10K问题</a>。对应最喜欢问的面试题，一般都是磁盘多文件读取构造大根堆、小根堆，毕竟那时候内存不够用。C10K问题，是最开始的并发问题，大致是2000年前后提出的。那时候服务器普遍使用select，难以突破瓶颈。直至2000年Jonathan Lemon提出了kqueue&#x2F;kevent，2003年Linux内核2.6版本使用了epoll，这个问题才得以解决。同时，也出现了NGINX、Java NIO这类新特性。</p>
<p>回过头来看内存发展，为什么epoll2003年提出的，发展应用这么慢？毕竟2000年有互联网泡沫，内存的需求方泡沫了，发展自然就延后了。记得2008年的时候，笔记本电脑也不过用512MB的内存；2012年的内存还是DDR2&#x2F;3，一般也就能配到4&#x2F;8G。那个时候面试最喜欢问的问题还是C10K和读文件构建大根堆、小根堆。再看Redis，现在也没有太多变化。数据结构方面，里面使用的还是构建树、做哈希，只是做到了内存里。说一句有了<a href="https://darkcoding.net/software/epoll-the-api-that-powers-the-modern-internet/">epoll才有现在互联网</a>也不为过。</p>
<p>不过，epoll相对于select的缺点，在于小规模要求实时性高的，链接活跃的场景，应该不能使用epoll。可以想象的是，比如军事、游戏。</p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>epoll</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM线程和操作系统线程一一对应吗</title>
    <url>/2024/06/25/JVM%E7%BA%BF%E7%A8%8B%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E4%B8%80%E4%B8%80%E5%AF%B9%E5%BA%94%E5%90%97/</url>
    <content><![CDATA[<p>今天在看JVM相关的文章的时候，看到一段话，意思是JVM运行的线程数量和操作系统是1:1运行的。</p>
<blockquote><p>这里所说的线程指程序执行过程中的一个线程实体。JVM 允许一个应用并发执行多个线程。Hotspot JVM 中的 Java 线程与原生操作系统线程有直接的映射关系。当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统原生线程。Java 线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可用的 CPU 上。当原生线程初始化完毕，就会调用 Java 线程的 run() 方法。当线程结束时，会释放原生线程和 Java 线程的所有资源。</p>
</blockquote>

<p>然而我印象里Java应该是有自己的虚拟线程池的。到底是什么情况呢？</p>
<span id="more"></span>

<p>最简单的方式，是查看<a href="https://openjdk.org/groups/hotspot/docs/RuntimeOverview.html#Thread%20Management|outline">官方文档</a>。该文档内的描述和文章一致。但我感觉哪里没有理清楚。</p>
<p>仔细看看上面的描述，说明的是JVM和操作系统一一对应。在官方文档中，指出这是基础模式。这也就意味着在一些情况下可能不是一对一的。在网上也能找到佐证，比如到处抄来抄去的<a href="https://www.jianshu.com/p/af3d5eece8c1">Java线程模型</a>文章里就说了，在Solaris可以实现多对多。</p>
<p>仔细想了想，其实问题是Java的线程模型和JVM的线程模型。Java的线程是依赖JVM的线程进行管理的，Java的线程和JVM的线程的关系，有点类似于用户态线程和内核态线程。Java应用使用的线程池，应该是可以大于操作系统支持的线程数量的。简单代码验证一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadConcurrencyDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取系统的核心数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">availableProcessors</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统的核心数: &quot;</span> + availableProcessors);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个线程组来跟踪所有线程</span></span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">threadGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadGroup</span>(<span class="string">&quot;ThreadGroupDemo&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;线程组名称: &quot;</span> + threadGroup.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录创建的线程数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">threadCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并启动20个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(threadGroup, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 启动。&quot;</span>);</span><br><span class="line">                    <span class="comment">// 线程执行任务</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// 线程运行60秒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt(); <span class="comment">// 重新设置中断状态</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 被中断。&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 执行完毕。&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            thread.start();</span><br><span class="line">            threadCount++; <span class="comment">// 增加线程计数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;已创建线程数量: &quot;</span> + threadCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待所有用户线程完成</span></span><br><span class="line">        <span class="keyword">while</span> (threadGroup.activeCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                threadGroup.list(); <span class="comment">// 列出所有线程</span></span><br><span class="line">                System.out.println(<span class="string">&quot;活跃线程数量：&quot;</span> + threadGroup.activeCount());</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>); <span class="comment">// 短暂睡眠，避免CPU过载</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;所有线程执行完毕。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码输出显示，活跃线程一直是20个。打开任务管理器看看，实际Java的运行占用并不大，也许这20个线程共用某几个JVM线程吧。</p>
]]></content>
      <tags>
        <tag>JVM</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>技术发展真的很快</title>
    <url>/2024/06/26/%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E7%9C%9F%E7%9A%84%E5%BE%88%E5%BF%AB/</url>
    <content><![CDATA[<p>这阵子大模型很火，卖铲子的到处都是，有卖硬件的，有出租算力的，有卖课的，有卖现成模型应用的。弄得我也手痒，准备升级一下自己的电脑搞一下炼丹玩玩。电脑还是2019年买的，显卡是GTX 2060，勉强显存能跑一跑7B模型，参数量大的模型根本跑不了。硬盘之前也只有480GB，SATA的，简直是时代的眼泪。还好主板还有个PCIE3的口，买了块对应的硬盘试试。<br>支持一下国产，硬盘长江存储的，2T，居然跟内存条差不多大，拿给我老婆看了看，老婆也觉得技术发展真快，毕竟之前看的硬盘要么是台式机3.5寸的，要么是笔记本2.5寸的，那时候一块硬盘一般也就用500GB的。这一下子体积小了这么多，容量和速度都变大了，价格还不贵。可惜长江存储没有上市，不然真的可以买点股票。<br>至于大模型，在2006到2013年读书那阵子，沉寂很久的神经网络，在2006年提出了深度学习，2012年首次使用ReLu激活函数。那阵子游戏效果和性能也突飞猛进，伴随显卡技术进步，AI需要的算力也悄悄进步。只是在毕业那会儿，神经网络、机器学习技术也只是作为业余爱好看一看，没有什么使用场景，大家兴趣也不大。唯一的爱好，大概是那阵子星际2发布了，AI机器人吊打各个玩家，我也试了试，被完虐。毕竟对于科班出身的来看，本质是本科的线性代数和解析几何的应用，比如N维向量空间、特征值和特征向量、相似对角化、正交等等。大语言模型，或者金融大模型等的本质，是用大量现实世界的词，尝试构造N维向量空间，构造一个特征多项式，然后进行预测。归根结底，还是要依赖于脑科学和硬件技术的发展。<br>但真的太快了。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Spring-AI访问大模型</title>
    <url>/2024/07/02/%E4%BD%BF%E7%94%A8Spring-AI%E8%AE%BF%E9%97%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="背景和目标"><a href="#背景和目标" class="headerlink" title="背景和目标"></a>背景和目标</h1><p>大模型很火，硬盘也到了，给自己充充电，看看开发大模型业务应用。现在首选还是Spring。不过如果是字节系的话，应该就是用Golang了。</p>
<p>目标就是熟悉一下Spring-AI，访问大语言模型。使用Docker部署Ollama。</p>
<p>捡起一下Spring，看看Gradle。虽然在2015年就接触了Gradle了。</p>
<h1 id="部署Ollama"><a href="#部署Ollama" class="headerlink" title="部署Ollama"></a>部署Ollama</h1><h2 id="失败的部署方式"><a href="#失败的部署方式" class="headerlink" title="失败的部署方式"></a>失败的部署方式</h2><p>这一节是个失败的部署方式。目前是用自己Windows台式机作为远程开发环境，已经安装了Docker，所以想着在Docker里装Ollama来跑，<strong>而且要用到宿主机的显卡</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search ollama </span><br><span class="line">docker pull ollama/ollama:latest </span><br><span class="line">docker run -d --gpus=all -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama</span><br></pre></td></tr></table></figure>

<p>然后发现宿主机的GPU和CPU使用情况不对，疑似镜像并没有安装NVIDIA GPU容器工具包。同时容器也没有安装curl和gpg。<strong>建议安装前先换源，然后用apt进行安装</strong>。</p>
<p>网上查了查资料，CUDA之前已经安装好了12.5的版本，容器内nvidia-smi也可以访问到。</p>
<img src="/2024/07/02/%E4%BD%BF%E7%94%A8Spring-AI%E8%AE%BF%E9%97%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B/nvidia-smi.png" class="">

<p>可拉大模型的时候，宿主机CPU飙升，GPU没有动静。无奈，删除镜像换个方式。</p>
<h2 id="正确的部署"><a href="#正确的部署" class="headerlink" title="正确的部署"></a>正确的部署</h2><span id="more"></span>

<h3 id="WSL-UBuntu"><a href="#WSL-UBuntu" class="headerlink" title="WSL UBuntu"></a>WSL UBuntu</h3><p>自从2018年微软收购Github之后，Windows越来越好作为开发环境使用了。现在WSL的主要问题是不能直接指定安装路径。需要参考一些文章。可以参考<a href="http://blog.csdn.net/weixin_48076899/article/details/135214749">【Linux】自定义WSL2安装位置，安装到其他磁盘(非C盘)_wsl2指定安装路径-CSDN博客</a>：</p>
<p>1、安装和检查WSL 2-&gt;<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">安装 WSL | Microsoft Learn</a>；</p>
<p>2、下载UBuntu-&gt;<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">旧版 WSL 的手动安装步骤 | Microsoft Learn</a>，选择22.04版本及以上，修改后缀名，并解压缩到目标安装目录，参考上面文章。</p>
<p>UBuntu换源，安装build-essential不再赘述了，也许不用也许用。</p>
<h3 id="NVIDIA-CUDA"><a href="#NVIDIA-CUDA" class="headerlink" title="NVIDIA CUDA"></a>NVIDIA CUDA</h3><p>目前很多网上的安装方式已经过时了，得去官网查看。</p>
<p>1、安装宿主机驱动和CUDA-&gt;<a href="https://www.nvidia.cn/geforce/drivers/">NVIDIA GeForce 驱动程序 - N 卡驱动 | NVIDIA</a>、<a href="https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=11&target_type=exe_local">CUDA Toolkit 12.5 Downloads | NVIDIA Developer</a>；</p>
<p>2、按照<a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">CUDA on WSL (nvidia.com)</a>，在UBuntu内执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key del 7fa2af80</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86\_64/cuda-keyring\_1.1-1\_all.deb sudo dpkg -i cuda-keyring\_1.1-1_all.deb sudo apt-get update sudo apt-get -y install cuda-toolkit-12-5</span><br></pre></td></tr></table></figure>

<h3 id="Ollama"><a href="#Ollama" class="headerlink" title="Ollama"></a>Ollama</h3><p>1、使用Linux安装方式，先验证，UBuntu内执行nvidia-smi；</p>
<p>2、然后安装lshw：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y lshw</span><br></pre></td></tr></table></figure>
<p>3、下载Ollama：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://ollama.com/install.sh | sh</span><br></pre></td></tr></table></figure>
<p>剩下的参考文档：<a href="https://ollama.fan/getting-started/linux/">在 Linux 上安装 - Ollama中文网</a>和<a href="https://github.com/ollama/ollama/tree/main/docs">ollama&#x2F;docs at main · ollama&#x2F;ollama (github.com)</a>。默认11434端口，可以在Windows上直接使用localhost访问。</p>
<h1 id="Spring-AI"><a href="#Spring-AI" class="headerlink" title="Spring-AI"></a>Spring-AI</h1><p>搞了这么多终于要进入开发了。目前这个库迭代非常快，还是以官网文档<a href="https://docs.spring.io/spring-ai/reference/index.html">Spring AI :: Spring AI Reference</a>为主。</p>
<p>其实代码demo没有什么好说的，主要还是看一下<a href="https://docs.spring.io/spring-ai/reference/concepts.html">AI Concepts :: Spring AI Reference</a>这个部分的内容。Java &amp; Spring毕竟是一个工程化的领域，简单一个demo打样并不能说明什么，主要还是了解作者对AI工程化应用的想法。作为一个成熟的开发者，自然是希望想换哪个LLM就换哪个LLM，想怎么组合就怎么组合。</p>
<p>在<a href="https://docs.spring.io/spring-ai/reference/concepts.html">AI Concepts :: Spring AI Reference</a>里主要介绍了Spring AI和LLM、RAG、函数调用的流程。</p>
<img src="/2024/07/02/%E4%BD%BF%E7%94%A8Spring-AI%E8%AE%BF%E9%97%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B/converter.jpg" class="">

<p>从API里可以看到目前对图形和语音模型支持比较欠缺。如果要自己实现，就要参考<a href="https://docs.spring.io/spring-ai/reference/contribution-guidelines.html">Contribution Guidelines :: Spring AI Reference</a>。本身框架比较简单，没有太多的东西。</p>
<p>现在简单试试调用，一个简单的项目在<a href="https://github.com/techctu/spring-ai-ollama-demo">techctu&#x2F;spring-ai-ollama-demo: A simple demo using spring-ai-ollama-spring-boot-starter, Ubuntu WSL and Ollama qwen2. (github.com)</a>。</p>
<h2 id="添加仓库和BOM"><a href="#添加仓库和BOM" class="headerlink" title="添加仓库和BOM"></a>添加仓库和BOM</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-ollama-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 去除Tomcat容器 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也许有官网更新，以官网为准。</p>
<h2 id="配置Ollama"><a href="#配置Ollama" class="headerlink" title="配置Ollama"></a>配置Ollama</h2><h2 id="这里拉的是qwen2，所以配置如下：简单的客户端"><a href="#这里拉的是qwen2，所以配置如下：简单的客户端" class="headerlink" title="这里拉的是qwen2，所以配置如下：简单的客户端"></a>这里拉的是qwen2，所以配置如下：<br><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.ai.ollama.base-url</span>=<span class="string">http://localhost:11434 </span></span><br><span class="line"><span class="attr">spring.ai.ollama.chat.options.model</span>=<span class="string">qwen2 </span></span><br><span class="line"><span class="attr">spring.ai.ollama.chat.options.temperature</span>=<span class="string">0.7</span></span><br></pre></td></tr></table></figure><br>简单的客户端</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.techctu.springaidemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.messages.UserMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.model.ChatResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.chat.prompt.Prompt;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.ollama.OllamaChatModel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OllamaController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OllamaChatModel chatModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OllamaController</span><span class="params">(OllamaChatModel chatModel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatModel = chatModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">generate</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;个人小金额投资者如何进行沪深主板投资&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;generation&quot;</span>, chatModel.call(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generateStream&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">generateStream</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;个人小金额投资者如何进行沪深主板投资&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="keyword">new</span> <span class="title class_">UserMessage</span>(message));</span><br><span class="line">        <span class="keyword">return</span> chatModel.stream(prompt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他Jetty、Configuration之类的配置就略过了。</p>
<p>启动访问一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/ai/generateStream?message=你觉得长江电力股价能到多少</span><br></pre></td></tr></table></figure>

<p>浏览器里要等输出完才显示界面，但F12大法是能看到像现在的AI网页一样，词是一点一点蹦出来的。</p>
<img src="/2024/07/02/%E4%BD%BF%E7%94%A8Spring-AI%E8%AE%BF%E9%97%AE%E5%A4%A7%E6%A8%A1%E5%9E%8B/json.png" class="">

<p>就到这里吧。如果要工程化部署，Ollama这些模型本身也需要支持扩容、容器化等手段，Controller本身更应该拆解，从前端到API网关，具体还得参考WebFlux、Spring Stream的高并发案例。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://docs.spring.io/spring-ai/reference/index.html#:~:text=Spring%20AI%20The%20Spring%20AI%20project%20aims%20to,is%20not%20a%20direct%20port%20of%20those%20projects.">Spring AI :: Spring AI Reference</a></p>
<p><a href="https://xinchen.blog.csdn.net/article/details/138446192">Spring AI实战之一：快速体验(OpenAI)_springai项目实战-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2421901">SpringAI+Ollama三部曲之二：细说开发-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring-AI</tag>
        <tag>LLM</tag>
        <tag>Ollama</tag>
      </tags>
  </entry>
  <entry>
    <title>耐心资本就是要学会空仓</title>
    <url>/2024/07/06/%E8%80%90%E5%BF%83%E8%B5%84%E6%9C%AC%E5%B0%B1%E6%98%AF%E8%A6%81%E5%AD%A6%E4%BC%9A%E7%A9%BA%E4%BB%93/</url>
    <content><![CDATA[<p>上周，也就是6月底，决定空仓。这周一直就放在里面逆回购，然后跑赢指数1.5个点。<br>空仓的原因主要有：</p>
<ol>
<li>只有在指数共振上涨，走主升浪的时候，才有躺赢的可能，否则轮动行情很难盈利；</li>
<li>指数下跌行情下，个人亏损很容易超过指数；</li>
<li>分红行情叠加年中报业绩兑现，容器出现几个月阴跌；</li>
<li>技术指标上也是一个调整的周期。</li>
</ol>
<span id="more"></span>

<img src="/2024/07/06/%E8%80%90%E5%BF%83%E8%B5%84%E6%9C%AC%E5%B0%B1%E6%98%AF%E8%A6%81%E5%AD%A6%E4%BC%9A%E7%A9%BA%E4%BB%93/szzs-m.png" class="">
<p>问题是这个三角尖，难言筑底反弹高度。这种走势下，也有可能继续下探。在长周期的下行中，一年能乘那么一次上行周期就很不错了。守好现金，守好情绪，做一个冷静的投机者。</p>
<p>为什么说长周期下行，因为A股的酱香科技，已经仿佛到顶了。</p>
<img src="/2024/07/06/%E8%80%90%E5%BF%83%E8%B5%84%E6%9C%AC%E5%B0%B1%E6%98%AF%E8%A6%81%E5%AD%A6%E4%BC%9A%E7%A9%BA%E4%BB%93/gzmt.png" class="">

<p>回来看看纳指。</p>
<img src="/2024/07/06/%E8%80%90%E5%BF%83%E8%B5%84%E6%9C%AC%E5%B0%B1%E6%98%AF%E8%A6%81%E5%AD%A6%E4%BC%9A%E7%A9%BA%E4%BB%93/nasdqetf.png" class="">

<p>再用上证50对比一下标普500ETF</p>
<img src="/2024/07/06/%E8%80%90%E5%BF%83%E8%B5%84%E6%9C%AC%E5%B0%B1%E6%98%AF%E8%A6%81%E5%AD%A6%E4%BC%9A%E7%A9%BA%E4%BB%93/sz50bp500.png" class="">

<p>付鹏老师说得对，腐朽的资本主义除了钱之外一无所有。</p>
]]></content>
      <categories>
        <category>投资</category>
      </categories>
      <tags>
        <tag>投资</tag>
        <tag>空仓</tag>
      </tags>
  </entry>
  <entry>
    <title>上古有大椿者</title>
    <url>/2024/07/31/%E4%B8%8A%E5%8F%A4%E6%9C%89%E5%A4%A7%E6%A4%BF%E8%80%85/</url>
    <content><![CDATA[<p>这几天有一张图在广为流传，内容如下：</p>
<blockquote>
<p>在系统语境中，股民是一小撮想依靠资本利得谋生，脱离直接劳动的公民。因其所占资本较小，投资标的多在国内，具有民族性，又因其中大部分并没有完全脱离劳动职业，仍可分类劳动人民;但其思想受到腐蚀，多信奉市场定价，追求高抛低吸的交易结果，天生具有落后性，不可控性，只有经过改造才能治病救人。<br>属于可以利用，常要被敲打，不能被信任时常来填坑的阶层，到底能吃上饭才能炒股。</p>
</blockquote>
<p>2023年7月24日政治局会议提议振兴股市，上证指数从2023年8月1日3288.76到今天2024年7月31日点，看看深证指数、创业板指、上证50、沪深300、中证500、中证1000等等，好像是个波动向下的走势。<br>其实成熟的人应该不看这些喊话新闻，要看的是真正下注了的东西，比如铜油。<br>现在美国大选，川建国胜率较高。但结果还要几个月，中间也许有变数。如果川建国上任，美国产业回迁，明年年初又是一个买美股的好时机。<br>不过行情都是走出来，不能有个靶子之后找证据。未来AI大规模应用，在零售端比互联网和移动互联网时代更容易产生信息茧房。<br>经过这些年看A股，看统计，看经济，越来越喜欢读庄子的《逍遥游》了。散户是韭菜，一茬又一茬，在股市中就像书中的燕雀、朝菌、蟪蛄。<br>资本市场不是一个多劳多得的游戏，至少不是需要每天交易的游戏，不像上班需要每天打卡。按照自己的交易系统，大的行情或许要等到明年初，小行情可能在9、10月吧。不过行情是走出来的，不是预期，<strong>不要先画靶心</strong>。</p>
]]></content>
      <categories>
        <category>投资</category>
      </categories>
      <tags>
        <tag>投资</tag>
      </tags>
  </entry>
  <entry>
    <title>希望你能穿越周期</title>
    <url>/2024/07/31/%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%A9%BF%E8%B6%8A%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>今天是小宝你满5个月了。有了你之后，我们自然会关心你的成长。在我们国家，普通家庭的小孩在成长路上，高考和就业是两个重要的里程碑。今年长沙的高考，主要是2006年出生的人和2005年的复读生参加，高考人数达到了73万人，这和当年的出生人口数相近。然而，从2019年起，出生人口开始急速下跌，今年的出生人口预计比2006年减半。这引发了人们对于未来高考竞争压力是否会减少的猜测。但无论如何，教育的供给总是比需求更具弹性。在生源减半的情况下，优秀的教师可能面临降薪的困境，而普通教师则需要寻找新的出路，就像在经济压力下，网约车市场中的专车会抢快车的单，快车又会抢特惠单一样。<br>然而，这也可能带来一些积极的变化。由于考生人数减少，总分也不再需要那么高来区分考生，这可能会促使教学质量整体提升。但同时，教学内容也可能会相应减少。另外，今年长沙的中考人数达到了21.43万人，而中考一般没有复读的机会。考虑到长沙2009年的出生人口只有7万左右，显然有大量的迁入人口导致了中考人数的增加。这也引发了一些家长对教育资源分配的担忧，甚至出现了家长去教育局反映情况的新闻。<br>但无论如何，教育始终是我们国家发展的基石。尽管面临着各种挑战和变化，我们都应该保持对知识的追求和对学习的热爱。就像你爸爸说的，不管你以后从事什么行业，都希望你能保持定力，穿越周期，成为一个自由而独立的人。同时，也要学会适应和应对变化，毕竟时代在不断发展，我们也需要不断学习和进步。</p>
]]></content>
      <categories>
        <category>育儿</category>
      </categories>
      <tags>
        <tag>育儿</tag>
      </tags>
  </entry>
  <entry>
    <title>希望大家熬过周期</title>
    <url>/2024/08/07/%E5%B8%8C%E6%9C%9B%E5%A4%A7%E5%AE%B6%E7%86%AC%E8%BF%87%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>今天意外碰到了初中同学，中午一起吃了个饭。同学是设计院的，有典型的因为加班长期久坐，摄入加班食品导致的BMI超标症状。他所在的设计院进行了混改，现在又和另外一家省属国资设计院合并。据他说以后工资要递延发，可能揭不开锅了。现在挣钱的项目也都要去省外抢了。同学有两个小孩，不方便出差。还好负债不是特别重，还能喘息。<br>像这种类似1997-2000年的经济转型期的阵痛，对于一般已婚已育的家庭来说，是难以承受之痛。一般人在选择工作时，基本会选择处于上升或者成熟阶段的行业。碰到行业不景气了，就得看是哪个周期的不景气了。不景气周期过去，对于一般人又是5年时光过去。而新兴行业又凭什么要用老年人不用年轻人呢。现在一般行业都得出海才行，而像我考虑出国的工作，也会遭到家里反对。一方面是独生子，父母都年纪大了；另一方面是有了小孩，小孩还小。旁边不少人都开始进入劳务派遣序列。就这样，中年人逐渐销声匿迹。只希望大家能熬过周期。<br>最近几个交易日账面盈利不错，操作上有点随便了，有点追高，导致浮盈变少。明天还是空仓为宜，调整心态，抓下一波浪潮。<br>今天看了看一些指数、商品的趋势，叠加美国大选，感觉未来趋势不是很明朗。长期来看，个人觉得大底也许在12月，但中间过程有可能是有小反弹的连续阴跌，也有可能是10、11月有反弹然后12月大跌。总之预期不是很好。<br>在这个行情下大盘股不太好参与，没有大级别趋势。只有快进快出小盘股。</p>
]]></content>
      <categories>
        <category>投资</category>
        <category>育儿</category>
      </categories>
      <tags>
        <tag>投资</tag>
        <tag>育儿</tag>
      </tags>
  </entry>
</search>
