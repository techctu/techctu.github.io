<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Avalon</title>
  
  <subtitle>域名要收费，多少写一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaozeyu.space/"/>
  <updated>2018-06-03T03:41:39.430Z</updated>
  <id>https://zhaozeyu.space/</id>
  
  <author>
    <name>Zeyu Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java web application 使用 ziplet 来开启gzip压缩</title>
    <link href="https://zhaozeyu.space/2018/06/03/Java-web-application-%E4%BD%BF%E7%94%A8-ziplet-%E6%9D%A5%E5%BC%80%E5%90%AFgzip%E5%8E%8B%E7%BC%A9/"/>
    <id>https://zhaozeyu.space/2018/06/03/Java-web-application-使用-ziplet-来开启gzip压缩/</id>
    <published>2018-06-03T11:04:47.000Z</published>
    <updated>2018-06-03T03:41:39.430Z</updated>
    
    <content type="html"><![CDATA[<p>目前除了 Spring 4 的 boot 和 Spring 5 里提供了相关应用层面的 <a href="https://spring.io/search?q=gzip" target="_blank" rel="noopener">Gzip 压缩</a>，其他大部分时候都是通过容器（Tomcat、WAS、Jetty等）来开启 Gzip 压缩，剩下的都是 out of date 的自己写一个 filter 来实现这个功能。这里介绍一个开源的第三方库来实现这个功能。</p><h1 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h1><p>使用 maven 导入依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.ziplet/ziplet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ziplet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ziplet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>其他方式可以在 <a href="https://mvnrepository.com/artifact/com.github.ziplet/ziplet/2.1.2" target="_blank" rel="noopener">mvnrepository</a> 找到。</p><h1 id="增加-filter-配置"><a href="#增加-filter-配置" class="headerlink" title="增加 filter 配置"></a>增加 filter 配置</h1><p>在 web.xml 中增加配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CompressingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.github.ziplet.filter.compression.CompressingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CompressingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h1><p>示例。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CompressingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.github.ziplet.filter.compression.CompressingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>debug</strong> (optional): 是否输出 debug 信息，默认 false 。</p><p><strong>compressionThreshold</strong> (optional): 设置开启压缩的最小 response 大小，单位 byte 。设置为 0 时永远开启压缩。默认 1024 。</p><p><strong>statsEnabled</strong> (optional): 是否统计，详情见 CompressingFilterStats 。</p><p><strong>includeContentTypes</strong> (optional): 设置针对某种 content type 开启压缩，如 text/html 。在 response 设置了 content type 之后调用。</p><p><strong>excludeContentTypes</strong> (optional): include 和 exclude 是反义词，所以是设置排除某些 content type 的压缩。</p><p><strong>includePathPatterns</strong> (optional): 类似 includeContentTypes ，不过是针对的 uri 。支持正则表达式，如 ‘.static.’ 。</p><p><strong>excludePathPatterns</strong> (optional): 排除特定 uri 的压缩。</p><p><strong>includeUserAgentPatterns</strong> (optional): 针对特定 UA 的压缩。</p><p><strong>excludeUserAgentPatterns</strong> (optional): 排除特定 UA 的压缩。</p><p><strong>noVaryHeaderPatterns</strong> (optional): 类似 includeUserAgentPatterns 。请求中符合配置的 UA 的响应不会包含 vary header 。</p><p><a href="https://github.com/ziplet/ziplet/blob/master/README.md" target="_blank" rel="noopener">=&gt; github.com/ziplet</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前除了 Spring 4 的 boot 和 Spring 5 里提供了相关应用层面的 &lt;a href=&quot;https://spring.io/search?q=gzip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gzip 压缩&lt;/a&gt;，其他大部分时候都是通过容器（Tomcat、WAS、Jetty等）来开启 Gzip 压缩，剩下的都是 out of date 的自己写一个 filter 来实现这个功能。这里介绍一个开源的第三方库来实现这个功能。&lt;/p&gt;
&lt;h1 id=&quot;加入依赖&quot;&gt;&lt;a href=&quot;#加入依赖&quot; class=&quot;headerlink&quot; title=&quot;加入依赖&quot;&gt;&lt;/a&gt;加入依赖&lt;/h1&gt;&lt;p&gt;使用 maven 导入依赖。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/com.github.ziplet/ziplet --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.ziplet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;ziplet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1.2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java,gzip" scheme="https://zhaozeyu.space/tags/Java-gzip/"/>
    
  </entry>
  
  <entry>
    <title>React ES6+ 入门指引</title>
    <link href="https://zhaozeyu.space/2018/06/03/React-ES6-%E5%85%A5%E9%97%A8%E6%8C%87%E5%BC%95/"/>
    <id>https://zhaozeyu.space/2018/06/03/React-ES6-入门指引/</id>
    <published>2018-06-03T11:02:39.000Z</published>
    <updated>2018-06-03T03:41:39.431Z</updated>
    
    <content type="html"><![CDATA[<p>codepen 上的代码请 <strong>fork</strong> 后再修改。</p><h1 id="环境基础"><a href="#环境基础" class="headerlink" title="环境基础"></a>环境基础</h1><ul><li>Chrome、FireFox等主流浏览器陆续支持 ES6+ 语法。</li><li>QQ、360、搜狗等浏览器已支持 ES6+ 语法。</li><li>微软全面转移到 Edge。</li><li>淘宝不再支持 IE 8 。</li><li>项目已使用 webpack、babel 等来提供转义支持。</li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES<br>一个用于搭建用户界面的js库</p></blockquote><p><strong>核心思路</strong>：假定按照人机交互活动的不同状态来设计UI，根据状态的迁移来自动渲染页面。同时，react 通过组件化来分治状态。</p><a id="more"></a><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 js 类库</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 HelloWorld 组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// return 中是 JSX 语法</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Hello, world!</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 找到 HTML 中的 id="root" 的标签，将 Hello 作为子元素插入</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;HelloWorld/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/techctu/pen/MpbzLG" target="_blank" rel="noopener">codepen</a></p><h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h2><p>在客户端将 react 组件渲染成 HTML 的方法，在一般的 web app 中只在入口 js 文件中写一处。</p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>一种在 js 中书写 HTML 的简单方式，可以在其中通过 <code>{}</code> 来使用 js 表达式、变量、函数等。需要注意的是，由于 class 是 js 的关键字/保留字，所以 HTML 中的 <code>class</code> 需要写成 <code>className</code> 。简单语法如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> generateJSX = <span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;arg&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      val: &#123;<span class="attr">key</span>: <span class="string">'JSX中使用对象的值'</span>&#125;,</span><br><span class="line">      ifelse: <span class="string">'与其写那些匿名函数箭头函数，不如提出来写更好维护。'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;JSX&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h3&gt;&#123;this.state.val.key&#125;&lt;/</span>h3&gt;</span><br><span class="line">        &lt;h3&gt;&#123;<span class="literal">true</span>?<span class="string">'JSX中不能直接使用if-else，可以使用三元表达式'</span>:<span class="literal">null</span>&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">        &#123;(function() &#123;</span></span><br><span class="line"><span class="regexp">          if (true) &#123;</span></span><br><span class="line"><span class="regexp">            return &lt;h3&gt;在JSX中使用立即执行的匿名函数来写if-else&lt;/</span>h3&gt;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)()&#125;</span><br><span class="line">        &#123;<span class="literal">true</span> &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>单if的时候可以用表达式&amp;&amp;jsx的方式来写<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>&#125;</span><br><span class="line">        &#123;(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>在JSX中使用立即执行的箭头函数来写if-else<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">        &#125;)()&#125;</span><br><span class="line">        &#123;generateJSX(<span class="keyword">this</span>.state.ifelse)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;HelloWorld/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/techctu/pen/evBbyo" target="_blank" rel="noopener">codepen</a></p><p>需要注意的是，顶层只能有一对标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为什么要使用-JSX"><a href="#为什么要使用-JSX" class="headerlink" title="为什么要使用 JSX"></a>为什么要使用 JSX</h3><p>使用 JSX 时。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">color</span>=<span class="string">"blue"</span> <span class="attr">shadowSize</span>=<span class="string">&#123;2&#125;</span>&gt;</span></span><br><span class="line">  Click Me</span><br><span class="line"><span class="tag">&lt;/<span class="name">MyButton</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>不使用 JSX 时。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  MyButton,</span><br><span class="line">  &#123;<span class="attr">color</span>: <span class="string">'blue'</span>, <span class="attr">shadowSize</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  <span class="string">'Click Me'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>就一般的 web 开发来说，显然第一种比较直观；对于不一般的 web 开发者来说，也还是第一种比较直观。</p><h1 id="React-组件（Component）"><a href="#React-组件（Component）" class="headerlink" title="React 组件（Component）"></a>React 组件（Component）</h1><p>React 支持自定义组件，而组件化，是工程化的基础之一。React 支持自定义组件和传参（props）。将自定义组件类比 HTML 标签，参数就类似标签属性，能在 HTML 中怎么使用标签，就能在 JSX 中怎么使用组件。</p><h2 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h2><p>一般由两种方式：函数和 es 6 class 。</p><p>函数方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genComA</span>(<span class="params">props=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> genComB = <span class="function">(<span class="params">props=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>class：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>前面已经有过很多示例。</p><p>在 React 中，可以传递给组件的参数类型和 js 一致，包括 number、string、boolean、object、function 等。在组件中通过 <code>this.props</code> 获取接收到的参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HiName</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hi, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HiName name=&#123;<span class="string">'sweetie'</span>&#125;/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 输出 hi, sweetie</span></span><br></pre></td></tr></table></figure></p><p>以函数形式创建的组件，则没有 <code>this</code> ，也就没有 <code>this.props</code> ，是通过封装成对象的形式传递，直接用 js 函数传参的方式获取即可。<strong>注</strong>：必须首字母大写，否则失效。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bye</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.name&#125;, goodbye.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Bye name=&#123;<span class="string">'sweetie'</span>&#125;/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h3><p>React 中有个保留的参数，叫 <code>this.props.children</code> ，主要用于封装和动态加载子组件。常见的用法有单页面 web app 中 header 和 footer 固定，内部内容动态变化等。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Footer /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h3><p>React 支持参数校验，包括 js 的数据类型、自定义类型、非空、枚举等。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;Hello, &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Greeting.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  name: React.PropTypes.string</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure></p><p>具体参考<a href="https://facebook.github.io/react/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">官网</a>。</p><h2 id="状态（state）"><a href="#状态（state）" class="headerlink" title="状态（state）"></a>状态（state）</h2><p>React 组件基于自身的 state 变化来触发 render ，并进行相应的计算，达到渲染的效果。所以 state 的使用，是 React 中最重要的部分。</p><ul><li>React 组件的生命周期节点为 <code>mount -&gt; (update) -&gt; unmount</code> 。</li><li>其中 <code>mount</code> 和 <code>unmount</code> 在生命周期中只执行一次，<code>update</code> 执行 0 到多次。</li><li><code>mount</code> 和 <code>update</code> 都会触发 <code>render</code> 。</li><li>对于 <code>mount</code> 和 <code>update</code> 都有 <code>will</code> 和 <code>did</code> 两种处理函数，对于 <code>unmount</code> 只有 <code>componentWillUnmount</code>。</li><li>提供 <code>shouldComponentUpdate</code> 来处理比较复杂的情况下组件 state 变化是否渲染，以提升性能。<a href="https://github.com/facebook/react/issues/5677#issuecomment-165451439" target="_blank" rel="noopener"><strong>紧急逃生，慎用</strong></a>。</li><li>提供 <code>componentWillReceiveProps</code> 用于组件 <code>mount</code> 之后接收参数再次更新 state 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropsCount</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'PropsCount will mount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'PropsCount did mount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'PropsCount will update'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps, provState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'PropsCount did update'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'PropsCount render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>count update by props: &#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCount</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: props.count&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'StateCount will mount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'StateCount did mount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'StateCount will update'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps, provState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'StateCount did update'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: nextProps.count&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'StateCount render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>count update by state: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Init</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: props.count&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Init will mount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Init did mount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Init will update'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps, provState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Init did update'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Init render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>init: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  addOne = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HelloWorld will mount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HelloWorld did mount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HelloWorld will update'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps, provState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HelloWorld did update'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HelloWorld render'</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Init count=&#123;<span class="keyword">this</span>.state.count&#125; /&gt;</span><br><span class="line">        &lt;button value=<span class="string">"addOne"</span> onClick=&#123;<span class="keyword">this</span>.addOne&#125;&gt;add&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;PropsCount count=&#123;this.state.count&#125; /</span>&gt;</span><br><span class="line">        &lt;StateCount count=&#123;<span class="keyword">this</span>.state.count&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;HelloWorld/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/techctu/pen/jBVgxv?editors=1111" target="_blank" rel="noopener">codepen</a></p><p><strong>注意</strong>：在 <code>componentWillMount componentWillUpdate</code> 中不要使用 <code>setState</code>。初始化的异步请求最好放在 <code>componentDidMount</code> 里，其他初始化的同步操作放在 <code>constructor</code> 里。</p><h2 id="处理事件和获取值"><a href="#处理事件和获取值" class="headerlink" title="处理事件和获取值"></a>处理事件和获取值</h2><p><a href="https://facebook.github.io/react/docs/handling-events.html" target="_blank" rel="noopener">官网参考</a>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state=&#123;<span class="attr">name</span>:<span class="literal">null</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">name</span>: e.target.value&#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;input type="text" onChange=&#123;this.onChange&#125; /&gt;</span><br><span class="line">      &lt;br /&gt;</span><br><span class="line">      &#123;this.state.name &amp;&amp; &lt;label&gt;hi, &#123;this.state.name&#125;&lt;/label&gt;&#125;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><p><a href="http://codepen.io/techctu/pen/PpWYbd" target="_blank" rel="noopener">codepen</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;codepen 上的代码请 &lt;strong&gt;fork&lt;/strong&gt; 后再修改。&lt;/p&gt;
&lt;h1 id=&quot;环境基础&quot;&gt;&lt;a href=&quot;#环境基础&quot; class=&quot;headerlink&quot; title=&quot;环境基础&quot;&gt;&lt;/a&gt;环境基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Chrome、FireFox等主流浏览器陆续支持 ES6+ 语法。&lt;/li&gt;
&lt;li&gt;QQ、360、搜狗等浏览器已支持 ES6+ 语法。&lt;/li&gt;
&lt;li&gt;微软全面转移到 Edge。&lt;/li&gt;
&lt;li&gt;淘宝不再支持 IE 8 。&lt;/li&gt;
&lt;li&gt;项目已使用 webpack、babel 等来提供转义支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES&lt;br&gt;一个用于搭建用户界面的js库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;核心思路&lt;/strong&gt;：假定按照人机交互活动的不同状态来设计UI，根据状态的迁移来自动渲染页面。同时，react 通过组件化来分治状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactJs,react" scheme="https://zhaozeyu.space/tags/ReactJs-react/"/>
    
  </entry>
  
  <entry>
    <title>非潮流前端项目架构-Java和ReactJS </title>
    <link href="https://zhaozeyu.space/2018/06/03/%E9%9D%9E%E6%BD%AE%E6%B5%81%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84-Java%E5%92%8CReactJS/"/>
    <id>https://zhaozeyu.space/2018/06/03/非潮流前端项目架构-Java和ReactJS/</id>
    <published>2018-06-03T10:59:54.000Z</published>
    <updated>2018-06-03T03:41:39.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目特征"><a href="#项目特征" class="headerlink" title="项目特征"></a>项目特征</h1><ul><li>运行于第三方 APP 内，需要以 H5 等相关后台技术为基础。</li><li>UE 、 UI 、静态页面由合作公司开发，然后再套用到前端项目中。</li><li>页面较少，但需要在第三方 APP 内进行多次 webview 切换，路由需要自己负责，第三方 APP 不提供支持。</li><li>动静分离。</li><li>前端前端技术采用 React 、Webpack 、 Babel 等，开发时热更新。</li><li>没有 redux ，没有 RxJS ，没有 SEO 。</li><li>Web api 采用 Spring ，部署于 WAS 。</li><li>后端较重，使用 Dubbo 等。</li></ul><a id="more"></a><h1 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h1><p>前端的工作流程如图。<br><img src="http://upload-images.jianshu.io/upload_images/1299225-b2f32985906edcd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端工作流.png"><br><strong>面临的问题主要有</strong>：</p><ul><li>UE 设计缺乏设计规范和支撑实施设计规范的组件库，经常会出现分支流程缺失的情况。比如某个流程失败，某几个展示要素缺失等。</li><li>UE 设计的缺失导致 UI 没有对此进行设计，因此静态页面也缺少相关实现。比如一个物品最多可以展示 5 个标签，只实现了展示 5 个标签和不展示标签。</li><li>反馈流程过长，许多上述问题在开发阶段和测试阶段才暴露出来。</li><li>组件化受限于静态页面开发质量，影响组件化的实施。</li></ul><h2 id="模板套用"><a href="#模板套用" class="headerlink" title="模板套用"></a>模板套用</h2><p>因为项目组内缺乏对 css 、 less 、 scss 、 postcss 等熟悉的工程师，所以从 UI 到静态页面是从外部公司采购的。我们拿到的静态页面是这样的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- app</span><br><span class="line">|-- css</span><br><span class="line">| | |-- app.css</span><br><span class="line">|-- image</span><br><span class="line">|-- html</span><br><span class="line">| | |-- pageA.html</span><br><span class="line">| | |-- pageB.html</span><br></pre></td></tr></table></figure></p><p>拿到之后，将静态资源复制到对应的目录下，然后将 html 的内容改写成 jsx 。很多页面展示内容和业务强相关，可以共用的组件基本就是 header ， modal ， toastr ，存储和路由等。</p><h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>前端代码采用动静分离，分为两个部分：页面代码和 web api 。</p><h3 id="页面代码组织"><a href="#页面代码组织" class="headerlink" title="页面代码组织"></a>页面代码组织</h3><p>Java 项目的工程化是非常成熟的，页面代码参考 Java 项目，该分层的分层，该配置管理的配置管理。</p><ul><li>按照页面划分路由，每个页面保存自己的 state ，全局变量使用 localStorage 来传递。</li><li>由于存在 webview 切换的问题，没有使用 redux 等，当然也可以考虑切换前利用 localStorage 持久化，切换后用其初始化。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- app</span><br><span class="line">|-- asset // 构建输出目录</span><br><span class="line">|-- css // 样式源文件目录</span><br><span class="line">|-- image // 图片源文件目录</span><br><span class="line">|-- node_modules // npm 仓库</span><br><span class="line">|-- scripts // js源文件目录</span><br><span class="line">| | |-- pages // 相当于一般 react 项目中的 container</span><br><span class="line">| | | | |-- [Page] // 页面目录</span><br><span class="line">| | | | | | |-- index.js // 入口文件</span><br><span class="line">| | | | | | |-- [Component].js // 页面组件文件，0 到多个</span><br><span class="line">| | |-- routes // 封装页面为 react-router lazy-load 组件</span><br><span class="line">| | | | |-- [Page] // 对应页面目录</span><br><span class="line">| | | | | | |-- index.js // 页面 route 配置文件</span><br><span class="line">| | |-- utils // 公共库</span><br><span class="line">| | | | |-- polyfill // 适配第三方 APP 的代码</span><br><span class="line">| | | | |-- [CommonComponet] // 公共 react 组件目录，如 Toastr</span><br><span class="line">| | | | |-- Example // 示例代码目录</span><br><span class="line">| | | | |-- global.js // 基础公共函数库</span><br><span class="line">| | | | |-- browserHistory.js // history.js + react-router</span><br><span class="line">| | | | |-- clientStorage.js // 使用 cookie / storage 本地存储</span><br><span class="line">| | |-- app.js // 客户端 js 入口</span><br><span class="line">| | |-- index.ejs // 生成入口 html 的模板文件</span><br><span class="line">|-- tools // 构建相关源文件目录</span><br><span class="line">| | |-- clean.js // 清理历史构建文件</span><br><span class="line">| | |-- zip.js // 构建输出打包</span><br><span class="line">| | |-- copy.js // 管理外资源拷贝，如 favicon.js</span><br><span class="line">| | |-- start.js // 开发用 web server，基于 webpack-dev-server</span><br><span class="line">| | |-- verify.js // 验证构建结果的 web-server</span><br><span class="line">| | |-- ...</span><br><span class="line">|-- .babelrc // 目前配置在 package.json 里</span><br><span class="line">|-- .eslint // 代码规范校验</span><br><span class="line">|-- .eslintIgnore // 忽略代码规范校验</span><br><span class="line">|-- package.json // npm 描述文件</span><br><span class="line">|-- webpack.config.[target].js // 对应各个环境的 webpack 配置。</span><br></pre></td></tr></table></figure><h3 id="页面构建"><a href="#页面构建" class="headerlink" title="页面构建"></a>页面构建</h3><p>项目主要通过 webpack 构建静态资源。webpack 的构建以配置文件中的 entry 为起点，对依赖的资源进行静态分析，然后通过 loaders 和 plugins 进行处理，输出到 output。<br><img src="http://upload-images.jianshu.io/upload_images/1299225-ab36355944e571e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="webpack 工作流.png"></p><p><strong>构建时的性能优化</strong>：</p><ul><li>通过 <code>CommonsChunkPlugin</code> 抽取公共函数库，打包成单独的 js chunk 。</li><li>通过 <code>UglifyJsPlugin</code> 压缩 js 。</li><li>通过 <code>css-loader</code> 压缩 css 。</li><li>通过 <code>url-loader</code> 将小图片转为 base64 ，减少小文件请求。</li><li>通过 webpack 提供的 <code>import</code> 和 <code>react-router</code> 配合使用，实现延迟加载的功能，进一步提升首屏加载速度，保证各个页面的加载速度。</li></ul><p><strong>Additional</strong>：</p><ul><li>在 pre-build 阶段，提供清理之前构建，复制依赖之外的资源等功能的脚本。</li><li>在 post-build 阶段，提供输出目录压缩，启动模拟目标部署环境 web server 验证等功能的脚本。</li></ul><h3 id="web-api-代码组织"><a href="#web-api-代码组织" class="headerlink" title="web api 代码组织"></a>web api 代码组织</h3><p>web api 是典型的 maven web project 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- project</span><br><span class="line">|-- src</span><br><span class="line">| | |-- main</span><br><span class="line">| | | | |-- java // java 源文件</span><br><span class="line">| | | | |-- portable // 构建时的部署环境配置</span><br><span class="line">| | | | |-- resources // 各种依赖配置，如 spring，dubbo ， redis ， shiro ， logback ， shiro 等。</span><br><span class="line">| | | | |-- webapp</span><br><span class="line">| | | | | | |-- web.xml // 主要是 web.xml 的配置。</span><br><span class="line">| | |-- <span class="built_in">test</span> // 对应同级 java 目录的单元测试文件</span><br><span class="line">|-- pom.xml // maven 描述文件，项目对象模型</span><br></pre></td></tr></table></figure><p>Java 里充当 express/koajs 等角色的实际上是 web 容器，Spring 对应的是 express/koajs 生态圈的一揽子方案，包括了 route 、 template 、load 等等。</p><h3 id="web-api-构建"><a href="#web-api-构建" class="headerlink" title="web api 构建"></a>web api 构建</h3><p>所有的项目构建其实内容都差不多：预处理 -&gt; 处理 -&gt; 后处理 -&gt; 输出。maven 就等于是 Java web 的 npm + webpack 。<br><code>npm install, webpack</code> -&gt; <code>maven install</code> 。</p><h2 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h2><p>此时前台访问一个页面的过程大致上如图。<br><img src="http://upload-images.jianshu.io/upload_images/1299225-79493782be465230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端架构运行时.png"></p><p>静态资源服务器使用 nginx ，没有做同构直出。为了正确渲染页面，任意请求返回的都是同一个 index.html （<code>try_files</code>），该 index.html 含有 app.css ，外壳 + 路由配置的 app.js 。app.js 加载完成后，则会进一步 lazy-load 对应 uri 所需的 js 文件。</p><p>因此，初次访问或者缓存过期的情况下，一个页面的访问有：</p><ol><li>请求 index.html 。</li><li>请求 app.css 。</li><li>请求 app.js 。</li><li>请求 vendor.js 。</li><li>请求 [route].js 。</li><li>请求其他静态资源，如静态图片资源。</li><li>其他动态请求。</li></ol><p>而 app.css 、 app.js 、vendor.js 在缓存后如果是 304 ，并不会再次请求。</p><h1 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h1><ul><li>less/scss/postcss 。</li><li>后端渲染。</li><li>RN 。</li><li>koa&amp;pm2 。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;项目特征&quot;&gt;&lt;a href=&quot;#项目特征&quot; class=&quot;headerlink&quot; title=&quot;项目特征&quot;&gt;&lt;/a&gt;项目特征&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;运行于第三方 APP 内，需要以 H5 等相关后台技术为基础。&lt;/li&gt;
&lt;li&gt;UE 、 UI 、静态页面由合作公司开发，然后再套用到前端项目中。&lt;/li&gt;
&lt;li&gt;页面较少，但需要在第三方 APP 内进行多次 webview 切换，路由需要自己负责，第三方 APP 不提供支持。&lt;/li&gt;
&lt;li&gt;动静分离。&lt;/li&gt;
&lt;li&gt;前端前端技术采用 React 、Webpack 、 Babel 等，开发时热更新。&lt;/li&gt;
&lt;li&gt;没有 redux ，没有 RxJS ，没有 SEO 。&lt;/li&gt;
&lt;li&gt;Web api 采用 Spring ，部署于 WAS 。&lt;/li&gt;
&lt;li&gt;后端较重，使用 Dubbo 等。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="react,ReactJs,Java,Spring" scheme="https://zhaozeyu.space/tags/react-ReactJs-Java-Spring/"/>
    
  </entry>
  
  <entry>
    <title>10分钟搞定 react 二维码、条码生成组件</title>
    <link href="https://zhaozeyu.space/2018/06/03/10%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A-react-%E4%BA%8C%E7%BB%B4%E7%A0%81%E3%80%81%E6%9D%A1%E7%A0%81%E7%94%9F%E6%88%90%E7%BB%84%E4%BB%B6/"/>
    <id>https://zhaozeyu.space/2018/06/03/10分钟搞定-react-二维码、条码生成组件/</id>
    <published>2018-06-03T10:45:55.000Z</published>
    <updated>2018-06-03T03:41:39.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条码生成"><a href="#条码生成" class="headerlink" title="条码生成"></a>条码生成</h1><p>首先去万能的 npm 上找到一个库安装。</p><p><code>npm install jsbarcode --save</code></p><p>然后写一个简单的 react 组件。需要转换成条码的原始字符串来源可能有很多，我们在这里就弄个输入框好了。</p><p><code>输入 =&gt; 转换 =&gt; SVG条形码</code></p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> JsBarcode <span class="keyword">from</span> <span class="string">'jsbarcode'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodePainterExample</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"请输入原始字符串"</span></span><br><span class="line">          onChange=&#123;(e)=&gt;&#123;</span><br><span class="line">            <span class="comment">//  在 this._barcodeSVG 下使用输入的数值来生成条码</span></span><br><span class="line">            JsBarcode(<span class="keyword">this</span>._barcodeSVG, e.target.value,</span><br><span class="line">              &#123;</span><br><span class="line">                displayValue: <span class="literal">false</span>,  <span class="comment">//  不显示原始值</span></span><br><span class="line">                background: <span class="string">'#4b8b7f'</span>,  <span class="comment">//  背景色</span></span><br><span class="line">                lineColor: <span class="string">'rgba(255,255,255,0.5)'</span>, <span class="comment">// 线条颜色</span></span><br><span class="line">                width: <span class="number">1</span>  <span class="comment">// 线条宽度</span></span><br><span class="line">              &#125;</span><br><span class="line">            );</span><br><span class="line">          &#125;&#125;/&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;label&gt;条码&lt;<span class="regexp">/label&gt;&lt;br/</span>&gt;</span><br><span class="line">        &lt;svg ref=&#123;(ref)=&gt;<span class="keyword">this</span>._barcodeSVG = ref&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default CodePainterExample;</span></span><br></pre></td></tr></table></figure><h1 id="二维码生成"><a href="#二维码生成" class="headerlink" title="二维码生成"></a>二维码生成</h1><p>一样在 npm 找到库 <a href="http://qr-image/" target="_blank" rel="noopener">qr-image</a> 安装。<br><code>npm install --save qr-image</code></p><p>同样，在上面的例子里加一个新的 <code>svg</code> 标签，来放我们的二维码。由于这个库主要是用在 nodejs 中，我们使用其中提供的 <code>svgObject.path</code> 来绘制二维码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> svgpath <span class="keyword">from</span> <span class="string">'svgpath'</span>;</span><br><span class="line"><span class="keyword">import</span> qr <span class="keyword">from</span> <span class="string">'qr-image'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodePainterExample</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      path: <span class="literal">null</span> <span class="comment">// 保存二维码SVG的path</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"请输入"</span></span><br><span class="line">          onChange=&#123;(e)=&gt;&#123;</span><br><span class="line">            <span class="keyword">const</span> originPath = qr.svgObject(e.target.value).path; <span class="comment">//  获得二维码的绘制路径</span></span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">path</span>: originPath&#125;);</span><br><span class="line">          &#125;&#125;/&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;label&gt;二维码&lt;<span class="regexp">/label&gt;&lt;br/</span>&gt;</span><br><span class="line">        &lt;svg width=<span class="string">"100%"</span> height=<span class="string">"300"</span> ref=&#123;(ref)=&gt;<span class="keyword">this</span>._qrcodeSVG = ref&#125; transform=<span class="string">"scale(2)"</span>&gt;</span><br><span class="line">          &lt;path d=&#123;<span class="keyword">this</span>.state.path?<span class="keyword">this</span>.state.path:<span class="literal">null</span>&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样生成的二维码图形意外的小，还得找个库来放大一下我们的二维码。<br><code>npm install --save svgpath</code><br>然后，试着放大一下我们的二维码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scaledPath = svgpath(originPath).scale(<span class="number">5</span>, <span class="number">5</span>).toString();</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">path</span>: scaledPath&#125;);</span><br></pre></td></tr></table></figure><p>完美。<br>​</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;条码生成&quot;&gt;&lt;a href=&quot;#条码生成&quot; class=&quot;headerlink&quot; title=&quot;条码生成&quot;&gt;&lt;/a&gt;条码生成&lt;/h1&gt;&lt;p&gt;首先去万能的 npm 上找到一个库安装。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install jsbarcode --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后写一个简单的 react 组件。需要转换成条码的原始字符串来源可能有很多，我们在这里就弄个输入框好了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;输入 =&amp;gt; 转换 =&amp;gt; SVG条形码&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react,qrcode,barcode" scheme="https://zhaozeyu.space/tags/react-qrcode-barcode/"/>
    
  </entry>
  
  <entry>
    <title>从 Jekyll 到 Hexo，GitHub 到 VSTS，自动构建博客发布</title>
    <link href="https://zhaozeyu.space/2018/06/01/%E4%BB%8E-Jekyll-%E5%88%B0-Hexo/"/>
    <id>https://zhaozeyu.space/2018/06/01/从-Jekyll-到-Hexo/</id>
    <published>2018-06-01T13:28:50.000Z</published>
    <updated>2018-06-03T03:41:39.429Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>手贱又买了个域名，还用的自己姓名拼音，儿童节快乐。</p></blockquote><h1 id="再次搭建博客的缘由"><a href="#再次搭建博客的缘由" class="headerlink" title="再次搭建博客的缘由"></a>再次搭建博客的缘由</h1><ul><li><a href="https://zhuanlan.zhihu.com/techctu" target="_blank" rel="noopener">知乎专栏</a>太杂，一点都不 geek，我想写 markdown。</li><li><a href="https://www.jianshu.com/u/20e5dee72047" target="_blank" rel="noopener">简书</a>传播性不好，也很杂。</li><li>GitHub 太小气了，私有仓库要付钱，我要把源文件私有，把生成的博客发布，还是不用 Jekyll 直接在公共仓库放 Markdown 了。</li><li>Jekyll highlight 语法再见！</li><li>VSTS 大法好，私有仓库免费，微软黑转粉。</li><li>强迫症，博客原文一定要私有，提交完就自动构建并发布到 GitHub Pages，虽然 hexo deploy 很方便，但我不想用。</li></ul><p>编写 -&gt; 本地预览 -&gt; 上传 VSTS -&gt; 自动构建 -&gt; 发布到 GitHub Pages 。</p><a id="more"></a><h1 id="VSTS-构建，GitHub-发布"><a href="#VSTS-构建，GitHub-发布" class="headerlink" title="VSTS 构建，GitHub 发布"></a>VSTS 构建，GitHub 发布</h1><p>首先，需要一个 <a href="https://www.visualstudio.com/zh-hans/team-services/" target="_blank" rel="noopener">VSTS</a> 账号，免费申请。</p><p>然后，用 VSTS 作为自己博客的仓库，创建构建任务，参考<a href="https://www.cnblogs.com/zjoch/p/6088935.html" target="_blank" rel="noopener">使用VSTS/TFS搭建iOS持续集成环境</a>。</p><p>在构建任务里，在 hexo 生成好的文件夹（默认 public）内，push 到 GitHub。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">git init</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> $(github_name)</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> $(github_email)</span><br><span class="line">git pull https:<span class="comment">//$(github_token)@github.com/***/***.github.io.git master</span></span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"$(build.buildNumber)"</span></span><br><span class="line">git push -f https:<span class="comment">//$(github_token)@github.com/***/***.github.io.git head:master</span></span><br></pre></td></tr></table></figure><p>push 到 VSTS 后，立刻自动构建发布，完美。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/yanzhenjie1003/article/details/51703370" target="_blank" rel="noopener">在 GitHub Pages 搭建个人博客</a></li><li><a href="http://www.51pin.cn/archives/309/" target="_blank" rel="noopener">在 Godaddy 购买域名</a><!-- more --></li><li><a href="https://blog.csdn.net/u011244202/article/details/57106544" target="_blank" rel="noopener">用 CloudFlare 给自己的 GitHub Pages 博客挂上 https</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a></li><li><a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a></li><li><a href="https://blog.csdn.net/u011475210/article/details/79023429" target="_blank" rel="noopener">从 Jekyll 到 Hexo</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">使用 Next</a></li><li><a href="https://www.cnblogs.com/ups216/p/5475389.html" target="_blank" rel="noopener">GitHub 和 VSTS 双向同步源代码</a></li><li><a href="https://www.cnblogs.com/zjoch/p/6088935.html" target="_blank" rel="noopener">使用VSTS/TFS搭建iOS持续集成环境</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;手贱又买了个域名，还用的自己姓名拼音，儿童节快乐。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;再次搭建博客的缘由&quot;&gt;&lt;a href=&quot;#再次搭建博客的缘由&quot; class=&quot;headerlink&quot; title=&quot;再次搭建博客的缘由&quot;&gt;&lt;/a&gt;再次搭建博客的缘由&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/techctu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎专栏&lt;/a&gt;太杂，一点都不 geek，我想写 markdown。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/u/20e5dee72047&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;传播性不好，也很杂。&lt;/li&gt;
&lt;li&gt;GitHub 太小气了，私有仓库要付钱，我要把源文件私有，把生成的博客发布，还是不用 Jekyll 直接在公共仓库放 Markdown 了。&lt;/li&gt;
&lt;li&gt;Jekyll highlight 语法再见！&lt;/li&gt;
&lt;li&gt;VSTS 大法好，私有仓库免费，微软黑转粉。&lt;/li&gt;
&lt;li&gt;强迫症，博客原文一定要私有，提交完就自动构建并发布到 GitHub Pages，虽然 hexo deploy 很方便，但我不想用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写 -&amp;gt; 本地预览 -&amp;gt; 上传 VSTS -&amp;gt; 自动构建 -&amp;gt; 发布到 GitHub Pages 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jekyll,Hexo,Godaddy,GitHub Pages" scheme="https://zhaozeyu.space/tags/Jekyll-Hexo-Godaddy-GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>webpack 2 和 react-router 实现按需加载</title>
    <link href="https://zhaozeyu.space/2017/02/24/webpack-2-%E5%92%8C-react-router-%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/"/>
    <id>https://zhaozeyu.space/2017/02/24/webpack-2-和-react-router-实现按需加载/</id>
    <published>2017-02-24T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.429Z</updated>
    
    <content type="html"><![CDATA[<p>产品上线了一段时日，偷偷摸摸把 webpack 升级到了 2.x ，出现了很多优化需求，意味着很多新的库、新的代码，以及，更大的 bundle 。怎么办呢？ Code Splitting 呗！按需加载、懒加载┏ (゜ω゜)=☞。</p><h1 id="Code-Splitting-的方式"><a href="#Code-Splitting-的方式" class="headerlink" title="Code Splitting 的方式"></a>Code Splitting 的方式</h1><p>前端代码一般需要进行拆分的地方有：<a id="more"></a></p><ul><li>公共代码拆分，如所有代码共用的三方库，某些业务模块或页面用的三方库。</li><li>特定业务场景加速，如首页，或者多页面入口时的入口页面加速。比如现在老板要你做个地理位置的AR，总不能直接把这个包和常规业务代码丢一块加载吧。</li></ul><h1 id="babel-、-webpack-依赖配置"><a href="#babel-、-webpack-依赖配置" class="headerlink" title="babel 、 webpack 依赖配置"></a>babel 、 webpack 依赖配置</h1><p>很多人都说 ES6 、 ES7 会毁了 JavaScript ，但各大语言语法趋向一致不是大趋势吗？难道之前的人开发写了一堆 polyfill 来解决各种诡异的问题后纷纷走向高级岗位，还要像吹牛逼说自己拿记事本写上万行代码一样，要求后来者也会写这堆 polyfill 吗？使用成熟的工具，是团队成功的必要条件之一吧。新的版本的曙光已经到来，不必抱残守缺。</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>这里使用的 webpack 为 2.2.1 。按照 <a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noopener">webpack 官网文档</a>，需要先安装 babel 相关插件。</p><p><code>npm install --save-dev babel-core babel-loader babel-plugin-syntax-dynamic-import babel-preset-es2015</code></p><p>然后在 <code>.babelrc</code> 里，或是在 <code>package.json</code> 的 <code>&quot;babel&quot;</code> 里，亦或在 <code>webpack.config</code> 的 <code>module -&gt; rules -&gt; use -&gt; loader: &#39;babel-loader&#39;</code> 的同级下配置。这里我是在 <code>package.json</code> 里配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"babel"</span>: &#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"syntax-dynamic-import"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以这样写代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">determineDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moment'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">moment</span> =&gt;</span> moment().format(<span class="string">'LLLL'</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">console</span>.log(str))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Failed to load moment'</span>, err));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">determineDate();</span><br></pre></td></tr></table></figure><p>目前这样已经可以使用 webpack 和 babel 来进行代码拆分了。</p><h2 id="尝鲜配置"><a href="#尝鲜配置" class="headerlink" title="尝鲜配置"></a>尝鲜配置</h2><p>目前 ES7 的 async/await 语法都要出来了，只配置这些怎么够？所以我这样配置。</p><p><code>npm install --save-dev babel-preset-es2015 babel-preset-es2016 babel-preset-2017 babel-preset-stage-0 babel-plugin-transform-decorators babel-plugin-transform-decorators-legacy babel-plugin-transform-object-rest-spread babel-preset-react</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"babel"</span>: &#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>,<span class="string">"es2016"</span>,<span class="string">"es2017"</span>,<span class="string">"stage-0"</span>,<span class="string">"react"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"syntax-dynamic-import"</span>,<span class="string">"transform-decorators-legacy"</span>,<span class="string">"transform-object-rest-spread"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以用各种新特性，比如箭头函数、async/await、装饰器等。</p><h1 id="基于-react-router-的代码拆分"><a href="#基于-react-router-的代码拆分" class="headerlink" title="基于 react-router 的代码拆分"></a>基于 react-router 的代码拆分</h1><p>在 <a href="https://github.com/ReactTraining/react-router/tree/master/examples/huge-apps" target="_blank" rel="noopener">react-router的示例代码 huge-apps</a> 里有非常经典的基于路由的代码拆分方案。</p><blockquote><p>为什么基于路由拆分？一般一个路由对应一个逻辑上的业务页面，而一般多个业务页面在一个子路由下构成了业务流程，其代码依赖也比较相近，适合做代码拆分。</p></blockquote><h2 id="基础路由配置"><a href="#基础路由配置" class="headerlink" title="基础路由配置"></a>基础路由配置</h2><p>不拆分的路由长 <a href="https://github.com/ReactTraining/react-router/blob/master/docs/guides/RouteConfiguration.md" target="_blank" rel="noopener">这样</a> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"inbox"</span> <span class="attr">component</span>=<span class="string">&#123;Inbox&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"messages/:id"</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者 <a href="https://github.com/ReactTraining/react-router/blob/master/docs/guides/RouteConfiguration.md" target="_blank" rel="noopener">这样</a> 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">routes</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">'/'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  component:</span> <span class="string">App,</span></span><br><span class="line"><span class="attr">  indexRoute:</span> <span class="string">&#123;</span> <span class="attr">component:</span> <span class="string">Dashboard</span> <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  childRoutes:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">'about'</span><span class="string">,</span> <span class="attr">component:</span> <span class="string">About</span> <span class="string">&#125;,</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">'inbox'</span><span class="string">,</span></span><br><span class="line"><span class="attr">      component:</span> <span class="string">Inbox,</span></span><br><span class="line"><span class="attr">      childRoutes:</span> <span class="string">[&#123;</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">'messages/:id'</span><span class="string">,</span></span><br><span class="line"><span class="attr">        onEnter:</span> <span class="string">(&#123;</span> <span class="string">params</span> <span class="string">&#125;,</span> <span class="string">replace)</span> <span class="string">=&gt;</span> <span class="string">replace(`/messages/$&#123;params.id&#125;`)</span></span><br><span class="line">      <span class="string">&#125;]</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      component:</span> <span class="string">Inbox,</span></span><br><span class="line"><span class="attr">      childRoutes:</span> <span class="string">[&#123;</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">'messages/:id'</span><span class="string">,</span> <span class="attr">component:</span> <span class="string">Message</span></span><br><span class="line">      <span class="string">&#125;]</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>然后，构建时 webpack 就会把所以依赖静态分析后打到指定的 bundle 里。</p><h2 id="路由拆分配置"><a href="#路由拆分配置" class="headerlink" title="路由拆分配置"></a>路由拆分配置</h2><p>react-router 利用 webpack 支持的 <code>require.ensure</code> 来实现延迟加载。基本思路是将需要拆分的路由注册到路由配置里，将依赖的 react 组件通过 require.ensure 来加载，听过 getChildRoutes 和 getComponents 这样的黑科技。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件和其路由</span></span><br><span class="line"><span class="comment">// Announcement/Announcement.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Announcement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; courseId, announcementId &#125; = <span class="keyword">this</span>.props.params</span><br><span class="line">    <span class="keyword">let</span> &#123; title, body &#125; = COURSES[courseId].announcements[announcementId]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h4&gt;&#123;title&#125;&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&#123;body&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">module.exports = Announcement</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 对应路由封装和暴露</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Announcement/i</span>ndex.js</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  path: <span class="string">':announcementId'</span>,</span><br><span class="line"></span><br><span class="line">  getComponent(location, cb) &#123;</span><br><span class="line">    <span class="built_in">require</span>.ensure([], (<span class="built_in">require</span>) =&gt; &#123;</span><br><span class="line">      cb(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./components/Announcement'</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> rootRoute = &#123;</span><br><span class="line">  component: <span class="string">'div'</span>,</span><br><span class="line">  childRoutes: [ &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="built_in">require</span>(<span class="string">'./components/App'</span>),</span><br><span class="line">    childRoutes: [</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">'./routes/Announcement'</span>)</span><br><span class="line">    ]</span><br><span class="line">  &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，就是</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const rootRoute = &#123;</span><br><span class="line">  component: <span class="string">'div'</span>,</span><br><span class="line">  childRoutes: [ &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="built_in">require</span>(<span class="string">'./components/App'</span>),</span><br><span class="line">    childRoutes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">':announcementId'</span>,</span><br><span class="line"></span><br><span class="line">        getComponent(location, cb) &#123;</span><br><span class="line">          <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">(<span class="built_in">require</span>)</span> =&gt;</span> &#123;</span><br><span class="line">            cb(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./components/Announcement'</span>))</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-2-x-下的加载方式"><a href="#webpack-2-x-下的加载方式" class="headerlink" title="webpack 2.x 下的加载方式"></a>webpack 2.x 下的加载方式</h2><p>上面是 webpack 1.x 的配置方式，而在 2.x 下，需要进行一些修改，主要是用 <code>import</code> 替换 <code>require.ensure</code> 。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> Announcement/index.js</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  path: <span class="string">':announcementId'</span>,</span><br><span class="line"></span><br><span class="line">  getComponent(location, cb) &#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./components/Announcement'</span>)</span><br><span class="line">      .<span class="keyword">then</span>(<span class="function"><span class="params">(<span class="built_in">module</span>)</span>=&gt;</span>&#123;cb(<span class="literal">null</span>, <span class="built_in">module</span>.<span class="keyword">default</span>);&#125;)</span><br><span class="line">      .<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(err)&#125;);</span><br><span class="line">    <span class="regexp">//</span> <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">(<span class="built_in">require</span>)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="regexp">//</span>   cb(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./components/Announcement'</span>))</span><br><span class="line">    <span class="regexp">//</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TODOs"><a href="#TODOs" class="headerlink" title="TODOs"></a>TODOs</h1><ul><li>懒加载划分和加载异常处理。</li><li>合适的目录结构划分。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;产品上线了一段时日，偷偷摸摸把 webpack 升级到了 2.x ，出现了很多优化需求，意味着很多新的库、新的代码，以及，更大的 bundle 。怎么办呢？ Code Splitting 呗！按需加载、懒加载┏ (゜ω゜)=☞。&lt;/p&gt;
&lt;h1 id=&quot;Code-Splitting-的方式&quot;&gt;&lt;a href=&quot;#Code-Splitting-的方式&quot; class=&quot;headerlink&quot; title=&quot;Code Splitting 的方式&quot;&gt;&lt;/a&gt;Code Splitting 的方式&lt;/h1&gt;&lt;p&gt;前端代码一般需要进行拆分的地方有：
    
    </summary>
    
    
      <category term="webpack" scheme="https://zhaozeyu.space/tags/webpack/"/>
    
      <category term="react-router" scheme="https://zhaozeyu.space/tags/react-router/"/>
    
      <category term="babel" scheme="https://zhaozeyu.space/tags/babel/"/>
    
      <category term="webpack2" scheme="https://zhaozeyu.space/tags/webpack2/"/>
    
      <category term="延迟加载" scheme="https://zhaozeyu.space/tags/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="按需加载" scheme="https://zhaozeyu.space/tags/%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>在 html 中使用 react 和 jsx —— 不使用 nodejs</title>
    <link href="https://zhaozeyu.space/2017/02/18/%E5%9C%A8-html-%E4%B8%AD%E4%BD%BF%E7%94%A8-react-%E5%92%8C-jsx--%E4%B8%8D%E4%BD%BF%E7%94%A8-nodejs/"/>
    <id>https://zhaozeyu.space/2017/02/18/在-html-中使用-react-和-jsx--不使用-nodejs/</id>
    <published>2017-02-18T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.429Z</updated>
    
    <content type="html"><![CDATA[<p>今天有人跟我提了一个非常奇怪的需求：想使用 reactjs 来组件化，重写以前封装的组件。但他们的 leader 又觉得 node 、 npm 、 webpack 那一套很麻烦，太复杂了，只想要 react 封装组件。所以他想要的可能是这样：</p><ul><li>组件封装在 js 里，使用 react 封装。</li><li>访问某个页面时，返回对应的 html 文件，文件中引入 js ，非 SPA 。</li><li>绝对不使用 node 、 npm 、 webpack 。</li></ul><p>Try。</p><h1 id="在-html-中使用-react"><a href="#在-html-中使用-react" class="headerlink" title="在 html 中使用 react"></a>在 html 中使用 react</h1><p>可以参考 <a href="https://www.sitepoint.com/getting-started-react-jsx/" target="_blank" rel="noopener">Getting Started with React</a>  （<em>不能访问请翻墙</em>）。</p><a id="more"></a><h2 id="开始使用-react"><a href="#开始使用-react" class="headerlink" title="开始使用 react"></a>开始使用 react</h2><p>去国内 CDN 去找到 react 、 react-dom 、 browser 三个库，如 <a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a> 。</p><p>参考一下官网的 <a href="https://facebook.github.io/react/docs/hello-world.html" target="_blank" rel="noopener">hello-world</a> 。</p><p>找个地方创建目录，写一个 <code>index.html</code> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First React Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"greeting-div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/react/15.4.2/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/react/15.4.2/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/babel-core/6.1.19/browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> Greeting = React.createClass(&#123;</span></span><br><span class="line"><span class="actionscript">        render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> (</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, Universe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="undefined">          )</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      ReactDOM.render(</span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">Greeting</span>/&gt;</span>,</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'greeting-div'</span>)</span></span><br><span class="line"><span class="undefined">      );</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码创建了一个名为 <code>Greeting</code> 的 <code>react</code> 组件，然后在 <code>greeting-div</code> 这个 <code>div</code> 下使用 <code>react-dom</code> 的 <code>render</code> 方法来渲染成如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"greeting-div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, Universe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>原文其他部分不再翻译，毕竟这篇文章不是为了翻译，只是记录一下怎么在浏览器中使用 react 。语法部分的问题参考其他文章即可</em></p><h2 id="与使用-webpack-等的区别"><a href="#与使用-webpack-等的区别" class="headerlink" title="与使用 webpack 等的区别"></a>与使用 webpack 等的区别</h2><p>在一般的开发过程中，使用的是 node + npm + webpack + babel + react + react-dom ， 可能还要使用 redux 系列的库来开发，项目多为 SPA 。从开发到浏览器访问的处理过程一般为：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">react</span> <span class="comment">组件/页面（</span> <span class="comment">es6</span> <span class="comment">语法）</span><span class="literal">-</span><span class="literal">-</span><span class="comment">（</span> <span class="comment">webpack</span> <span class="comment">、</span> <span class="comment">babel</span> <span class="comment">）</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">es5</span> <span class="comment">语法的</span> <span class="comment">js</span> <span class="comment">chunk</span></span><br></pre></td></tr></table></figure><p>如果不使用这些，辣么就得在浏览器中通过 <code>browser.js</code> 来将 es6 的语法转换成 es5 。</p><p><strong>这样做很有可能会降低页面渲染速度。</strong></p><h2 id="对最终目录结构的猜想"><a href="#对最终目录结构的猜想" class="headerlink" title="对最终目录结构的猜想"></a>对最终目录结构的猜想</h2><p>可能是类似这样：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">|<span class="string">__view</span></span><br><span class="line">|<span class="string">   </span>|__home</span><br><span class="line">|<span class="string">   </span>|<span class="string">   </span>|<span class="string">__index.html // 页面入口html</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   </span>|<span class="string">__index.js  // 页面入口js</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   </span>|<span class="string">__ComA.js  // 页面使用的组件</span></span><br><span class="line">|__common</span><br><span class="line">|<span class="string">__</span>|__header</span><br><span class="line">|<span class="string">__</span>|<span class="string">__footer // 在这里的 html 模板片段中引入 react 、 react-dom 和 browser</span></span><br><span class="line">|<span class="string">__css // 可能 css 就是一个文件</span></span><br><span class="line">|__image</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天有人跟我提了一个非常奇怪的需求：想使用 reactjs 来组件化，重写以前封装的组件。但他们的 leader 又觉得 node 、 npm 、 webpack 那一套很麻烦，太复杂了，只想要 react 封装组件。所以他想要的可能是这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件封装在 js 里，使用 react 封装。&lt;/li&gt;
&lt;li&gt;访问某个页面时，返回对应的 html 文件，文件中引入 js ，非 SPA 。&lt;/li&gt;
&lt;li&gt;绝对不使用 node 、 npm 、 webpack 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try。&lt;/p&gt;
&lt;h1 id=&quot;在-html-中使用-react&quot;&gt;&lt;a href=&quot;#在-html-中使用-react&quot; class=&quot;headerlink&quot; title=&quot;在 html 中使用 react&quot;&gt;&lt;/a&gt;在 html 中使用 react&lt;/h1&gt;&lt;p&gt;可以参考 &lt;a href=&quot;https://www.sitepoint.com/getting-started-react-jsx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Getting Started with React&lt;/a&gt;  （&lt;em&gt;不能访问请翻墙&lt;/em&gt;）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://zhaozeyu.space/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>使用 nodejs zip / tar 目录 / 文件夹</title>
    <link href="https://zhaozeyu.space/2017/02/18/%E4%BD%BF%E7%94%A8-nodejs-zip--tar-%E7%9B%AE%E5%BD%95--%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://zhaozeyu.space/2017/02/18/使用-nodejs-zip--tar-目录--文件夹/</id>
    <published>2017-02-18T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.429Z</updated>
    
    <content type="html"><![CDATA[<p>有某个大佬想要搞自动发布，问我能不能搞一个 zip 静态资源目录的脚本。我瞅了瞅他，看在 windows 环境的面子上，就没有要求他自己写 shell 脚本了。</p><h1 id="去-npm-找一个库"><a href="#去-npm-找一个库" class="headerlink" title="去 npm 找一个库"></a>去 npm 找一个库</h1><p>万能的 npm 上有个 <a href="https://www.npmjs.com/package/archiver" target="_blank" rel="noopener">archiver</a> ，正好可以打包目录，和那些只能 appendFile 的妖艳贱货都不一样呢。<br><a id="more"></a></p><h1 id="写打包脚本"><a href="#写打包脚本" class="headerlink" title="写打包脚本"></a>写打包脚本</h1><blockquote><p>你会写nodejs吗？<br>我也不知道什么算会写啊，写个这个脚本打包个目录算不算？</p></blockquote><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> archiver <span class="keyword">from</span> <span class="string">'archiver'</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 nodejs 封装的接口检查是否存在输出目录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkOutputDir</span>(<span class="params">dest=<span class="string">'archiver/'</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nodejs版本更新后将fs.R_OK挪到了fs.constants.R_OK</span></span><br><span class="line">    <span class="keyword">const</span> R_OK = fs.R_OK || fs.constants.R_OK;</span><br><span class="line">    <span class="keyword">const</span> W_OK = fs.W_OK || fs.constants.W_OK;</span><br><span class="line"></span><br><span class="line">    fs.access(dest, R_OK | W_OK , (err)=&gt;&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'try to create archiver directory'</span>);</span><br><span class="line">        fs.mkdir(dest, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">'fail: create archiver directory'</span>);</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;);</span><br><span class="line">        resolve();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`can read and write <span class="subst">$&#123;dest&#125;</span>`</span>);</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩资源</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">zip</span>(<span class="params">targetEnv=<span class="string">'production'</span>, src=<span class="string">'asset/'</span>, dest=<span class="string">'archiver/'</span>, project=<span class="string">'projName'</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> checkOutputDir();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;dest&#125;</span><span class="subst">$&#123;project&#125;</span>-<span class="subst">$&#123;targetEnv&#125;</span>-<span class="subst">$&#123;moment().format(<span class="string">'YYYYMMDD-HHmmss'</span>)&#125;</span>.zip`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`prepare to create zipped file: <span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">let</span> archive = archiver(<span class="string">'zip'</span>, &#123;<span class="attr">zlib</span>:&#123;<span class="attr">level</span>: <span class="number">9</span>&#125;&#125;);</span><br><span class="line">    <span class="keyword">let</span> out = fs.createWriteStream(file);</span><br><span class="line">    out.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(archive.pointer() + <span class="string">' total bytes'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'archiver finalized'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    archive.on(<span class="string">'error'</span>, (err)=&gt;&#123;reject(err);&#125;);</span><br><span class="line"></span><br><span class="line">    archive.directory(src);</span><br><span class="line"></span><br><span class="line">    archive.pipe(out);</span><br><span class="line">    archive.finalize();</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> zip;</span><br></pre></td></tr></table></figure><h1 id="TODOs"><a href="#TODOs" class="headerlink" title="TODOs"></a>TODOs</h1><p>干脆用command整个命令得了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有某个大佬想要搞自动发布，问我能不能搞一个 zip 静态资源目录的脚本。我瞅了瞅他，看在 windows 环境的面子上，就没有要求他自己写 shell 脚本了。&lt;/p&gt;
&lt;h1 id=&quot;去-npm-找一个库&quot;&gt;&lt;a href=&quot;#去-npm-找一个库&quot; class=&quot;headerlink&quot; title=&quot;去 npm 找一个库&quot;&gt;&lt;/a&gt;去 npm 找一个库&lt;/h1&gt;&lt;p&gt;万能的 npm 上有个 &lt;a href=&quot;https://www.npmjs.com/package/archiver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;archiver&lt;/a&gt; ，正好可以打包目录，和那些只能 appendFile 的妖艳贱货都不一样呢。&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="https://zhaozeyu.space/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>从 webpack 1.x 迁移到 webpack 2.x</title>
    <link href="https://zhaozeyu.space/2017/02/18/%E4%BB%8E-webpack-1x-%E8%BF%81%E7%A7%BB%E5%88%B0-webpack-2x/"/>
    <id>https://zhaozeyu.space/2017/02/18/从-webpack-1x-迁移到-webpack-2x/</id>
    <published>2017-02-18T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.429Z</updated>
    
    <content type="html"><![CDATA[<p>项目搭建使用的 webpack 1.3.1 来作为打包工具，webpack 2.2 已经发布。</p><h1 id="升级项目依赖"><a href="#升级项目依赖" class="headerlink" title="升级项目依赖"></a>升级项目依赖</h1><p>备份，在 <code>package.json</code> 中移除 <code>webpack</code> 依赖。使用了 <code>extract-text-webpack-plugin</code> 的话这个插件也需要更新。<a id="more"></a></p><h1 id="修改-webpack-config-（开发）"><a href="#修改-webpack-config-（开发）" class="headerlink" title="修改 webpack.config （开发）"></a>修改 webpack.config （开发）</h1><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>1.x 中使用了 <code>debug:true</code> 的配置，在 2.x 中改为：</p><p><code>plugins: [    new webpack.LoaderOptionsPlugin({debug: true})  ]</code></p><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><p>resolve.extensions 不再需要传入空字符串，<code>extensions: [&#39;&#39;, &#39;js&#39;]</code> -&gt; <code>extensions: [&#39;js&#39;]</code>。</p><p>增加 modules 配置来加速加载 <code>modules: [path.resolve(__dirname, &#39;./scripts&#39;), &#39;node_modules&#39;]</code> 。</p><h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><p>因为动静分离，1.x 中使用了 <code>proxy:{&#39;/uri/*&#39;:{target:&#39;https://host&#39;}}</code> 来进行代理。在 2.x 中将这部分配置挪到了启动 webpack-dev-server 的脚本中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> WebpackDevServer(bundler, &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">'/yh-web/*'</span>: &#123;</span><br><span class="line">          <span class="comment">//target: 'http://localhost:9080'</span></span><br><span class="line">          target: <span class="string">'http://10.230.146.19:9080'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'/yx-web/*'</span>: &#123;</span><br><span class="line">          target: <span class="string">'http://localhost:9090'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="NoErrorsPlugin"><a href="#NoErrorsPlugin" class="headerlink" title="NoErrorsPlugin"></a>NoErrorsPlugin</h2><p>废弃，使用 <code>NoEmitOnErrorsPlugin</code> 。</p><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p><code>module.loaders</code> 修改为 <code>module.rules</code> 。</p><p>Loaders 需要添加 <code>-loader</code>，如 <code>babel</code> -&gt; <code>babel-loader</code> 。</p><h1 id="修改生产配置-webpack-config-production-js"><a href="#修改生产配置-webpack-config-production-js" class="headerlink" title="修改生产配置 webpack.config.production.js"></a>修改生产配置 webpack.config.production.js</h1><p>除了上述修改，目前主要为 extract-text-webpack-plugin 的配置修改。</p><h2 id="extract-text-webpack-plugin"><a href="#extract-text-webpack-plugin" class="headerlink" title="extract-text-webpack-plugin"></a>extract-text-webpack-plugin</h2><ul><li>Plugin 中的参数 <code>new ExtractTextPlugin(&#39;css/[name].[chunkhash].css&#39;, {allChunks: true})</code> 修改为 <code>new ExtractTextPlugin({filename: &#39;css/[name].[chunkhash].css&#39;, allChunks: true}</code></li><li>rules 中 css 抽取修改为 <code>use: ExtractTextPlugin.extract({fallback: &#39;style-loader&#39;, use: &#39;css-loader?modules&amp;minimize&amp;importLoaders=1&amp;localIdentName=[hash:base64:5]&#39;})</code></li></ul><h2 id="OccurenceOrderPlugin-和-DedupePlugin"><a href="#OccurenceOrderPlugin-和-DedupePlugin" class="headerlink" title="OccurenceOrderPlugin 和 DedupePlugin"></a>OccurenceOrderPlugin 和 DedupePlugin</h2><p>废弃，webpack 2.x 自带，不再使用。</p><h2 id="UglifyJsPlugin"><a href="#UglifyJsPlugin" class="headerlink" title="UglifyJsPlugin"></a>UglifyJsPlugin</h2><p><a href="https://webpack.js.org/guides/migrating/#uglifyjsplugin-sourcemap" target="_blank" rel="noopener">官方默认配置</a>已修改，这里配置改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">  compress: &#123;<span class="attr">warnings</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  souceMap: <span class="literal">false</span>,</span><br><span class="line">  minimize: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://webpack.js.org/guides/migrating/" target="_blank" rel="noopener">Migrating from v1 to v2</a></p><p><a href="http://www.zcfy.cc/article/migrating-from-v1-to-v2-2378.html" target="_blank" rel="noopener">从 webpack v1 迁移到 webpack v2</a></p><p><a href="http://imweb.io/topic/5868e1abb3ce6d8e3f9f99bb" target="_blank" rel="noopener">webpack 2终极优化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目搭建使用的 webpack 1.3.1 来作为打包工具，webpack 2.2 已经发布。&lt;/p&gt;
&lt;h1 id=&quot;升级项目依赖&quot;&gt;&lt;a href=&quot;#升级项目依赖&quot; class=&quot;headerlink&quot; title=&quot;升级项目依赖&quot;&gt;&lt;/a&gt;升级项目依赖&lt;/h1&gt;&lt;p&gt;备份，在 &lt;code&gt;package.json&lt;/code&gt; 中移除 &lt;code&gt;webpack&lt;/code&gt; 依赖。使用了 &lt;code&gt;extract-text-webpack-plugin&lt;/code&gt; 的话这个插件也需要更新。
    
    </summary>
    
    
      <category term="webpack" scheme="https://zhaozeyu.space/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>停止更新，使用issues来记录</title>
    <link href="https://zhaozeyu.space/2017/02/04/%E5%81%9C%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8issues%E6%9D%A5%E8%AE%B0%E5%BD%95/"/>
    <id>https://zhaozeyu.space/2017/02/04/停止更新使用issues来记录/</id>
    <published>2017-02-04T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.429Z</updated>
    
    <content type="html"><![CDATA[<p>最后一篇，以后使用 <a href="https://github.com/techctu/techctu.github.io/issues" target="_blank" rel="noopener">issues</a> 来记录。</p><p>有空了再挑挑文章来迁移。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最后一篇，以后使用 &lt;a href=&quot;https://github.com/techctu/techctu.github.io/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issues&lt;/a&gt; 来记录。&lt;/p&gt;
&lt;p&gt;有空了再挑挑文章来迁移
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用GSAP简单实现react列表中的下拉刷新和上拉加载更多</title>
    <link href="https://zhaozeyu.space/2017/01/11/%E4%BD%BF%E7%94%A8gsap%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0react%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/"/>
    <id>https://zhaozeyu.space/2017/01/11/使用gsap简单实现react列表中的下拉刷新和上拉加载更多/</id>
    <published>2017-01-11T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.429Z</updated>
    
    <content type="html"><![CDATA[<p>项目上线后看着列表不能下拉刷新不能上拉加载非常不爽，就做了个简单的实现。</p><p><em>为什么自己造轮子？用react不想添加jQuery，同时GitHub上的大部分代码都不能同时支持上拉和下拉。</em></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>找个现成的项目新建一个页面，写个timeout模拟异步请求。<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">refresh() &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    items: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">  &#125;)&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadMore() &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    items: <span class="keyword">this</span>.state.items.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">  &#125;)&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再整个生成列表。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderList</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">list.map((v, i</span>) =&gt;</span> (</span><br><span class="line">    &lt;li key=&#123;i&#125; onClick=&#123;<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;browserHistory.push(<span class="string">'/MerchantDetail/'</span> + v.id + <span class="string">'/'</span> + v.distance);&#125;&#125;&gt;</span><br><span class="line">      &lt;div styleName=<span class="string">"m-shop-right"</span>&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">          &#123;i&#125;</span><br><span class="line">        &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;)</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>然后开始搞事情。</p><h1 id="实现下拉和上拉"><a href="#实现下拉和上拉" class="headerlink" title="实现下拉和上拉"></a>实现下拉和上拉</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>现在的上拉和下拉大部分是：</p><ol><li>监听ontouchstart, ontouchmove, ontouchend三个事件。</li><li>判断上拉下拉边界，进行对应的CSS transform和transition。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sample，监听list的事件，修改list-header</span></span><br><span class="line">&lt;div id=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"list-header"</span> /&gt;</span><br><span class="line">    &lt;div id=<span class="string">"list-items"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>最开始想用 <code>react-css-transition-group</code> 或 <code>react-transition-group</code> 来实现上拉和下拉效果，像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;reactcsstransitiongroup ref=&#123;(el) =&gt; <span class="keyword">this</span>._ref = el&#125;&gt;</span><br><span class="line">    &lt;div id=<span class="string">"list-header"</span> /&gt;</span><br><span class="line">    &lt;div id=<span class="string">"list-items"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/reactcsstransitiongroup&gt;</span></span><br></pre></td></tr></table></figure><p>然而仔细阅读了之后，发现只能在 <code>mount</code> 和 <code>unmount</code> 这两个关键点触发动画，在 <code>update</code> 的时候无法触发。</p><p>我非常不希望通过 <figure class="highlight plain"><figcaption><span>style</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这个就非常微妙了，既然如此，我为何一定要用 `react-css-transition-group` 或 `react-transition-group` 呢？简单点不好么？直接把这部分动画操作放在直接的DOM操作里绕开react，然后在ontouchend里回调，也是一种不错的思路。</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">&lt;div id=&quot;g-wrap&quot; onTouchStart=&#123;(e) =&gt; this.handleTouchStart(e)&#125;</span><br><span class="line">  onTouchMove=&#123;(e) =&gt; this.handleTouchMove(e)&#125;</span><br><span class="line">  onTouchEnd=&#123;(e) =&gt; this.handleTouchEnd(e)&#125;&gt;</span><br><span class="line">    // ...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">handleTouchStart(e) &#123;</span><br><span class="line">  <span class="keyword">this</span>._touchStartPosY = e.touches[<span class="number">0</span>].pageY;<span class="comment">//记录触摸开始位置</span></span><br><span class="line">  <span class="keyword">this</span>._gmainDefaultPaddingTopRem = <span class="string">'1.8rem'</span>;<span class="comment">//记录初始列表头部位置，可改成接收参数</span></span><br><span class="line">  <span class="keyword">this</span>._gmainDefaultPaddingTop = <span class="built_in">parseInt</span>(</span><br><span class="line">    <span class="keyword">this</span>._gmainDefaultPaddingTopRem.substr(<span class="number">0</span>, <span class="keyword">this</span>._gmainDefaultPaddingTopRem.length - <span class="number">3</span>));</span><br><span class="line">  <span class="keyword">this</span>._gmainDefaultPaddingBottom = <span class="number">0</span>;<span class="comment">//底部</span></span><br><span class="line">  <span class="keyword">this</span>._lastScrollY = <span class="number">-1</span>;<span class="comment">//用于记录上一次滚动位置</span></span><br><span class="line">  <span class="keyword">this</span>._equalScroll = <span class="literal">false</span>;<span class="comment">//用于标记上拉到了底部</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleTouchMove(e) &#123;</span><br><span class="line">  <span class="keyword">this</span>._touchEndPosY = e.touches[<span class="number">0</span>].pageY;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下拉到顶</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.scrollY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._lastScrollY = <span class="built_in">window</span>.scrollY;</span><br><span class="line">    <span class="comment">// 拉且限制拉的距离</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._touchEndPosY - <span class="keyword">this</span>._touchStartPosY &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>._touchEndPosY - <span class="keyword">this</span>._touchStartPosY &lt; <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> gmain = findDOMNode(<span class="keyword">this</span>._gmain);</span><br><span class="line">      <span class="comment">// 偷懒使用TweenMax来生成动画</span></span><br><span class="line">      TweenMax.to(gmain, <span class="number">0</span>,</span><br><span class="line">        &#123;<span class="attr">paddingTop</span>: <span class="keyword">this</span>._gmainDefaultPaddingTop +</span><br><span class="line">            (<span class="keyword">this</span>._touchEndPosY - <span class="keyword">this</span>._touchStartPosY)/<span class="number">20</span> + <span class="string">'rem'</span>,</span><br><span class="line">            ease: Power0.easeInOut&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 上拉到底</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.scrollY == <span class="keyword">this</span>._lastScrollY) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>._equalScroll) &#123;</span><br><span class="line">        <span class="keyword">this</span>._equalScroll = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>._equalScrollY = <span class="built_in">window</span>.scrollY;</span><br><span class="line">        <span class="keyword">this</span>._equalClientY = e.touches[<span class="number">0</span>].clientY;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> gmain = findDOMNode(<span class="keyword">this</span>._gmain);</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      <span class="comment">// 限制上拉距离生成动画</span></span><br><span class="line">      <span class="keyword">let</span> offsetY = <span class="keyword">this</span>._touchEndPosY&gt;<span class="number">100</span>?<span class="number">100</span>:<span class="keyword">this</span>._touchEndPosY;</span><br><span class="line">      TweenMax.to(gmain, <span class="number">0</span>,</span><br><span class="line">        &#123;<span class="attr">paddingBottom</span>: <span class="keyword">this</span>._gmainDefaultPaddingBottom + offsetY/<span class="number">20</span>&gt; + <span class="string">'rem'</span>,</span><br><span class="line">        ease: Power0.easeInOut&#125;);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._lastScrollY = <span class="built_in">window</span>.scrollY;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleTouchEnd(e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.scrollY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._touchEndPosY - <span class="keyword">this</span>._touchStartPosY &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> gmain = findDOMNode(<span class="keyword">this</span>._gmain);</span><br><span class="line">      <span class="comment">// 弹回</span></span><br><span class="line">      TweenMax.to(gmain, <span class="number">1</span>,</span><br><span class="line">        &#123;<span class="attr">paddingTop</span>: <span class="keyword">this</span>._gmainDefaultPaddingTopRem,</span><br><span class="line">            ease: Back.easeInOut&#125;);</span><br><span class="line">      <span class="keyword">this</span>.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._equalScroll) &#123;</span><br><span class="line">      <span class="keyword">let</span> gmain = findDOMNode(<span class="keyword">this</span>._gmain);</span><br><span class="line">      <span class="comment">// 弹回</span></span><br><span class="line">      TweenMax.to(gmain, <span class="number">1</span>,</span><br><span class="line">        &#123;<span class="attr">paddingBottom</span>: <span class="keyword">this</span>._gmainDefaultPaddingBottom,</span><br><span class="line">            ease: Power3.easeInOut&#125;);</span><br><span class="line">      <span class="keyword">this</span>.loadMore();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整个思路就是：通过起始 <code>pageY</code> 和结束 <code>pageY</code> 判断用户垂直滑动方向，在根据 <code>window.scrollY</code> 和保存的上一次滑动位置来判断是否到顶（或者到底），到顶（或者到底）后执行 tansform，touchEnd的时候进行回调。</p><p>当然这只是个简单实践，还需要进一步优化，比如：</p><ul><li>支持传入回调函数。</li><li>支持定义限制的上拉下拉高度。</li><li>支持上拉下拉时载入自定义的静态资源，如活动动画或是刷新效果等。</li><li>设置默认参数。</li><li>将TweenMax改为原生方法实现减少大小。</li><li>抽取为high-order-component。</li><li>最近这种纯前端的东西做的有点多，是时候拿 nodejs 和 express/koa 搞事情了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目上线后看着列表不能下拉刷新不能上拉加载非常不爽，就做了个简单的实现。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;为什么自己造轮子？用react不想添加jQuery，同时GitHub上的大部分代码都不能同时支持上拉和下拉。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;找个现成的项目新建一个页面，写个timeout模拟异步请求。&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://zhaozeyu.space/tags/react/"/>
    
      <category term="gsap" scheme="https://zhaozeyu.space/tags/gsap/"/>
    
      <category term="pull to refresh" scheme="https://zhaozeyu.space/tags/pull-to-refresh/"/>
    
      <category term="push to load more" scheme="https://zhaozeyu.space/tags/push-to-load-more/"/>
    
  </entry>
  
  <entry>
    <title>在Babel6中使用ES7 Decorator</title>
    <link href="https://zhaozeyu.space/2017/01/10/%E5%9C%A8babel6%E4%B8%AD%E4%BD%BF%E7%94%A8es7-decorator/"/>
    <id>https://zhaozeyu.space/2017/01/10/在babel6中使用es7-decorator/</id>
    <published>2017-01-10T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.428Z</updated>
    
    <content type="html"><![CDATA[<p>在做下拉的时候搜寻到的<a href="http://technologyadvice.github.io/es7-decorators-babel6/" target="_blank" rel="noopener">资料</a>。</p><h1 id="增加decorator支持"><a href="#增加decorator支持" class="headerlink" title="增加decorator支持"></a>增加decorator支持</h1><p><em>假设你已经安装过 <code>babel-preset-2015</code> 和 <code>babel-preset-react</code> 等，并配置完毕。</em></p><p><code>npm install --save-dev babel-plugin-transform-decorators-legacy</code></p><p>然后在 <code>.babelrc</code> 中添加：</p><a id="more"></a><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-decorators-legacy"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在webpack配置文件中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  loaders:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      test:</span> <span class="string">/\.js$/,</span></span><br><span class="line"><span class="attr">      exclude:</span> <span class="string">/node_modules\/(?!(stardust))/,</span></span><br><span class="line"><span class="attr">      loader:</span> <span class="string">'babel'</span><span class="string">,</span></span><br><span class="line"><span class="attr">      query:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        plugins:</span> <span class="string">[</span></span><br><span class="line">          <span class="string">'transform-decorators-legacy'</span><span class="string">,</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line">      <span class="string">&#125;,</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>在我项目代码中使用了<a href="https://github.com/gajus/react-css-modules" target="_blank" rel="noopener">react-css-modules</a>。原来是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CSSModules <span class="keyword">from</span> <span class="string">'react-css-modules'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'app.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CSSModules(A, styles, &#123;<span class="attr">allowMultiple</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><p>使用之后是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CSSModules <span class="keyword">from</span> <span class="string">'react-css-modules'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'app.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">@CSSModules(styles, &#123;<span class="attr">allowMultiple</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> A;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>为什么要用decorator？在实现下拉的时候，我就在想，如果能在实现一个动画效果后，能应用到任意组件上就好了，所以才找到了decorator。</p><p>参考：</p><p>-<a href="http://jamesknelson.com/structuring-react-applications-higher-order-components/" target="_blank" rel="noopener">Structuring React Applications: Higher-Order Components</a></p><p>-<a href="https://medium.com/@cheapsteak/reusing-reacttransitiongroup-animations-with-higher-order-components-1e7043451f91#.61d51t159" target="_blank" rel="noopener">Reusing ReactTransitionGroup animations with Higher-order Components</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做下拉的时候搜寻到的&lt;a href=&quot;http://technologyadvice.github.io/es7-decorators-babel6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;资料&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;增加decorator支持&quot;&gt;&lt;a href=&quot;#增加decorator支持&quot; class=&quot;headerlink&quot; title=&quot;增加decorator支持&quot;&gt;&lt;/a&gt;增加decorator支持&lt;/h1&gt;&lt;p&gt;&lt;em&gt;假设你已经安装过 &lt;code&gt;babel-preset-2015&lt;/code&gt; 和 &lt;code&gt;babel-preset-react&lt;/code&gt; 等，并配置完毕。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save-dev babel-plugin-transform-decorators-legacy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在 &lt;code&gt;.babelrc&lt;/code&gt; 中添加：&lt;/p&gt;
    
    </summary>
    
    
      <category term="babel" scheme="https://zhaozeyu.space/tags/babel/"/>
    
      <category term="decorator" scheme="https://zhaozeyu.space/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>2016年年终总结</title>
    <link href="https://zhaozeyu.space/2016/12/17/2016%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://zhaozeyu.space/2016/12/17/2016年年终总结/</id>
    <published>2016-12-17T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.428Z</updated>
    
    <content type="html"><![CDATA[<p>一年一度的年终总结又开始了，前几年的年终总结要么拖着拖着就没写了，要么就是写了忘了放哪了。今年把之前的博客从国外的托管主机上的WordPress博客放到了github上，然后用七牛去做了一下镜像缓存，码字和发布的体验提升了不少，也就有了那么一点写年终总结的兴致。</p><p>今年整个部门最重要的工作就是三大平台的建设，年初我参与了部分WLAN建设工作，之后的主要工作是负责其中一个子中心的前端建设工作。<br><a id="more"></a></p><h1 id="前端建设"><a href="#前端建设" class="headerlink" title="前端建设"></a>前端建设</h1><blockquote><p>我是我行一块砖，哪有需要往哪搬。</p></blockquote><h2 id="履历背景"><a href="#履历背景" class="headerlink" title="履历背景"></a>履历背景</h2><p>最开始的时候，其实我是做后端的。这里的后端是我们部门成立的时候用Spring、Zookeeper、Dubbo、Quartz等搭建的架构。2013年那时候P2P特别火，我负责的是P2P投资流程的设计和开发。那时候的感触就是，数据库设计中一定的冗余是必要的，范式不一定合适；外系统的东西一定要在接口层隔离；日志要清晰，生产环境不允许debug。</p><p>14年的时候部门重构了系统，对各个子项目进行了拆分，这个时候就体现出了设计模式原则的重要性。之前我们就要求尽可能隔离外部系统、外部接口对内部的影响，所以重构的时候基本没有对现有项目产生大的影响。</p><p>后来就去做了几个新业务的APP开发，接触了一个非常魔幻的开发框架，是<a href="http://www.rytong.com/?p=1063" target="_blank" rel="noopener">这个公司</a>提供的。该框架是在Objective-C和Java上包了一个lua解释器，使用lua来进行开发。那阵子主要负责跟业务谈需求，然后再用Axure画UE，再盯开发实现和UE、UI有什么差距。</p><p>2015年的时候主要是做APP，使用那个魔幻框架，深切感受到了开发工具的重要性。没有高亮、没有自动格式化、没有错误提示、没有自动补全，这样的开发体验非常不友好，极大降低了开发效率，一些设计上的原则和规范也很难顺利执行。</p><blockquote><p>Q:为什么使用这个框架？A:（假装没听见这个问题）</p></blockquote><p>年底研究了支付宝、微信支付等接口，在这个魔幻框架上实现了第三方APP和浏览器调起客户端支付的功能。</p><p>2016年初主要是参与一个WLAN建设的项目，毕竟我行网点众多，像这种在一般小饭馆提供WiFi服务的项目，规模上去了，就会出现很多问题。</p><p>之后，就是建设子中心前端了。</p><h2 id="第一版前端"><a href="#第一版前端" class="headerlink" title="第一版前端"></a>第一版前端</h2><p>第一版前端如果从立项开始计算，经历了7个月。从成果上看，是一个APP的四个主页面中的一个页面及其后续流程。对于互联网公司来说，太慢了；但对于我行来说，这是一个了不起的成就了。毕竟，12月开始讨论需求，讨论到了3月底，还要改UE原型。原计划是5月上线，最后推到了6月。</p><p>第一版碰到了许多坑，可能有很多我都忘了，得好好想想。这是我接触前端技术的开始，也是接触工程化开始思维侧重点向工程化偏移的开始。</p><p>刚开始的时候，大佬说用react吧，Facebook的react很火啊很火啊，我们一堆萌新狂点头好呀好呀你是大佬你说什么都是对的，然后就上了react。DEMO，或者说流行的叫法为starter-kit，迅速搭建了起来，一切看起来很美好。</p><h3 id="舍弃AmazeUI"><a href="#舍弃AmazeUI" class="headerlink" title="舍弃AmazeUI"></a>舍弃AmazeUI</h3><p>大佬们说，工期紧啊，用react框架吧！然后找了一个画风看起来小清新的<a href="http://amazeui.org/" target="_blank" rel="noopener">啊妹子UI</a>。</p><p>当时的AmazeUI，组件难用，耦合高，使用起来感觉很重，代码质量也不高，而且不方便根据我们的需求进行定制。当然当时react还年轻，各个框架也不成熟，包括阿里的Ant-Design。不是说不好，但这些框架比较适合的还是作为中后台的管理系统前端框架，不适合我们进行定制开发。而且页面可以服用的部分不多，不需要过度追求组件化。</p><p>于是乎，我们就把啊妹子UI舍弃了。</p><p><em>后期啊妹子UI好像招到了一个比较牛的人，整个画风都不一样了。</em></p><h3 id="全站HTTPS"><a href="#全站HTTPS" class="headerlink" title="全站HTTPS"></a>全站HTTPS</h3><p>放公网测试的时候，发生了一件非常尴尬的事情。运营商真是非常牛逼的，一言不合就往你的页面塞广告。这我能怎么办呢？没办法，全站HTTPS吧。</p><h3 id="地理位置定位"><a href="#地理位置定位" class="headerlink" title="地理位置定位"></a>地理位置定位</h3><p>一般浏览器中使用的为IP定位和window.navigator.geolocation来获取经纬度定位。IP定位不准，geolocation定位受限于浏览器（webview）内核，如果用户刷机，甚至可能无法连接定位服务（被墙你懂的）。</p><p>那么，使用百度地图JS API吧！然后换全站HTTPS之后，百度地图JS API出现各种问题。</p><p><em>高德没有试过，有机会可以试试。</em></p><p>还好有万能的第三方APP提供他们的定位接口，才能解决这个定位问题。</p><h3 id="第三方APP内的路由"><a href="#第三方APP内的路由" class="headerlink" title="第三方APP内的路由"></a>第三方APP内的路由</h3><p>这又是个神奇的问题。在第三方APP里，你是要调用APP提供的接口来登录和支付的。调用登录和支付，会切换webview，导致原生的history返回出错。同时，第三方给的入口页面有第三方自己的header和footer，进入二级页面也会切换webview。</p><p>只能自己记录一个栈，实现自己的返回方法了。简单来说就是在本地记录一个访问栈，每次访问新页面的时候把地址压入栈，返回的时候出栈。第一版使用的是Cookie，在react-router的onEnter方法中注入，避免路由影响页面部分的开发。</p><p>这个方法存在一定的问题，难以记录当前页面状态，如多个页面的表单填写，需要保存当前表单的填写字段时，或是一个列表做了筛选操作时，需要做一定的特殊处理；需要清理Cookie；Cookie在会带入请求增加请求大小等。</p><h3 id="开发部署流程改进"><a href="#开发部署流程改进" class="headerlink" title="开发部署流程改进"></a>开发部署流程改进</h3><p>初始的starter-kit中，虽然在webpack的配置文件里配置了css-loader、style-loader、url-loader来处理样式、图片等资源，但在实际使用过程中，只在入口html文件里引入了样式文件 <code>&lt;link src=&quot;app.css&quot;&gt;</code> ，并没有考虑css、图片的压缩、优化等处理。为了将css、图片等资源纳入管理，使用了inline css方式，将css、图片也像js一样引入进来，并使用loader来处理，编写了示例代码，修改了文件输出方式增加了哈希值。</p><p>因为我厂采用的是采购外部厂商设计UI实现静态页面，我们利用静态页面来开发的合作方式，引入了react-css-modules来处理样式，避免编写内联样式，优化开发体验。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>产品上线使用，初步搭建了前端开发部署框架和规范化的流程。</li><li>存在一些优化方面的问题。</li><li>路由全部由前端控制，使用的hashHistory，没有后端渲染。没有自动化测试。</li><li>没有执行Eslint。</li></ul><h2 id="第二版前端"><a href="#第二版前端" class="headerlink" title="第二版前端"></a>第二版前端</h2><p>第二版前端主要在第一版基础上进行了一些改造。</p><h3 id="替换为browserHistory"><a href="#替换为browserHistory" class="headerlink" title="替换为browserHistory"></a>替换为browserHistory</h3><blockquote><p>#后面应该是锚点，url应该就是/，为什么路由要用#？2016年了还#，你这是搞事情！</p></blockquote><p>代码洁癖：保持和最广泛的规范一致，不要搞事情。</p><p>修改点：</p><ul><li>前后端的uri前缀配置。</li><li>页面跳转方式使用browserHistory.push。</li><li>修改打包时各种静态资源的相对路径注入方式。</li></ul><h3 id="修改跨页面变量存储方式"><a href="#修改跨页面变量存储方式" class="headerlink" title="修改跨页面变量存储方式"></a>修改跨页面变量存储方式</h3><p>封装了Cookie和localStorage，自动判断本地是否支持localStorage，优先使用localStorage；如果强制要求使用Cookie则使用Cookie。</p><h3 id="抽取第三方APP相关的接口代码"><a href="#抽取第三方APP相关的接口代码" class="headerlink" title="抽取第三方APP相关的接口代码"></a>抽取第三方APP相关的接口代码</h3><p>将路由、登录、支付代码从页面代码和内部公共代码部分抽离，以备后期代码复用时配置化管理。</p><h3 id="部署配置纳入管理"><a href="#部署配置纳入管理" class="headerlink" title="部署配置纳入管理"></a>部署配置纳入管理</h3><p>最近投产发生了替换静态资源后大面积出现404的问题，原因是之前应该投产的配置文件修改由于种种原因没有投产，导致出错。现将配置文件纳入管理。</p><h1 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设"></a>团队建设</h1><p>严格来说，技术团队的建设谈不上特别复杂，相对来说比较单纯——你技术强大家就会听你的。只不过在我们的开发中技术团队的构成比较复杂一点：</p><ul><li>成员构成为我、入职新人、厂商的驻场开发人员。</li><li>前端开发由另外的厂商提供静态页面，再由上述三类开发人员开发。</li></ul><p>按照“看山”的分法，大部分的开发人员停留在“看山是山”的程度，并不了解隐藏在背后的思量。作为前端建设的负责人，我不可能也不应该完成前端的大部分编码，而是要挑选适合的人选进行培养，然后在保证质量的前提上，提高团队工作的效率，减少bug率，提高整个团队的水准。</p><p>实际上，我并没有特地对人员进行培养，只是提供了不少参考文档和示例代码，布置了一些开发任务，然后期待他们的主观能动性。如何培养人才？这方面一直是我欠缺的，希望来年在这方面多下功夫。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一年一度的年终总结又开始了，前几年的年终总结要么拖着拖着就没写了，要么就是写了忘了放哪了。今年把之前的博客从国外的托管主机上的WordPress博客放到了github上，然后用七牛去做了一下镜像缓存，码字和发布的体验提升了不少，也就有了那么一点写年终总结的兴致。&lt;/p&gt;
&lt;p&gt;今年整个部门最重要的工作就是三大平台的建设，年初我参与了部分WLAN建设工作，之后的主要工作是负责其中一个子中心的前端建设工作。&lt;br&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="https://zhaozeyu.space/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://zhaozeyu.space/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>x-www-form-urlencoded、json和@RequestParam、@RequestBody</title>
    <link href="https://zhaozeyu.space/2016/12/07/x-www-form-urlencoded%E5%92%8Cjson/"/>
    <id>https://zhaozeyu.space/2016/12/07/x-www-form-urlencoded和json/</id>
    <published>2016-12-07T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.428Z</updated>
    
    <content type="html"><![CDATA[<p>临近下班碰到新人有个bug找不到原因，症状是发送了ajax请求后后台收不到数据。经过跟踪，发现请求头为</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">Accept:*/*</span></span><br><span class="line"><span class="section">Accept-Encoding:gzip, deflate, br</span></span><br><span class="line"><span class="section">Accept-Language:zh-CN,zh;q=0.8,ja;q=0.6,en-US;q=0.4,en;q=0.2,zh-TW;q=0.2</span></span><br><span class="line"><span class="section">Connection:keep-alive</span></span><br><span class="line"><span class="section">Content-Length:112</span></span><br><span class="line"><span class="section">Content-Type:application/json</span></span><br></pre></td></tr></table></figure><p>而后台使用Spring-MVC。Controller中的获取报文方式为@RequestParam。这是导致无法接受到参数的原因。</p><h1 id="RequestParam和-RequestBody"><a href="#RequestParam和-RequestBody" class="headerlink" title="@RequestParam和@RequestBody"></a>@RequestParam和@RequestBody</h1><p>@RequestParam为Spring提供的注解，对应处理String类型的body参数，如 <code>a=1&amp;b=2</code> 这类。</p><p>@RequestBody同为Spring提供的注解，对应处理非String类型的body参数，如json。</p><p>以上需要在Spring里进行配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;临近下班碰到新人有个bug找不到原因，症状是发送了ajax请求后后台收不到数据。经过跟踪，发现请求头为&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="Context-Type" scheme="https://zhaozeyu.space/tags/Context-Type/"/>
    
      <category term="HTTP" scheme="https://zhaozeyu.space/tags/HTTP/"/>
    
      <category term="Java" scheme="https://zhaozeyu.space/tags/Java/"/>
    
      <category term="Spring" scheme="https://zhaozeyu.space/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>在iOS APP内部使用JS访问webview时uri的查询参数需要encode两次</title>
    <link href="https://zhaozeyu.space/2016/11/08/%E5%9C%A8ios-app%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8js%E8%AE%BF%E9%97%AEwebview%E6%97%B6uri%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81encode%E4%B8%A4%E6%AC%A1/"/>
    <id>https://zhaozeyu.space/2016/11/08/在ios-app内部使用js访问webview时uri的查询参数需要encode两次/</id>
    <published>2016-11-08T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在使用开发运行于第三方APP内的SPA时，需要打开浏览器访问百度地图。APP提供了一个 <code>[prefix-to-open-browser]/[url-to-visit]</code> 的格式，可以在webview内使用 <code>window.location.href = &#39;[prefix-to-open-browser]/[url-to-visit]&#39;</code> 的方法来打开浏览器。<br><a id="more"></a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用 <code>[prefix-to-open-browser]/https://www.baidu.com</code> 时没有问题，但uri中包含中文参数时，使用 <code>encodeURI([uri])</code> 无法打开浏览器。</p><h1 id="跟踪"><a href="#跟踪" class="headerlink" title="跟踪"></a>跟踪</h1><p>在浏览器中进行测试，<code>encodeURI</code> 确实能将uri中的字符串进行编码：</p><blockquote><p>encodeURI之前：<a href="https://www.baidu.com/s?wd=编码" target="_blank" rel="noopener">https://www.baidu.com/s?wd=编码</a><br>encodeURI之后：<a href="https://www.baidu.com/s?wd=%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">https://www.baidu.com/s?wd=%E7%BC%96%E7%A0%81</a></p></blockquote><p>而在APP内部获取到的却是 <code>https://www.baidu.com/s?wd=编码</code>，导致APP无法打开浏览器。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>最后在浏览器中发现，<strong>encodeURI之后，在浏览器中访问时，会自动decodeURI一次</strong>。在使用两次encodeURI之后，就解决了这个问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在使用开发运行于第三方APP内的SPA时，需要打开浏览器访问百度地图。APP提供了一个 &lt;code&gt;[prefix-to-open-browser]/[url-to-visit]&lt;/code&gt; 的格式，可以在webview内使用 &lt;code&gt;window.location.href = &amp;#39;[prefix-to-open-browser]/[url-to-visit]&amp;#39;&lt;/code&gt; 的方法来打开浏览器。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://zhaozeyu.space/tags/iOS/"/>
    
      <category term="webview" scheme="https://zhaozeyu.space/tags/webview/"/>
    
      <category term="javascript" scheme="https://zhaozeyu.space/tags/javascript/"/>
    
      <category term="js" scheme="https://zhaozeyu.space/tags/js/"/>
    
      <category term="uri" scheme="https://zhaozeyu.space/tags/uri/"/>
    
      <category term="encode" scheme="https://zhaozeyu.space/tags/encode/"/>
    
      <category term="encodeURI" scheme="https://zhaozeyu.space/tags/encodeURI/"/>
    
  </entry>
  
  <entry>
    <title>为什么使用react/使用react有什么好处？</title>
    <link href="https://zhaozeyu.space/2016/10/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8react%E4%BD%BF%E7%94%A8react%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84/"/>
    <id>https://zhaozeyu.space/2016/10/10/为什么使用react使用react有什么好处/</id>
    <published>2016-10-10T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.428Z</updated>
    
    <content type="html"><![CDATA[<p>接手前端后，摸着石头过河，采用推荐的新的react框架，踩过不少坑，终于项目平稳上线。随之而来就会有许多人问：</p><blockquote><p>为什么要使用react？react有什么好处？和jQuery/velocity/bootstrap/AngularJS/Vue.js相比有什么优点？<br><a id="more"></a><br>其中我只用过jQuery+velocity，用过一点bootstrap，AngularJS和Vue.js都是道听途说，没有真正接触，不敢妄加评论，只能从自身经历，提供一点浅见。</p></blockquote><h1 id="问题的本质"><a href="#问题的本质" class="headerlink" title="问题的本质"></a>问题的本质</h1><p>这个问题的应该需求分析一下：</p><ol><li>使用react开发H5页面复杂吗？对新人的学习曲线怎么样？开发是否方便快捷？调试是否方便？</li><li>react能解决哪些方面的问题？不能解决哪些方面的问题？还需要什么补充？</li><li>好像没有3了。</li></ol><h1 id="React和现在使用的相关技术"><a href="#React和现在使用的相关技术" class="headerlink" title="React和现在使用的相关技术"></a>React和现在使用的相关技术</h1><p>首先，重申一点，react是一个UI框架，更正确的说法，应该只是提供了构建自己的UI框架的底层库。举个栗子，蚂蚁金服的ant design和啊妹子UI，都可以说是基于react构建的UI框架，包含了大家熟悉的按钮、轮播图、单选按钮组等组件。</p><p>而前端的客户端部分，也是存在MVC，或者流行的MV*结构的。所以，react肯定是需要其他方面技术补充的。</p><blockquote><p>为什么不直接使用ant design/Amaze UI？</p></blockquote><pre><code>我们构建的是面客系统，会有自己的设计风格，而使用ant design或是其他框架，其框架太重，不适合按照我们的特殊需求进行定制。这类框架比较适合内部系统或者是管理系统使用。</code></pre><p>由于React只是一个底层库，所以react需要一些其他的技术来构建SPA（单页面应用），如：依赖管理和打包的webpack、前端路由react-router、状态管理flux/redux/reflux等。</p><p>下面从我的经验介绍一下React及其系列相关技术的优缺点。</p><h1 id="React开发的优点"><a href="#React开发的优点" class="headerlink" title="React开发的优点"></a>React开发的优点</h1><p>React的开发其实是一件非常简单的事情。React的开发除了一个由于保留字需要把HTML的 <code>class</code> 替换成 <code>className</code>，剩下的就是专注于使用流程和状态来控制页面（JavaScript），以及将状态对应到正确的样式上（JSX）。</p><h2 id="简单，封装"><a href="#简单，封装" class="headerlink" title="简单，封装"></a>简单，封装</h2><p>如果使用过jQuery的第三方组件，或者bootstrap等，一旦页面比较复杂，就会碰到重命名、选择器等问题；如果使用过AngularJS，或者一些其他模板引擎，一定会学习这些库特有的一些语法，或是标签，如：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// AngularJS的循环遍历</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"#hero of heroes"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;hero.name&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>而在react里，你只需要会HTML和JavaScript。什么是jsx？</p><p>这是html：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">"background-color: #fff;"</span>&gt;这是HTML&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>这是JavaScript（ECMAScript 2015/ES6）：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    functionA() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是JSX：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">let myDivElement = &lt;div className=<span class="string">"foo"</span> /&gt;;</span><br><span class="line"><span class="type">ReactDOM</span>.render(myDivElement, document.getElementById(<span class="symbol">'exampl</span>e'));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更高级一点，自定义组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 面向对象中眼熟的继承</span></span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        <span class="comment">// react封装的自定义组件的参数传递方式</span></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            hello: <span class="keyword">this</span>.props.hello</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// react的组件渲染方法</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;label&gt;自定义react组件&lt;/label&gt;&lt;lable&gt;&#123;<span class="keyword">this</span>.state.hello&#125;&lt;/lable&gt;</span><br><span class="line">            &lt;/div&gt;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let hello = <span class="symbol">'worl</span>d';</span><br><span class="line">let myDivElement = &lt;<span class="type">MyComponent</span> hello=&#123;hello&#125;/&gt;; <span class="comment">// 给自定义组件传参</span></span><br><span class="line"><span class="type">ReactDOM</span>.render(myDivElement, document.getElementById(<span class="symbol">'exampl</span>e'));</span><br></pre></td></tr></table></figure><p>JSX很简单，就是在js中使用HTML标签组成的HTML片段，<strong>没有奇怪的属性，标签，方法</strong>，<strong>没有奇怪的属性，标签，方法</strong>，<strong>没有奇怪的属性，标签，方法</strong>，我喜欢的特性说三遍。</p><p>所以，react的核心思想就是，让开发人员关注业务流程变化导致的状态变化，将状态对应到具体的页面展示上，而对DOM的操作，交给react来进行。这样的方式，非常适用于目前由第三方出静态页面，我们的开发人员来实现最终效果的分工方式。</p><h2 id="强大的开发工具"><a href="#强大的开发工具" class="headerlink" title="强大的开发工具"></a>强大的开发工具</h2><p>在Java开发的时候，我们已经习惯了代码高亮、自动补全、语法提示、源码定位、规范检查、压缩混淆打包等功能，react开发自然也是有这一系列工具的，涵盖了Sublime、Atom、VSCode等多种编辑器，还具有在Chrome、Firefox进行调试的插件。</p><p>虽然经常有人吹牛说能用记事本写出千行代码，然而那只是个人能力，总不能要求所有人都具备这种能力，所以有好用的工具为何不用呢？自动化工具的使用，才利于项目的工程化，提高项目组整体的实施水平，极大提高开发效率，甚至一个好的代码高亮主题还能吸引妹子在你身后围观你编码。</p><h2 id="UNIX哲学"><a href="#UNIX哲学" class="headerlink" title="UNIX哲学"></a>UNIX哲学</h2><p>专注于解决一个问题，小而精，而非大而全。</p><p>尤其是在我们目前使用SpringMVC处理动态请求，使用nginx处理静态请求的架构下；具有自己的UE和UI设计的条件下，那些大而全的现有框架的一些隐蔽的使用条件，如某些库所需的支持等，和按照设计对一些内容进行改造等，非常繁琐不便利。</p><p>React提供了一个完整的UI渲染更新流程，设计了一个组件封装的生命周期。使用react，将DOM操作交给react，能使开发人员专注于业务流程，减少繁琐的DOM操作的开发，降低由于DOM操作导致的bug（在使用jQuery的年代很常见，bootstrap也是，很多以HTML为设计核心的难以封装模板引擎也是）。</p><p>使用小而精的工具，能使我们对手中的项目了若指掌，避免莫名的问题。</p><h2 id="丰富的库支持"><a href="#丰富的库支持" class="headerlink" title="丰富的库支持"></a>丰富的库支持</h2><p><a href="https://www.npmjs.com/search?q=react" target="_blank" rel="noopener">21465 results for ‘react’.</a></p><h2 id="社区和文档支持等"><a href="#社区和文档支持等" class="headerlink" title="社区和文档支持等"></a>社区和文档支持等</h2><p>React具有<a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="noopener">比较详细的文档</a>、<a href="https://facebook.github.io/react/docs/videos.html" target="_blank" rel="noopener">教学视频</a>和大量的<a href="https://github.com/facebook/react/wiki/Examples" target="_blank" rel="noopener">示例代码、脚手架</a>，在<a href="https://github.com/" target="_blank" rel="noopener">某知名大型国际同性交友网站</a>上能找到<a href="https://github.com/search?utf8=%E2%9C%93&amp;q=react" target="_blank" rel="noopener">10W+相关代码</a>。</p><h1 id="React开发的缺点"><a href="#React开发的缺点" class="headerlink" title="React开发的缺点"></a>React开发的缺点</h1><p>大致说完了优点，来说说缺点。</p><h2 id="JavaScript发展快速，导致了混乱"><a href="#JavaScript发展快速，导致了混乱" class="headerlink" title="JavaScript发展快速，导致了混乱"></a>JavaScript发展快速，导致了混乱</h2><p>这几年是JavaScript，嗯，ECMAScript发展迅速的一年，前端相关们都各有各的野心，浏览器厂商和标准组织合纵连横，谷歌微软苹果互相掐架，微软Mozilla眉来眼去，两年就从ES5到了ES6眼看着又要马不停蹄奔向ES7了，这就导致目前百度搜索到的react示例大部分使用ES5，一部分使用ES6，少量使用ES7，<strong>不利于初学者学习</strong>，尤其是大部分人都是从学习<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">写blog写到阿里的某大牛</a>开始。</p><p>而我们，使用的是ES6。</p><p><em>注：JavaScript是ECMA-262标准的实现和扩展，我们使用的ES6基于ECMA-262 6th Edition。</em></p><h2 id="太多工具"><a href="#太多工具" class="headerlink" title="太多工具"></a>太多工具</h2><p>既然要拥抱UNIX哲学，那么就会面临大量工具选择的问题：编辑器、构建、脚手架、规则校验、测试等，都需要进行选择、配置，以便项目组进行开发。</p><p><em>虽然我写了一些工具配置使用说明，但不知为何很多人还是使用一个没有安装任何插件的Sublime/Atom进行开发，难道都是记事本写十万行不出bug的大牛？</em></p><h2 id="React设计思想"><a href="#React设计思想" class="headerlink" title="React设计思想"></a>React设计思想</h2><p>React和相关系列技术的设计思想，是开发人员使用react的最大门槛。</p><p>React的willMount-didMount-willReceiveProps-shouldUpdate-willUpdate-didUpdate-willUnmount的生命周期，规范了DOM的更新，同时也提高了学习门槛。开发人员需要了解何时重写生命周期方法，这就要求开发人员对页面可能发生的状态迁移和目标结果有充分了解。事实上，我觉得，开发人员也应该清楚页面的状态迁移和目标结果——至少是大部分的。</p><p>同时，react支持多种创建组件的方式：React.createClass、ES6 Classes和stateless functional components（无状态组件）。</p><p>应该使用哪个方式？开发人员会面临混乱。</p><p>React官方指出应该分为两层：使用无状态组件渲染页面各个部分；使用ES6 Classes保持页面状态；React.createClass是ES5及其之前的东西，请勿使用——恰巧这是目前国内大部分示例使用的方式。</p><p>同时目前由于页面不是很复杂所以没有采用的各大状态管理机制，也暂时降低了开发难度。</p><p><em>从开发的支持筛选、搜索的商户列表页来看，似乎马上也要使用flux/redux/reflux一类了，蓝瘦，香菇。</em></p><h2 id="语言障碍"><a href="#语言障碍" class="headerlink" title="语言障碍"></a>语言障碍</h2><p>目前国内大部分示例停留在ES5，已过期，需要翻墙去寻找示例。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在项目从2015年底需求研究开始到2016年4月开始一个月开发一个月测试投产上线，再到10月的二期期间，经历了接触react、webpack、ES6、react-router等到利用空档偷偷摸摸重构项目、修改目录结构、修改代码编写范例、利用非工作时间充电等，对这一系列技术有了一定的了解。</p><p>总的来说，react的使用和大部分技术一样，在一个团队里，只需要一个技术比较好的人搭建了boilerplate，写了几个sample，其他人依样画葫芦就可以了。而项目质量，从来不是一门语言、一个库或者框架就能决定的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接手前端后，摸着石头过河，采用推荐的新的react框架，踩过不少坑，终于项目平稳上线。随之而来就会有许多人问：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么要使用react？react有什么好处？和jQuery/velocity/bootstrap/AngularJS/Vue.js相比有什么优点？&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://zhaozeyu.space/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-router：从hashHistory到browserHistory</title>
    <link href="https://zhaozeyu.space/2016/07/31/react-router%E4%BB%8Ehashhistory%E5%88%B0browserhistory/"/>
    <id>https://zhaozeyu.space/2016/07/31/react-router从hashhistory到browserhistory/</id>
    <published>2016-07-31T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.428Z</updated>
    
    <content type="html"><![CDATA[<p>项目开始使用react-router时由于工期原因，使用了hashHistory，在url末尾会形成<code>/#/user/haishanh?_k=adseis</code>中<code>_k=adseis</code>的query字符串。这在浏览器中打开时会让用户感到迷惑。</p><h1 id="hashHistory和queryKey"><a href="#hashHistory和queryKey" class="headerlink" title="hashHistory和queryKey"></a>hashHistory和queryKey</h1><p>在一些旧的浏览器中，不支持H5提供的新的接口如pushState，则使用了该方法生成key来读写window.sessionStorage的内容，实现页面跳转和回退时保持页面状态的功能，如类似新浪微博列表页请求了几次更多微博，进入详情页面后返回到列表页之前获取的微博仍然在里面无需重复之前的请求；又或者一个流程多个复杂表格填写，在前进、后退过程中保持之前填写的内容。</p><a id="more"></a><p>在<a href="http://react-china.org/t/react-router-hashhistory-browserhistory/6799/4" target="_blank" rel="noopener">【react-router】hashhistory 与 browserhistory有什么区别</a>中有简单设置以去掉<code>_k=abc123</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createHashHistory &#125; <span class="keyword">from</span> <span class="string">'history'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appHistory = useRouterHistory(createHashHistory)(&#123; <span class="attr">queryKey</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Router history=&#123;appHistory&#125;&gt;</span><br><span class="line">    &#123;routes&#125;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('app')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>问题：无法使用state保持页面状态，无法使用state来渲染链接对应页面，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = &#123;</span><br><span class="line">  pathname: <span class="string">'business/BaiduSearch/update'</span>,</span><br><span class="line">  state: &#123; <span class="attr">id</span>: record.id &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;Link to=&#123;path&#125;&gt;修改&lt;<span class="regexp">/Link&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用browserHistory"><a href="#使用browserHistory" class="headerlink" title="使用browserHistory"></a>使用browserHistory</h1><p>在一些框架、库提供的糖面前，我倾向于不使用改变更广泛的标准的做法。如上面通过使用hashHistory和queryKey来获取state来渲染页面的方法，我更倾向于使用<code>http://example.com/the/path?the=query&amp;id=recordId</code>的方式获取相关信息渲染页面，这样在分享链接时也更为方便。</p><h2 id="创建browserHistory"><a href="#创建browserHistory" class="headerlink" title="创建browserHistory"></a>创建browserHistory</h2><p>本来可以直接使用<code>react-router</code>提供的<code>browserHistory</code>，但考虑到该项目对应的域名为<code>xxx.xxx.com/xx</code>，而且本地开发环境使用localhost:port访问，所以引入<a href="https://www.npmjs.com/package/history" target="_blank" rel="noopener">history</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createHistory&#125; <span class="keyword">from</span> <span class="string">'history'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Router,</span><br><span class="line">  Route,</span><br><span class="line">  useRouterHistory</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> browserHistory = useRouterHistory(createHistory)(&#123;<span class="attr">basename</span>: process.env.NODE_ENV === <span class="string">'production'</span>? <span class="string">'/xx'</span>: <span class="string">''</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> routes = (</span><br><span class="line">  &lt;Router history=&#123;browserHistory&#125;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>同时，需要修改对应的web容器配置，使其知道/xx/下的所有uri路由到单页面应用。目前使用的nginx。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location <span class="regexp">/xx/</span> &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="regexp">/xx/i</span>ndex.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>目前state的作用主要是提供了保持页面状态的功能，包括相关的存取功能。这部分功能可以使用很多方式实现，如history的location.state，cookie，甚至是引入redux等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目开始使用react-router时由于工期原因，使用了hashHistory，在url末尾会形成&lt;code&gt;/#/user/haishanh?_k=adseis&lt;/code&gt;中&lt;code&gt;_k=adseis&lt;/code&gt;的query字符串。这在浏览器中打开时会让用户感到迷惑。&lt;/p&gt;
&lt;h1 id=&quot;hashHistory和queryKey&quot;&gt;&lt;a href=&quot;#hashHistory和queryKey&quot; class=&quot;headerlink&quot; title=&quot;hashHistory和queryKey&quot;&gt;&lt;/a&gt;hashHistory和queryKey&lt;/h1&gt;&lt;p&gt;在一些旧的浏览器中，不支持H5提供的新的接口如pushState，则使用了该方法生成key来读写window.sessionStorage的内容，实现页面跳转和回退时保持页面状态的功能，如类似新浪微博列表页请求了几次更多微博，进入详情页面后返回到列表页之前获取的微博仍然在里面无需重复之前的请求；又或者一个流程多个复杂表格填写，在前进、后退过程中保持之前填写的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://zhaozeyu.space/tags/react/"/>
    
      <category term="react-router" scheme="https://zhaozeyu.space/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>前端重构第一次尝试后思路整理</title>
    <link href="https://zhaozeyu.space/2016/07/14/%E5%89%8D%E7%AB%AF%E9%87%8D%E6%9E%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95%E5%90%8E%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/"/>
    <id>https://zhaozeyu.space/2016/07/14/前端重构第一次尝试后思路整理/</id>
    <published>2016-07-14T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.427Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一个项目的前端开发，上线了，然而怎么看都是一个玩具一般的东西，需要一次强力升级。前段时间也看了很多博客，翻了很多文档，对项目进行了一次小小的外科手术，但随着了解深入，收获的知识越来越多，接触到的问题也越来越多。道高一尺魔高一丈，也许也能这样解释？得整理一下思路，降服一下心魔了。<br><a id="more"></a></p><h1 id="目前项目状态"><a href="#目前项目状态" class="headerlink" title="目前项目状态"></a>目前项目状态</h1><p>初始状态：</p><ul><li>参考之前jQuery + Velocity年代，目录分为css、scripts、img，scripts下分为pages和util。</li><li>项目较小，为嵌入APP webview中的H5项目，css放入一个统一的css文件中。</li><li>引入react、react-router。</li><li>使用webpack打包，只输出bundle.js到asset目录下，bundle.js和css文件直接在index.html中引用。</li><li>图片和css样式在react组件中直接以<code>className=&quot;class-a class-b&quot;</code>和<code>&lt;img src=&quot;../../img/a/png&quot; /&gt;</code>的方式使用。</li></ul><p>一个这样的项目，怎么就这样上线了？除了在生产打包使用了<code>webpack.optimize.UglifyJsPlugin</code>这种打包压缩js之外，看不到现代前端工程的痕迹。虽然是个小项目，可以不那么重视性能，但连gzip都没有开是怎么回事？一个400多k的bundle.js在webview中请求并加载运行的速度完全不能接受。而且这个项目可能要作为模板在其他项目中使用。作为一个有代码和工程洁癖的人，怎么能忍受这样的事情？</p><p>然后有了之前的<a href="!--￼0--">进阶修改</a>。</p><p>此时，了解的知识和碰到的问题越来越多，如<a href="https://csspod.com/frontend-performance-best-practices/" target="_blank" rel="noopener">前端性能优化最佳实践</a>，<a href="https://github.com/fouber/blog" target="_blank" rel="noopener">某技术总监的前端博文</a>等；也发现了不少帮助解决前端工程问题的工具，如<a href="http://fis.baidu.com/" target="_blank" rel="noopener">fis3@Baidu-FEX-team</a>，<a href="http://yeoman.io/" target="_blank" rel="noopener">yo@Google-Yeoman-team</a>。已经有不少前辈趟过雷踩过坑，很多文章都很精彩，但并不一定适合我所在team的环境。也许，需要针对我厂特点进行一个定制了。</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>现有环境：</p><ol><li>苛刻的资源权限管理：生产环境、代码资源、测试环境、外网环境等申请困难重重。</li><li>内网环境开发和部署，可以支持代理上npm。</li><li>代码版本管理可能使用TFS/SVN/Git等多种版本管理工具，目前使用TFS。</li><li>前端开发人员前端开发技能熟练度不高，对JQuery系不很熟练的程度，更不用说es6、react、组件化。</li><li>打包部署流程有待考察。</li><li>不一定适用CDN，目标运行环境主要为移动设备，包括手机、平板、笔记本。</li><li>目前为粗暴缩放，缺乏精细多屏适配设计与实现。</li></ol><p>需求：</p><ol><li><strong>开发规范</strong>：基于es6、react、webpack开发，要有开发规范，快速定位开发问题，提高开发效率。</li><li><strong>模块化/组件化</strong>：有自己的模块/组件仓库，解决命名空间、组件独立、依赖管理、按需加载执行、安全合并等问题，区分开业务相关和业务无关的模块和组件。</li><li><strong>react技术</strong>：使用react作为UI组件，使用react-router管理前端路由，使用redux管理前端状态，状态数据结构必须immutable。</li><li><strong>性能优化</strong>：通过工程化方法进行性能优化，包括加速首屏加载，图片压缩合并，CSS Sprite，Base64图片，缓存和缓存更新，性能提升统计评估等。</li><li><strong>项目部署</strong>：开发资源组织规则和部署资源组织规则分离，支持动静分离、静态资源缓存、CDN、非覆盖式发布等。</li><li><strong>开发流程</strong>：内网环境开发，支持通过代理访问外网npm，代码托管在内网windows server TFS上，构建也位于windows server，可以通过代理访问外网npm，生产构建位于windows。</li><li><strong>开发工具</strong>：内网开发，编辑器、IDE、构建与优化工具、开发-调试-部署等流程工具，以及组件库获取、提交等相关工具，甚至运营、文档、配置发布等平台工具。</li><li><strong>协作流程</strong>：业务提交需求，厂商提供UEUI和静态页面，组内开发人员根据静态页面编写react页面。</li><li><strong>后台</strong>：目前使用Java SpringMVC，动态请求发送POST到Controller，Service层使用Dubbo。</li><li><strong>其他</strong>：待发掘。</li></ol><p>分析：</p><ul><li>对于第1点，前期的改造基本完成。</li><li>第2、3点需要修改目录结构，提供samples。</li><li>第4点目前已经使用了缓存、hash、gzip压缩、base64等技术，Java环境下的react首页直出有待研究。</li><li>第5、6点和本厂大环境相关，只考虑开发和打包过程，从代码仓库抽取到打包环境和打包环境到生产部署的过程和工具暂不考虑。</li><li>第7点已经编写了内网环境下搭建基于sublime的开发环境的教程。</li><li>第8点主要在于本组静态页面开发能力较弱，需要长期培养。</li><li>第9点主要用于考虑后期使用node替换SpringMVC使web前后端同构，java只负责服务层。</li></ul><p>所以目前主要考虑的应该是，静态资源开发和组织的工程化，在<a href="!--￼1--">进阶修改</a>的基础上引入redux及其相关技术，进一步组件化，构建自己的组件仓库，提供samples等。可以先研究<a href="http://yeoman.io/" target="_blank" rel="noopener">yeoman</a>这样的构造工具。国内fis3这样的工具不像yeoman这样透明直观，使用时对其机理存疑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一个项目的前端开发，上线了，然而怎么看都是一个玩具一般的东西，需要一次强力升级。前段时间也看了很多博客，翻了很多文档，对项目进行了一次小小的外科手术，但随着了解深入，收获的知识越来越多，接触到的问题也越来越多。道高一尺魔高一丈，也许也能这样解释？得整理一下思路，降服一下心魔了。&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://zhaozeyu.space/tags/webpack/"/>
    
      <category term="react" scheme="https://zhaozeyu.space/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前端重构第一次尝试</title>
    <link href="https://zhaozeyu.space/2016/07/11/%E5%89%8D%E7%AB%AF%E9%87%8D%E6%9E%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/"/>
    <id>https://zhaozeyu.space/2016/07/11/前端重构第一次尝试/</id>
    <published>2016-07-11T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.427Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间自行吐槽了自己参与大部分工作的前端项目，慢慢学习前端工作流到现在，并尝试了重构，记录一下。</p><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><p>首先，把和环境相关的配置提取出来，使用webpack.DefinePlugin，避免每次部署时开发环境、测试环境、生产环境的变量手动修改。<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义运行环境相关变量 */</span></span><br><span class="line"><span class="keyword">var</span> SITE_STATIC_PREFIX = <span class="string">'/yh-wifi-web/'</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      SITE_STATIC_PREFIX: <span class="built_in">JSON</span>.stringify(SITE_STATIC_PREFIX),</span><br><span class="line">      SITE_DYNAMIC_PREFIX:<span class="built_in">JSON</span>.stringify(SITE_DYNAMIC_PREFIX)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure></p><h1 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h1><p>然后，把css和图片等资源文件从在index.html里直接饮用挪到js中引用，以便将静态资源文件纳入管理，解决热部署问题（<a href="http://zhihu.com/question/20790576/answer/32602154" target="_blank" rel="noopener">大公司里怎样开发和部署前端代码？ - 回答作者: 张云龙</a>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 引用静态资源 */</span></span><br><span class="line"><span class="keyword">import</span> zoneMomImage <span class="keyword">from</span> <span class="string">'../../../image/mom.png'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'../../../css/app.css'</span>;</span><br></pre></td></tr></table></figure><p>在webpack配置中添加对应loader。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在webpack配置中添加对应loader */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loader: loaders: [<span class="string">'style?sourceMap'</span>, <span class="string">'css?modules&amp;camelCase&amp;sourceMap'</span>],</span><br><span class="line">      include: path.join(__dirname, <span class="string">'css'</span>)</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">      loaders: [<span class="string">'url?limit=8192'</span>],</span><br><span class="line">      include: path.join(__dirname, <span class="string">'image'</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>这样，就可以在react中使用css module。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sample-camel</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在react中引用之后，可以使用对应变量表示样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render(</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.sampleCamel&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure><p>然而，考虑到现在的前端开发流程，UE-&gt;UI-&gt;HTML+CSS-&gt;react组件，以及现有项目的修改难度，引入了<a href="https://github.com/gajus/react-css-modules" target="_blank" rel="noopener">react-css-modules</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ComponentSample.js</span></span><br><span class="line"><span class="keyword">import</span> CSSModules <span class="keyword">from</span> <span class="string">'react-css-modules'</span>;</span><br><span class="line"><span class="comment">// 修改className为styleName</span></span><br><span class="line">render(</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">styleName</span>=<span class="string">"sample-camel"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">)</span></span><br><span class="line"><span class="xml">// 装饰组件</span></span><br><span class="line"><span class="xml">export default CSSModules(ComponentSample, styles, &#123;allowMultiple:true&#125;);</span></span><br><span class="line"><span class="xml">// webpack配置</span></span><br><span class="line"><span class="xml">module.exports = &#123;</span></span><br><span class="line"><span class="xml">  module: &#123;</span></span><br><span class="line"><span class="xml">    loaders: [&#123;</span></span><br><span class="line"><span class="xml">      test: /\.css$/,</span></span><br><span class="line"><span class="xml">      loader: loaders: ['style?sourceMap', 'css?modules&amp;importLoaders=1&amp;localIdentName=[path]__[name]__[local]__[hash:base64:5]'],</span></span><br><span class="line"><span class="xml">      include: path.join(__dirname, 'css')</span></span><br><span class="line"><span class="xml">    &#125;, &#123;</span></span><br><span class="line"><span class="xml">      test: /\.(png|jpg|gif|svg)$/,</span></span><br><span class="line"><span class="xml">      loaders: ['url?limit=8192'],</span></span><br><span class="line"><span class="xml">      include: path.join(__dirname, 'image')</span></span><br><span class="line"><span class="xml">    &#125;]</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;；</span></span><br></pre></td></tr></table></figure><p>这样，不论是现有项目修改还是新项目从静态页面到react，都更为方便。</p><p>最后修改在生产环境的webpack配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'asset'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="literal">false</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.DedupePlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      SITE_STATIC_PREFIX: <span class="built_in">JSON</span>.stringify(SITE_STATIC_PREFIX),</span><br><span class="line">      SITE_DYNAMIC_PREFIX:<span class="built_in">JSON</span>.stringify(SITE_DYNAMIC_PREFIX)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].[chunkhash].css'</span>, &#123;<span class="attr">allChunks</span>:<span class="literal">true</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template:<span class="string">'scripts/index.ejs'</span>,</span><br><span class="line">      minify:&#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeRedundantAttributes: <span class="literal">true</span>,</span><br><span class="line">        useShortDoctype: <span class="literal">true</span>,</span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">        keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyURL: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      inject:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;<span class="attr">test</span>: <span class="regexp">/.jsx?$/</span>,<span class="attr">loaders</span>: [<span class="string">'babel'</span>],<span class="attr">include</span>: path.join(__dirname, <span class="string">'scripts'</span>)&#125;, &#123;<span class="attr">test</span>: <span class="regexp">/.js?$/</span>,<span class="attr">loaders</span>: [<span class="string">'babel'</span>],<span class="attr">include</span>: path.join(__dirname, <span class="string">'scripts'</span>)&#125;, &#123;<span class="attr">test</span>: <span class="regexp">/.css$/</span>,<span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?modules&amp;importLoaders=1&amp;localIdentName=[path]__[name]__[local]__[hash:base64:5]'</span>),<span class="attr">include</span>: path.join(__dirname, <span class="string">'css'</span>)&#125;, &#123;<span class="attr">test</span>: <span class="regexp">/.(png|jpg|gif|svg)$/</span>,<span class="attr">loaders</span>: [<span class="string">'url?limit=8192'</span>, <span class="string">'image-webpack?bypassOnDebug&amp;optimizationLevel=7&amp;interlaced=false'</span>],<span class="attr">include</span>: path.join(__dirname, <span class="string">'image'</span>)&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中尝试加入<a href="https://github.com/tcoopman/image-webpack-loader" target="_blank" rel="noopener">图片压缩</a>，但在windows环境下imagemin依赖的库会出现问题，目前没有解决方案，只能考虑在其他步骤中进行处理。</p><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><p>按照以下进行了代码重写。</p><ol><li>重申命名规范，组件/页面单独文件夹，文件夹下index.js作为默认导出，使用到的多个组件在文件夹内创建[ComponentName.js]来引用。</li><li>按照要求将react-router的hashHistory替换为browserHistory，在上面的修改完成后，由于使用browserHistory导致的资源路径问题也同步解决了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间自行吐槽了自己参与大部分工作的前端项目，慢慢学习前端工作流到现在，并尝试了重构，记录一下。&lt;/p&gt;
&lt;h1 id=&quot;配置管理&quot;&gt;&lt;a href=&quot;#配置管理&quot; class=&quot;headerlink&quot; title=&quot;配置管理&quot;&gt;&lt;/a&gt;配置管理&lt;/h1&gt;&lt;p&gt;首先，把和环境相关的配置提取出来，使用webpack.DefinePlugin，避免每次部署时开发环境、测试环境、生产环境的变量手动修改。&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://zhaozeyu.space/tags/webpack/"/>
    
      <category term="react" scheme="https://zhaozeyu.space/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>使用esformat和其plugin来格式化es6及react代码</title>
    <link href="https://zhaozeyu.space/2016/07/02/%E4%BD%BF%E7%94%A8esformat%E5%92%8C%E5%85%B6plugin%E6%9D%A5%E6%A0%BC%E5%BC%8F%E5%8C%96es6%E5%8F%8Areact%E4%BB%A3%E7%A0%81/"/>
    <id>https://zhaozeyu.space/2016/07/02/使用esformat和其plugin来格式化es6及react代码/</id>
    <published>2016-07-02T00:00:00.000Z</published>
    <updated>2018-06-03T03:41:39.427Z</updated>
    
    <content type="html"><![CDATA[<ol><li>使用sublime esfomatter插件。</li><li>如eslint一样，配置.esformatter，添加esformatter和esformatter插件为项目依赖。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;使用sublime esfomatter插件。&lt;/li&gt;
&lt;li&gt;如eslint一样，配置.esformatter，添加esformatter和esformatter插件为项目依赖。&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
      <category term="react" scheme="https://zhaozeyu.space/tags/react/"/>
    
      <category term="es6" scheme="https://zhaozeyu.space/tags/es6/"/>
    
      <category term="format" scheme="https://zhaozeyu.space/tags/format/"/>
    
      <category term="esformat" scheme="https://zhaozeyu.space/tags/esformat/"/>
    
  </entry>
  
</feed>
